<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js闭包</title>
      <link href="posts/7d8b.html"/>
      <url>posts/7d8b.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><h5 id="闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数"><a href="#闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数" class="headerlink" title="闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数"></a>闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数</h5><h5 id="闭包的形成与变量的作用域和变量的生命周期息息相关"><a href="#闭包的形成与变量的作用域和变量的生命周期息息相关" class="headerlink" title="闭包的形成与变量的作用域和变量的生命周期息息相关"></a>闭包的形成与变量的作用域和变量的生命周期息息相关</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">"xiner"</span><span class="token punctuation">;</span> <span class="token comment">//name是heart 创建的局部变量 </span>  <span class="token keyword">function</span> <span class="token function">heartChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//内部函数,闭包</span>    <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用外部的变量</span>  <span class="token punctuation">&#125;</span>  <span class="token function">heartChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在-heartChild-内部可以使用heart-中声明的变量name-这就形成了一个闭包"><a href="#在-heartChild-内部可以使用heart-中声明的变量name-这就形成了一个闭包" class="headerlink" title="在 heartChild()内部可以使用heart()中声明的变量name,这就形成了一个闭包"></a>在 heartChild()内部可以使用heart()中声明的变量name,这就形成了一个闭包</h5><h2 id="二、作用"><a href="#二、作用" class="headerlink" title="二、作用"></a>二、作用</h2><h3 id="1-函数内部调用外部变量"><a href="#1-函数内部调用外部变量" class="headerlink" title="1.函数内部调用外部变量"></a>1.函数内部调用外部变量</h3><h5 id="上面的例子就反映了在heartChild-函数内部并没有name变量，而是访问了heart-里面的内部变量"><a href="#上面的例子就反映了在heartChild-函数内部并没有name变量，而是访问了heart-里面的内部变量" class="headerlink" title="上面的例子就反映了在heartChild()函数内部并没有name变量，而是访问了heart()里面的内部变量"></a>上面的例子就反映了在heartChild()函数内部并没有name变量，而是访问了heart()里面的内部变量</h5><h3 id="2-构造函数的私有属性"><a href="#2-构造函数的私有属性" class="headerlink" title="2.构造函数的私有属性"></a>2.构造函数的私有属性</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Heart</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name<span class="token operator">=</span>name<span class="token punctuation">;</span> <span class="token comment">//name是heart 创建的局部变量 </span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">15</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'xiner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>heart1<span class="token punctuation">.</span>age<span class="token operator">+=</span><span class="token number">1</span> heart1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'xin'</span>heart1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//xiner  name就是构造函数的私有属性，不能改变,age就可以改变</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">)</span>  <span class="token comment">//age=16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-延长变量生命周期"><a href="#3-延长变量生命周期" class="headerlink" title="3.延长变量生命周期"></a>3.延长变量生命周期</h3><h5 id="在函数内部的变量-原来在函数执行之后-都会被销毁-而由于闭包-变量永远会被保存下来-延长了生命周期"><a href="#在函数内部的变量-原来在函数执行之后-都会被销毁-而由于闭包-变量永远会被保存下来-延长了生命周期" class="headerlink" title="在函数内部的变量,原来在函数执行之后,都会被销毁,而由于闭包,变量永远会被保存下来,延长了生命周期"></a>在函数内部的变量,原来在函数执行之后,都会被销毁,而由于闭包,变量永远会被保存下来,延长了生命周期</h5><h2 id="三、闭包的应用"><a href="#三、闭包的应用" class="headerlink" title="三、闭包的应用"></a>三、闭包的应用</h2><h5 id="axios的请求回调"><a href="#axios的请求回调" class="headerlink" title="axios的请求回调"></a>axios的请求回调</h5><h5 id="事件绑定的回调"><a href="#事件绑定的回调" class="headerlink" title="事件绑定的回调"></a>事件绑定的回调</h5><h5 id="setTimeout的延时回调"><a href="#setTimeout的延时回调" class="headerlink" title="setTimeout的延时回调"></a>setTimeout的延时回调</h5><h5 id="函数内部返回一个匿名函数"><a href="#函数内部返回一个匿名函数" class="headerlink" title="函数内部返回一个匿名函数"></a>函数内部返回一个匿名函数</h5><h5 id="函数节流和防抖等等"><a href="#函数节流和防抖等等" class="headerlink" title="函数节流和防抖等等"></a>函数节流和防抖等等</h5><h2 id="四、内存泄漏"><a href="#四、内存泄漏" class="headerlink" title="四、内存泄漏"></a>四、内存泄漏</h2><h5 id="由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露"><a href="#由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露" class="headerlink" title="由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露"></a>由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// div用完之后一直存在内存中，无法被回收</span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里用div导致内存泄露</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> test <span class="token operator">=</span> div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    div <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//div用完后,使其制空，避免泄露</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型与原型链</title>
      <link href="posts/e69b.html"/>
      <url>posts/e69b.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、原型"><a href="#一、原型" class="headerlink" title="一、原型"></a>一、原型</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><h5 id="原型是一个对象的模板-利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法"><a href="#原型是一个对象的模板-利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法" class="headerlink" title="原型是一个对象的模板,利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法"></a>原型是一个对象的模板,利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span><span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明是一个15的帅哥</span>heart2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小红是一个18的美女</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="并且通过原型创建的新实例是相互独立-互不影响的"><a href="#并且通过原型创建的新实例是相互独立-互不影响的" class="headerlink" title="并且通过原型创建的新实例是相互独立,互不影响的"></a>并且通过原型创建的新实例是相互独立,互不影响的</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span><span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//小明</span>heart2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//报错 heart2.getName is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-总结"><a href="#2-总结" class="headerlink" title="2.总结"></a>2.总结</h3><h5 id="原型分为隐士原型-proto-和显示原型-prototype"><a href="#原型分为隐士原型-proto-和显示原型-prototype" class="headerlink" title="原型分为隐士原型(__proto__)和显示原型(prototype)"></a>原型分为隐士原型(__proto__)和显示原型(prototype)</h5><h5 id="隐士原型-proto-是对象拥有的-显示原型-prototype-是构造函数拥有的"><a href="#隐士原型-proto-是对象拥有的-显示原型-prototype-是构造函数拥有的" class="headerlink" title="隐士原型(__proto__)是对象拥有的,显示原型(prototype)是构造函数拥有的"></a>隐士原型(__proto__)是对象拥有的,显示原型(prototype)是构造函数拥有的</h5><h5 id="实例的隐士原型-proto-指向构造函数的显示原型-prototype"><a href="#实例的隐士原型-proto-指向构造函数的显示原型-prototype" class="headerlink" title="实例的隐士原型(__proto__)指向构造函数的显示原型(prototype)"></a>实例的隐士原型(__proto__)指向构造函数的显示原型(prototype)</h5><h5 id="实例的构造器属性-constructor-指向构造函数"><a href="#实例的构造器属性-constructor-指向构造函数" class="headerlink" title="实例的构造器属性(constructor)指向构造函数"></a>实例的构造器属性(constructor)指向构造函数</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>constructor<span class="token operator">===</span> Heart<span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、原型链"><a href="#二、原型链" class="headerlink" title="二、原型链"></a>二、原型链</h2><h5 id="1-当访问heart1的属性时-先访问自身是否是否具有该属性"><a href="#1-当访问heart1的属性时-先访问自身是否是否具有该属性" class="headerlink" title="1.当访问heart1的属性时,先访问自身是否是否具有该属性;"></a>1.当访问heart1的属性时,先访问自身是否是否具有该属性;</h5><h5 id="2-若自身没有该属性-就会访问Heart-prototype是否拥有"><a href="#2-若自身没有该属性-就会访问Heart-prototype是否拥有" class="headerlink" title="2.若自身没有该属性,就会访问Heart.prototype是否拥有;"></a>2.若自身没有该属性,就会访问Heart.prototype是否拥有;</h5><h5 id="3-若Heart-prototype没有该属性-就会访问Object-prototype是否拥有"><a href="#3-若Heart-prototype没有该属性-就会访问Object-prototype是否拥有" class="headerlink" title="3.若Heart.prototype没有该属性,就会访问Object.prototype是否拥有;"></a>3.若Heart.prototype没有该属性,就会访问Object.prototype是否拥有;</h5><h5 id="3-若Object-prototype没有该属性-就会返回undefined"><a href="#3-若Object-prototype没有该属性-就会返回undefined" class="headerlink" title="3.若Object.prototype没有该属性,就会返回undefined"></a>3.若Object.prototype没有该属性,就会返回undefined</h5><h5 id="原型链为-heart1—-gt-Heart-prototype—-gt-Object-prototype—-gt-null"><a href="#原型链为-heart1—-gt-Heart-prototype—-gt-Object-prototype—-gt-null" class="headerlink" title="原型链为: heart1—&gt;Heart.prototype—&gt;Object.prototype—&gt;null"></a>原型链为: heart1—&gt;Heart.prototype—&gt;Object.prototype—&gt;null</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name   <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age   <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type <span class="token punctuation">&#125;</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span> <span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span> heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="原型链反应了对象之间继承的关系"><a href="#原型链反应了对象之间继承的关系" class="headerlink" title="原型链反应了对象之间继承的关系"></a>原型链反应了对象之间继承的关系</h5>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向以及改变this指向的方法</title>
      <link href="posts/6b6.html"/>
      <url>posts/6b6.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、this指向"><a href="#一、this指向" class="headerlink" title="一、this指向"></a>一、this指向</h2><h3 id="1-普通函数调用时，this指向window"><a href="#1-普通函数调用时，this指向window" class="headerlink" title="1.普通函数调用时，this指向window"></a>1.普通函数调用时，this指向window</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//Window</span><span class="token punctuation">&#125;</span><span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-构造函数调用时-this指向实例对象"><a href="#2-构造函数调用时-this指向实例对象" class="headerlink" title="2.构造函数调用时,this指向实例对象"></a>2.构造函数调用时,this指向实例对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Hearter</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//指向了实例heart</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> heart<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hearter</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'xiner'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-定时器调用时-this指向window"><a href="#3-定时器调用时-this指向window" class="headerlink" title="3.定时器调用时,this指向window"></a>3.定时器调用时,this指向window</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//Window</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-对象的方法调用时，this指向该对象"><a href="#4-对象的方法调用时，this指向该对象" class="headerlink" title="4.对象的方法调用时，this指向该对象"></a>4.对象的方法调用时，this指向该对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//obj</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="对于this指向总的来说，谁调用，指向谁-而且必须是对象"><a href="#对于this指向总的来说，谁调用，指向谁-而且必须是对象" class="headerlink" title="对于this指向总的来说，谁调用，指向谁,而且必须是对象"></a>对于this指向总的来说，谁调用，指向谁,而且必须是对象</h5><hr><h2 id="二、改变this的指向"><a href="#二、改变this的指向" class="headerlink" title="二、改变this的指向"></a>二、改变this的指向</h2><h3 id="1-call改变this的指向"><a href="#1-call改变this的指向" class="headerlink" title="1.call改变this的指向"></a>1.call改变this的指向</h3><h6 id="使用call时，this指向第一个参数，后面可以跟无数个参数-并执行回调函数"><a href="#使用call时，this指向第一个参数，后面可以跟无数个参数-并执行回调函数" class="headerlink" title="使用call时，this指向第一个参数，后面可以跟无数个参数,并执行回调函数"></a>使用call时，this指向第一个参数，后面可以跟无数个参数,并执行回调函数</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> hearter<span class="token operator">=</span><span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>   age<span class="token operator">:</span><span class="token number">15</span> <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token comment">//xiner 18 男</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hearter 可以使用heart里面的方法</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//xiner</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span> <span class="token punctuation">&#125;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>hearter<span class="token punctuation">,</span><span class="token string">'xiner'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span> <span class="token comment">//直接执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-apply改变this的指向"><a href="#2-apply改变this的指向" class="headerlink" title="2.apply改变this的指向"></a>2.apply改变this的指向</h3><h6 id="使用apply时，this指向第一个参数，第二个参数时数组"><a href="#使用apply时，this指向第一个参数，第二个参数时数组" class="headerlink" title="使用apply时，this指向第一个参数，第二个参数时数组"></a>使用apply时，this指向第一个参数，第二个参数时数组</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token comment">//1 5 8 9 10 7 6</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-bind改变this的指向"><a href="#3-bind改变this的指向" class="headerlink" title="3.bind改变this的指向"></a>3.bind改变this的指向</h3><h6 id="使用bind时，this指向第一个参数，后面也可以跟无数个参数"><a href="#使用bind时，this指向第一个参数，后面也可以跟无数个参数" class="headerlink" title="使用bind时，this指向第一个参数，后面也可以跟无数个参数"></a>使用bind时，this指向第一个参数，后面也可以跟无数个参数</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//obj</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
