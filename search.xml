<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>简单实现vue源码</title>
      <link href="posts/e9c3.html"/>
      <url>posts/e9c3.html</url>
      
        <content type="html"><![CDATA[<h5 id="vue是一个mvvm框架"><a href="#vue是一个mvvm框架" class="headerlink" title="vue是一个mvvm框架"></a>vue是一个mvvm框架</h5><h5 id="mvvm框架实现的三要素是-数据响应式、模板引擎及其引擎"><a href="#mvvm框架实现的三要素是-数据响应式、模板引擎及其引擎" class="headerlink" title="mvvm框架实现的三要素是: 数据响应式、模板引擎及其引擎"></a>mvvm框架实现的三要素是: 数据响应式、模板引擎及其引擎</h5><h5 id="数据响应式-监听数据变化并在视图中更新"><a href="#数据响应式-监听数据变化并在视图中更新" class="headerlink" title="数据响应式: 监听数据变化并在视图中更新"></a>数据响应式: 监听数据变化并在视图中更新</h5><p> · Object.defineProperty() <br>  · Proxy </p><h5 id="模板引擎-提供描述试图的模板语法"><a href="#模板引擎-提供描述试图的模板语法" class="headerlink" title="模板引擎: 提供描述试图的模板语法"></a>模板引擎: 提供描述试图的模板语法</h5><p> · 插值<br> · 指令   </p><h5 id="渲染-将模板转换为html"><a href="#渲染-将模板转换为html" class="headerlink" title="渲染: 将模板转换为html"></a>渲染: 将模板转换为html</h5><hr>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数反转</title>
      <link href="posts/9923.html"/>
      <url>posts/9923.html</url>
      
        <content type="html"><![CDATA[<h5 id="给出一个-32-位的有符号整数，你需要将这个整数中每位上的数字进行反转"><a href="#给出一个-32-位的有符号整数，你需要将这个整数中每位上的数字进行反转" class="headerlink" title="给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转."></a>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转.</h5><h5 id="注意-假设我们的环境只能存储得下-32-位的有符号整数，则其数值范围为-−2-31-2-31-−-1-。请根据这个假设，如果反转后整数溢出那么就返回-0。"><a href="#注意-假设我们的环境只能存储得下-32-位的有符号整数，则其数值范围为-−2-31-2-31-−-1-。请根据这个假设，如果反转后整数溢出那么就返回-0。" class="headerlink" title="注意:假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。"></a>注意:假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</h5><h2 id="一、利用栈的原理来求解"><a href="#一、利用栈的原理来求解" class="headerlink" title="一、利用栈的原理来求解"></a>一、利用栈的原理来求解</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> max_int<span class="token operator">=</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> min_int<span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> ret<span class="token operator">=</span><span class="token number">0</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>max_int<span class="token operator">||</span>x<span class="token operator">&lt;</span>min_int<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span>   <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//栈的原理 一个一个出栈</span>    <span class="token keyword">const</span> value<span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//拿到最后面的余数</span>    x<span class="token operator">=</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//~~ 相当于向下取整</span>    ret <span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span>ret<span class="token operator">+</span>value<span class="token punctuation">;</span> <span class="token comment">//将余数拼接起来</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">></span>max_int<span class="token operator">||</span>ret<span class="token operator">&lt;</span>min_int<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、利用js的-或来求解"><a href="#二、利用js的-或来求解" class="headerlink" title="二、利用js的|或来求解"></a>二、利用js的|或来求解</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// |强制转换32位有符号的整数</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>res <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> res <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、将整数转化为字符串-再利用js自身的方法来实现"><a href="#三、将整数转化为字符串-再利用js自身的方法来实现" class="headerlink" title="三、将整数转化为字符串,再利用js自身的方法来实现"></a>三、将整数转化为字符串,再利用js自身的方法来实现</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> max<span class="token operator">=</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> min<span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res<span class="token punctuation">;</span>  res<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Number</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token operator">></span>max<span class="token operator">||</span>res<span class="token operator">&lt;</span>min<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="posts/d10e.html"/>
      <url>posts/d10e.html</url>
      
        <content type="html"><![CDATA[<h5 id="给定一个整数数组-nums-和一个整数目标值-target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是-数组中同一个元素不能使用两遍。"><a href="#给定一个整数数组-nums-和一个整数目标值-target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是-数组中同一个元素不能使用两遍。" class="headerlink" title="给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是,数组中同一个元素不能使用两遍。"></a>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是,数组中同一个元素不能使用两遍。</h5><h2 id="一、直接遍历"><a href="#一、直接遍历" class="headerlink" title="一、直接遍历"></a>一、直接遍历</h2><h5 id="直接遍历两边-第一次遍历找x-第二次遍历找target-x-然后输出结果-复杂度-O-n-2"><a href="#直接遍历两边-第一次遍历找x-第二次遍历找target-x-然后输出结果-复杂度-O-n-2" class="headerlink" title="直接遍历两边,第一次遍历找x,第二次遍历找target-x,然后输出结果.复杂度 O(n^2)"></a>直接遍历两边,第一次遍历找x,第二次遍历找target-x,然后输出结果.复杂度 O(n^2)</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 直接 遍历两遍得出结果</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、obj"><a href="#二、obj" class="headerlink" title="二、obj"></a>二、obj</h2><h5 id="遍历一遍-使用对象作为中间件-把target-x保存下来-复杂度-O-n"><a href="#遍历一遍-使用对象作为中间件-把target-x保存下来-复杂度-O-n" class="headerlink" title="遍历一遍,使用对象作为中间件,把target-x保存下来.复杂度 O(n)"></a>遍历一遍,使用对象作为中间件,把target-x保存下来.复杂度 O(n)</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> num<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>obj<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      obj<span class="token punctuation">[</span>target<span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token operator">=</span>i    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、map"><a href="#三、map" class="headerlink" title="三、map"></a>三、map</h2><h5 id="遍历一遍-使用map作为中间件-把target-x保存下来-复杂度-O-n"><a href="#遍历一遍-使用map作为中间件-把target-x保存下来-复杂度-O-n" class="headerlink" title="遍历一遍,使用map作为中间件,把target-x保存下来.复杂度 O(n)"></a>遍历一遍,使用map作为中间件,把target-x保存下来.复杂度 O(n)</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> map<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>     map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js继承</title>
      <link href="posts/ffd3.html"/>
      <url>posts/ffd3.html</url>
      
        <content type="html"><![CDATA[<h5 id="js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式"><a href="#js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式" class="headerlink" title="js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式"></a>js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式</h5><h2 id="一、es5中的继承方式"><a href="#一、es5中的继承方式" class="headerlink" title="一、es5中的继承方式"></a>一、es5中的继承方式</h2><h5 id="首先我们先引入父类"><a href="#首先我们先引入父类" class="headerlink" title="首先我们先引入父类"></a>首先我们先引入父类</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Heart</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token operator">||</span><span class="token string">"小明"</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address<span class="token operator">||</span><span class="token string">"山西"</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' 是一个 '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token string">' 人'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">let</span> heart<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小军'</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Childheart</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>heart <span class="token comment">//子类的原型指向父类的实例</span> <span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span>address<span class="token operator">=</span><span class="token string">'上海'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小军</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 58, 58588, 8888]</span> firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span> secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小军</span> firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小红 是一个 上海 人</span> secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小军 是一个 北京 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-主要利用的是子类的原型指向父类的实例"><a href="#实现方式-主要利用的是子类的原型指向父类的实例" class="headerlink" title="实现方式:主要利用的是子类的原型指向父类的实例"></a>实现方式:主要利用的是子类的原型指向父类的实例</h5><h5 id="优点：-简单-父类的方法都可以服用"><a href="#优点：-简单-父类的方法都可以服用" class="headerlink" title="优点： 简单, 父类的方法都可以服用"></a>优点： 简单, 父类的方法都可以服用</h5><h5 id="缺点：-当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变-而且子类的实例不能向父类传值"><a href="#缺点：-当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变-而且子类的实例不能向父类传值" class="headerlink" title="缺点： 当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变,而且子类的实例不能向父类传值"></a>缺点： 当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变,而且子类的实例不能向父类传值</h5><h3 id="2-借用构造函数继承-call-apply"><a href="#2-借用构造函数继承-call-apply" class="headerlink" title="2.借用构造函数继承(call,apply)"></a>2.借用构造函数继承(call,apply)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Heart</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'重庆'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">//Childheart &#123;name: "小明", address: "重庆", arr: Array(4), get: ƒ&#125;</span> firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span>address<span class="token operator">=</span><span class="token string">'上海'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小明</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 3，5]</span> firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span> secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明</span> firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 报错 firstChild.say is not a function</span> secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//报错 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-在子类的构造函数中改变父类的构造函数的this指向"><a href="#实现方式-在子类的构造函数中改变父类的构造函数的this指向" class="headerlink" title="实现方式:在子类的构造函数中改变父类的构造函数的this指向"></a>实现方式:在子类的构造函数中改变父类的构造函数的this指向</h5><h5 id="优点：-子类可以向父类传递参数，且父类的引用属性不会共享"><a href="#优点：-子类可以向父类传递参数，且父类的引用属性不会共享" class="headerlink" title="优点： 子类可以向父类传递参数，且父类的引用属性不会共享"></a>优点： 子类可以向父类传递参数，且父类的引用属性不会共享</h5><h5 id="缺点：-子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大"><a href="#缺点：-子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大" class="headerlink" title="缺点： 子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大"></a>缺点： 子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大</h5><h3 id="3-组合式继承-原型链继承和借用构造函数继承的组合"><a href="#3-组合式继承-原型链继承和借用构造函数继承的组合" class="headerlink" title="3.组合式继承(原型链继承和借用构造函数继承的组合)"></a>3.组合式继承(原型链继承和借用构造函数继承的组合)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">Heart</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'重庆'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Childheart</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">//Childheart &#123;name: "小明", address: "重庆", arr: Array(4), get: ƒ&#125;</span>firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span>firstChild<span class="token punctuation">.</span>address<span class="token operator">=</span><span class="token string">'上海'</span><span class="token punctuation">;</span>firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span> <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小明</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 3，5]</span>firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span>secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明</span>firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 小红 是一个 上海 人</span>secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明 是一个 重庆 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性"><a href="#实现方式-使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性" class="headerlink" title="实现方式: 使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性"></a>实现方式: 使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性</h5><h5 id="优点：-父类的方法可以复用，也可以向父类传值-而且父类的引用属性也不会被子类共享"><a href="#优点：-父类的方法可以复用，也可以向父类传值-而且父类的引用属性也不会被子类共享" class="headerlink" title="优点： 父类的方法可以复用，也可以向父类传值,而且父类的引用属性也不会被子类共享"></a>优点： 父类的方法可以复用，也可以向父类传值,而且父类的引用属性也不会被子类共享</h5><h5 id="缺点：-调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数"><a href="#缺点：-调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数" class="headerlink" title="缺点： 调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数"></a>缺点： 调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数</h5><h3 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4.原型式继承"></a>4.原型式继承</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//obj为父类的实例</span><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>obj   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> heart<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小李'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span>heart<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">// F&#123;&#125;</span>firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span>firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span> <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span>heart<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小李</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 58, 58588, 8888]</span>firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span>secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小李</span>firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 小红 是一个 深圳 人</span>secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小李 是一个 深圳 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例-最后再返回当前的构造函数（与Object-craete-类似）"><a href="#实现方式-在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例-最后再返回当前的构造函数（与Object-craete-类似）" class="headerlink" title="实现方式: 在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例,最后再返回当前的构造函数（与Object.craete()类似）"></a>实现方式: 在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例,最后再返回当前的构造函数（与Object.craete()类似）</h5><h5 id="优点：-父类的方法可以复用"><a href="#优点：-父类的方法可以复用" class="headerlink" title="优点： 父类的方法可以复用"></a>优点： 父类的方法可以复用</h5><h5 id="缺点：-子类不能向父类传参-父类的引用属性会被所有子类共享"><a href="#缺点：-子类不能向父类传参-父类的引用属性会被所有子类共享" class="headerlink" title="缺点： 子类不能向父类传参,父类的引用属性会被所有子类共享"></a>缺点： 子类不能向父类传参,父类的引用属性会被所有子类共享</h5><h3 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5.寄生式继承"></a>5.寄生式继承</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//obj为父类的实例</span> <span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>obj    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token comment">//在原型式的基础上有套一个函数</span><span class="token keyword">function</span> <span class="token function">ChildH</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> childHeart<span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">Childheart</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  childHeart<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'心儿'</span><span class="token keyword">return</span> childHeart<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-在原型式继承的基础上套一个盒子"><a href="#实现方式-在原型式继承的基础上套一个盒子" class="headerlink" title="实现方式: 在原型式继承的基础上套一个盒子"></a>实现方式: 在原型式继承的基础上套一个盒子</h5><h5 id="缺点：-无法复用"><a href="#缺点：-无法复用" class="headerlink" title="缺点： 无法复用"></a>缺点： 无法复用</h5><h2 id="6-寄生组合式继承"><a href="#6-寄生组合式继承" class="headerlink" title="6.寄生组合式继承"></a>6.寄生组合式继承</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token comment">//父类的构造函数</span>  <span class="token keyword">function</span> <span class="token function">Heart</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token operator">||</span><span class="token string">"小明"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address<span class="token operator">||</span><span class="token string">"山西"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//在父类的原型上添加方法</span>  <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' 是一个 '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token string">' 人'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//利用原型式继承</span> <span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>obj    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">//在原型式的基础上有套一个函数,将 子类的原型跟父类的实例结合起来</span> <span class="token keyword">function</span> <span class="token function">inheritH</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span>parent</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> childH<span class="token operator">=</span><span class="token function">Childheart</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span>   childH<span class="token punctuation">.</span>constructor<span class="token operator">=</span>child<span class="token punctuation">;</span><span class="token comment">//将对象的构造函数转向子类</span>   child<span class="token punctuation">.</span>prototype<span class="token operator">=</span>childH<span class="token punctuation">;</span> <span class="token comment">//子类的原型又指向父类的实例</span> <span class="token punctuation">&#125;</span><span class="token comment">//子类的构造函数</span> <span class="token keyword">function</span> <span class="token function">Childs</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">Heart</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>address<span class="token punctuation">)</span><span class="token comment">//借用构造函数继承</span> <span class="token punctuation">&#125;</span> <span class="token comment">//把子类和父类结合在一起</span> <span class="token function">inheritH</span><span class="token punctuation">(</span>Childs<span class="token punctuation">,</span>Heart<span class="token punctuation">)</span><span class="token comment">//  一些调用</span> <span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childs</span><span class="token punctuation">(</span><span class="token string">'小李'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">//Childs &#123;name: "小李", address: "深圳", arr: Array(4), get: ƒ&#125;</span> firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childs</span><span class="token punctuation">(</span><span class="token string">'小赵'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小赵</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 3，5]</span> firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span> secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小赵</span> firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 小红 是一个 深圳 人</span> secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小赵 是一个 深圳 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-修复组合式继承的不足"><a href="#实现方式-修复组合式继承的不足" class="headerlink" title="实现方式: 修复组合式继承的不足"></a>实现方式: 修复组合式继承的不足</h5><h5 id="优点：-父类的方法可以复用-子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数"><a href="#优点：-父类的方法可以复用-子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数" class="headerlink" title="优点： 父类的方法可以复用,子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数"></a>优点： 父类的方法可以复用,子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数</h5><h2 id="二、es6中的继承方式"><a href="#二、es6中的继承方式" class="headerlink" title="二、es6中的继承方式"></a>二、es6中的继承方式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Heart</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token punctuation">&#125;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">childH</span> <span class="token keyword">extends</span> <span class="token class-name">Heart</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token comment">//继承父类的属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address  <span class="token punctuation">&#125;</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">childH</span><span class="token punctuation">(</span><span class="token string">'心儿'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-利用class的extends让子类继承父类的属性和方法"><a href="#实现方式-利用class的extends让子类继承父类的属性和方法" class="headerlink" title="实现方式:利用class的extends让子类继承父类的属性和方法"></a>实现方式:利用class的extends让子类继承父类的属性和方法</h5>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节流和防抖</title>
      <link href="posts/1f25.html"/>
      <url>posts/1f25.html</url>
      
        <content type="html"><![CDATA[<h5 id="防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。"><a href="#防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。" class="headerlink" title="防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。"></a>防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。</h5><h2 id="一、防抖-debounce"><a href="#一、防抖-debounce" class="headerlink" title="一、防抖 debounce"></a>一、防抖 debounce</h2><h5 id="对于短时间内连续触发的事件，防抖就是让某个时间期限内，事件处理函数只执行一次"><a href="#对于短时间内连续触发的事件，防抖就是让某个时间期限内，事件处理函数只执行一次" class="headerlink" title="对于短时间内连续触发的事件，防抖就是让某个时间期限内，事件处理函数只执行一次"></a>对于短时间内连续触发的事件，防抖就是让某个时间期限内，事件处理函数只执行一次</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*  fn 指的是执行的函数  delay 指的是延迟的时间*/</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token operator">||</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> scrollTop<span class="token operator">=</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// window.onscroll=scrollTop //一直在打印</span>window<span class="token punctuation">.</span>onscroll<span class="token operator">=</span><span class="token function">debounce</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//滚动停止后打印</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、节流-throttle"><a href="#二、节流-throttle" class="headerlink" title="二、节流 throttle"></a>二、节流 throttle</h2><h5 id="如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效"><a href="#如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效" class="headerlink" title="如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效"></a>如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效</h5><h5 id="用setTimeout实现"><a href="#用setTimeout实现" class="headerlink" title="用setTimeout实现"></a>用setTimeout实现</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*  fn 指的是执行的函数  delay 指的是延迟的时间*/</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    timer<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//如果里面用到this，记得改变this 指向</span>      timer<span class="token operator">=</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>delay<span class="token operator">||</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> scrollTop<span class="token operator">=</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// window.onscroll=scrollTop //一直在打印</span>window<span class="token punctuation">.</span>onscroll<span class="token operator">=</span><span class="token function">throttle</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//0.5s的间隔输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用-new-Date实现"><a href="#用-new-Date实现" class="headerlink" title="用 new Date实现"></a>用 new Date实现</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token comment">/*    fn 指的是执行的函数    delay 指的是延迟的时间  */</span>  <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>    <span class="token keyword">let</span> start<span class="token operator">=</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拿到开始的时间戳</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> current<span class="token operator">=</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拿到当前的时间戳</span>      <span class="token keyword">let</span> that<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">//保存当前的this</span>      <span class="token keyword">let</span> args<span class="token operator">=</span>arguments<span class="token punctuation">;</span> <span class="token comment">//传入的参数</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">-</span>start<span class="token operator">>=</span>delay<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        start <span class="token operator">=</span>current      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        timer<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> scrollTop<span class="token operator">=</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span><span class="token string">'555'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token comment">// window.onscroll=scrollTop //一直在打印</span>window<span class="token punctuation">.</span>onscroll<span class="token operator">=</span><span class="token function">throttle</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//0.5s的间隔输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="总的来说-防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。"><a href="#总的来说-防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。" class="headerlink" title="总的来说:防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。"></a>总的来说:防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。</h5><h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><h5 id="防抖"><a href="#防抖" class="headerlink" title="防抖:"></a>防抖:</h5><h5 id="search搜索联想，用户在不断输入值时，用防抖来节约请求资源。"><a href="#search搜索联想，用户在不断输入值时，用防抖来节约请求资源。" class="headerlink" title="search搜索联想，用户在不断输入值时，用防抖来节约请求资源。"></a>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。</h5><h5 id="window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次"><a href="#window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次" class="headerlink" title="window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次"></a>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</h5><h5 id="节流"><a href="#节流" class="headerlink" title="节流:"></a>节流:</h5><h5 id="鼠标不断点击触发，mousedown-单位时间内只触发一次"><a href="#鼠标不断点击触发，mousedown-单位时间内只触发一次" class="headerlink" title="鼠标不断点击触发，mousedown(单位时间内只触发一次)"></a>鼠标不断点击触发，mousedown(单位时间内只触发一次)</h5><h5 id="监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断"><a href="#监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断" class="headerlink" title="监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断"></a>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</h5>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js闭包</title>
      <link href="posts/7d8b.html"/>
      <url>posts/7d8b.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><h5 id="闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数"><a href="#闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数" class="headerlink" title="闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数"></a>闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数</h5><h5 id="闭包的形成与变量的作用域和变量的生命周期息息相关"><a href="#闭包的形成与变量的作用域和变量的生命周期息息相关" class="headerlink" title="闭包的形成与变量的作用域和变量的生命周期息息相关"></a>闭包的形成与变量的作用域和变量的生命周期息息相关</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">"xiner"</span><span class="token punctuation">;</span> <span class="token comment">//name是heart 创建的局部变量 </span>  <span class="token keyword">function</span> <span class="token function">heartChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//内部函数,闭包</span>    <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用外部的变量</span>  <span class="token punctuation">&#125;</span>  <span class="token function">heartChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在-heartChild-内部可以使用heart-中声明的变量name-这就形成了一个闭包"><a href="#在-heartChild-内部可以使用heart-中声明的变量name-这就形成了一个闭包" class="headerlink" title="在 heartChild()内部可以使用heart()中声明的变量name,这就形成了一个闭包"></a>在 heartChild()内部可以使用heart()中声明的变量name,这就形成了一个闭包</h5><h2 id="二、作用"><a href="#二、作用" class="headerlink" title="二、作用"></a>二、作用</h2><h3 id="1-函数内部调用外部变量"><a href="#1-函数内部调用外部变量" class="headerlink" title="1.函数内部调用外部变量"></a>1.函数内部调用外部变量</h3><h5 id="上面的例子就反映了在heartChild-函数内部并没有name变量，而是访问了heart-里面的内部变量"><a href="#上面的例子就反映了在heartChild-函数内部并没有name变量，而是访问了heart-里面的内部变量" class="headerlink" title="上面的例子就反映了在heartChild()函数内部并没有name变量，而是访问了heart()里面的内部变量"></a>上面的例子就反映了在heartChild()函数内部并没有name变量，而是访问了heart()里面的内部变量</h5><h3 id="2-构造函数的私有属性"><a href="#2-构造函数的私有属性" class="headerlink" title="2.构造函数的私有属性"></a>2.构造函数的私有属性</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Heart</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name<span class="token operator">=</span>name<span class="token punctuation">;</span> <span class="token comment">//name是heart 创建的局部变量 </span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">15</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'xiner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>heart1<span class="token punctuation">.</span>age<span class="token operator">+=</span><span class="token number">1</span> heart1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'xin'</span>heart1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//xiner  name就是构造函数的私有属性，不能改变,age就可以改变</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">)</span>  <span class="token comment">//age=16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-延长变量生命周期"><a href="#3-延长变量生命周期" class="headerlink" title="3.延长变量生命周期"></a>3.延长变量生命周期</h3><h5 id="在函数内部的变量-原来在函数执行之后-都会被销毁-而由于闭包-变量永远会被保存下来-延长了生命周期"><a href="#在函数内部的变量-原来在函数执行之后-都会被销毁-而由于闭包-变量永远会被保存下来-延长了生命周期" class="headerlink" title="在函数内部的变量,原来在函数执行之后,都会被销毁,而由于闭包,变量永远会被保存下来,延长了生命周期"></a>在函数内部的变量,原来在函数执行之后,都会被销毁,而由于闭包,变量永远会被保存下来,延长了生命周期</h5><h2 id="三、闭包的应用"><a href="#三、闭包的应用" class="headerlink" title="三、闭包的应用"></a>三、闭包的应用</h2><h5 id="axios的请求回调"><a href="#axios的请求回调" class="headerlink" title="axios的请求回调"></a>axios的请求回调</h5><h5 id="事件绑定的回调"><a href="#事件绑定的回调" class="headerlink" title="事件绑定的回调"></a>事件绑定的回调</h5><h5 id="setTimeout的延时回调"><a href="#setTimeout的延时回调" class="headerlink" title="setTimeout的延时回调"></a>setTimeout的延时回调</h5><h5 id="函数内部返回一个匿名函数"><a href="#函数内部返回一个匿名函数" class="headerlink" title="函数内部返回一个匿名函数"></a>函数内部返回一个匿名函数</h5><h5 id="函数节流和防抖等等"><a href="#函数节流和防抖等等" class="headerlink" title="函数节流和防抖等等"></a>函数节流和防抖等等</h5><h2 id="四、内存泄漏"><a href="#四、内存泄漏" class="headerlink" title="四、内存泄漏"></a>四、内存泄漏</h2><h5 id="由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露"><a href="#由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露" class="headerlink" title="由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露"></a>由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// div用完之后一直存在内存中，无法被回收</span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里用div导致内存泄露</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> test <span class="token operator">=</span> div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    div <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//div用完后,使其制空，避免泄露</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型与原型链</title>
      <link href="posts/e69b.html"/>
      <url>posts/e69b.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、原型"><a href="#一、原型" class="headerlink" title="一、原型"></a>一、原型</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><h5 id="原型是一个对象的模板-利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法"><a href="#原型是一个对象的模板-利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法" class="headerlink" title="原型是一个对象的模板,利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法"></a>原型是一个对象的模板,利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span><span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明是一个15的帅哥</span>heart2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小红是一个18的美女</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="并且通过原型创建的新实例是相互独立-互不影响的"><a href="#并且通过原型创建的新实例是相互独立-互不影响的" class="headerlink" title="并且通过原型创建的新实例是相互独立,互不影响的"></a>并且通过原型创建的新实例是相互独立,互不影响的</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span><span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//小明</span>heart2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//报错 heart2.getName is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-总结"><a href="#2-总结" class="headerlink" title="2.总结"></a>2.总结</h3><h5 id="原型分为隐士原型-proto-和显示原型-prototype"><a href="#原型分为隐士原型-proto-和显示原型-prototype" class="headerlink" title="原型分为隐士原型(__proto__)和显示原型(prototype)"></a>原型分为隐士原型(__proto__)和显示原型(prototype)</h5><h5 id="隐士原型-proto-是对象拥有的-显示原型-prototype-是构造函数拥有的"><a href="#隐士原型-proto-是对象拥有的-显示原型-prototype-是构造函数拥有的" class="headerlink" title="隐士原型(__proto__)是对象拥有的,显示原型(prototype)是构造函数拥有的"></a>隐士原型(__proto__)是对象拥有的,显示原型(prototype)是构造函数拥有的</h5><h5 id="实例的隐士原型-proto-指向构造函数的显示原型-prototype"><a href="#实例的隐士原型-proto-指向构造函数的显示原型-prototype" class="headerlink" title="实例的隐士原型(__proto__)指向构造函数的显示原型(prototype)"></a>实例的隐士原型(__proto__)指向构造函数的显示原型(prototype)</h5><h5 id="实例的构造器属性-constructor-指向构造函数"><a href="#实例的构造器属性-constructor-指向构造函数" class="headerlink" title="实例的构造器属性(constructor)指向构造函数"></a>实例的构造器属性(constructor)指向构造函数</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>constructor<span class="token operator">===</span> Heart<span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、原型链"><a href="#二、原型链" class="headerlink" title="二、原型链"></a>二、原型链</h2><h5 id="1-当访问heart1的属性时-先访问自身是否是否具有该属性"><a href="#1-当访问heart1的属性时-先访问自身是否是否具有该属性" class="headerlink" title="1.当访问heart1的属性时,先访问自身是否是否具有该属性;"></a>1.当访问heart1的属性时,先访问自身是否是否具有该属性;</h5><h5 id="2-若自身没有该属性-就会访问Heart-prototype是否拥有"><a href="#2-若自身没有该属性-就会访问Heart-prototype是否拥有" class="headerlink" title="2.若自身没有该属性,就会访问Heart.prototype是否拥有;"></a>2.若自身没有该属性,就会访问Heart.prototype是否拥有;</h5><h5 id="3-若Heart-prototype没有该属性-就会访问Object-prototype是否拥有"><a href="#3-若Heart-prototype没有该属性-就会访问Object-prototype是否拥有" class="headerlink" title="3.若Heart.prototype没有该属性,就会访问Object.prototype是否拥有;"></a>3.若Heart.prototype没有该属性,就会访问Object.prototype是否拥有;</h5><h5 id="3-若Object-prototype没有该属性-就会返回undefined"><a href="#3-若Object-prototype没有该属性-就会返回undefined" class="headerlink" title="3.若Object.prototype没有该属性,就会返回undefined"></a>3.若Object.prototype没有该属性,就会返回undefined</h5><h5 id="原型链为-heart1—-gt-Heart-prototype—-gt-Object-prototype—-gt-null"><a href="#原型链为-heart1—-gt-Heart-prototype—-gt-Object-prototype—-gt-null" class="headerlink" title="原型链为: heart1—&gt;Heart.prototype—&gt;Object.prototype—&gt;null"></a>原型链为: heart1—&gt;Heart.prototype—&gt;Object.prototype—&gt;null</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name   <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age   <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type <span class="token punctuation">&#125;</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span> <span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span> heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="原型链反应了对象之间继承的关系"><a href="#原型链反应了对象之间继承的关系" class="headerlink" title="原型链反应了对象之间继承的关系"></a>原型链反应了对象之间继承的关系</h5>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向以及改变this指向的方法</title>
      <link href="posts/6b6.html"/>
      <url>posts/6b6.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、this指向"><a href="#一、this指向" class="headerlink" title="一、this指向"></a>一、this指向</h2><h3 id="1-普通函数调用时，this指向window"><a href="#1-普通函数调用时，this指向window" class="headerlink" title="1.普通函数调用时，this指向window"></a>1.普通函数调用时，this指向window</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//Window</span><span class="token punctuation">&#125;</span><span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-构造函数调用时-this指向实例对象"><a href="#2-构造函数调用时-this指向实例对象" class="headerlink" title="2.构造函数调用时,this指向实例对象"></a>2.构造函数调用时,this指向实例对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Hearter</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//指向了实例heart</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> heart<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hearter</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'xiner'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-定时器调用时-this指向window"><a href="#3-定时器调用时-this指向window" class="headerlink" title="3.定时器调用时,this指向window"></a>3.定时器调用时,this指向window</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//Window</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-对象的方法调用时，this指向该对象"><a href="#4-对象的方法调用时，this指向该对象" class="headerlink" title="4.对象的方法调用时，this指向该对象"></a>4.对象的方法调用时，this指向该对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//obj</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="对于this指向总的来说，谁调用，指向谁-而且必须是对象"><a href="#对于this指向总的来说，谁调用，指向谁-而且必须是对象" class="headerlink" title="对于this指向总的来说，谁调用，指向谁,而且必须是对象"></a>对于this指向总的来说，谁调用，指向谁,而且必须是对象</h5><hr><h2 id="二、改变this的指向"><a href="#二、改变this的指向" class="headerlink" title="二、改变this的指向"></a>二、改变this的指向</h2><h3 id="1-call改变this的指向"><a href="#1-call改变this的指向" class="headerlink" title="1.call改变this的指向"></a>1.call改变this的指向</h3><h6 id="使用call时，this指向第一个参数，后面可以跟无数个参数-并执行回调函数"><a href="#使用call时，this指向第一个参数，后面可以跟无数个参数-并执行回调函数" class="headerlink" title="使用call时，this指向第一个参数，后面可以跟无数个参数,并执行回调函数"></a>使用call时，this指向第一个参数，后面可以跟无数个参数,并执行回调函数</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> hearter<span class="token operator">=</span><span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>   age<span class="token operator">:</span><span class="token number">15</span> <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token comment">//xiner 18 男</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hearter 可以使用heart里面的方法</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//xiner</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span> <span class="token punctuation">&#125;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>hearter<span class="token punctuation">,</span><span class="token string">'xiner'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span> <span class="token comment">//直接执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-apply改变this的指向"><a href="#2-apply改变this的指向" class="headerlink" title="2.apply改变this的指向"></a>2.apply改变this的指向</h3><h6 id="使用apply时，this指向第一个参数，第二个参数时数组"><a href="#使用apply时，this指向第一个参数，第二个参数时数组" class="headerlink" title="使用apply时，this指向第一个参数，第二个参数时数组"></a>使用apply时，this指向第一个参数，第二个参数时数组</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token comment">//1 5 8 9 10 7 6</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-bind改变this的指向"><a href="#3-bind改变this的指向" class="headerlink" title="3.bind改变this的指向"></a>3.bind改变this的指向</h3><h6 id="使用bind时，this指向第一个参数，后面也可以跟无数个参数"><a href="#使用bind时，this指向第一个参数，后面也可以跟无数个参数" class="headerlink" title="使用bind时，this指向第一个参数，后面也可以跟无数个参数"></a>使用bind时，this指向第一个参数，后面也可以跟无数个参数</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//obj</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
