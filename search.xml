<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>输入网址到浏览器渲染进行了什么</title>
      <link href="posts/7e2e.html"/>
      <url>posts/7e2e.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> http </category>
          
          <category> dns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="posts/3bd5.html"/>
      <url>posts/3bd5.html</url>
      
        <content type="html"><![CDATA[<h5 id="webpack-是一个模块打包工具-基于nodejs-只支持js和JSON模块"><a href="#webpack-是一个模块打包工具-基于nodejs-只支持js和JSON模块" class="headerlink" title="webpack 是一个模块打包工具,基于nodejs,只支持js和JSON模块"></a>webpack 是一个模块打包工具,基于nodejs,只支持js和JSON模块</h5><h2 id="一、基础的一些配置-entry-mode-output等"><a href="#一、基础的一些配置-entry-mode-output等" class="headerlink" title="一、基础的一些配置(entry,mode,output等)"></a>一、基础的一些配置(entry,mode,output等)</h2><h3 id="1-entry-入口文件的设置"><a href="#1-entry-入口文件的设置" class="headerlink" title="1.entry 入口文件的设置"></a>1.entry 入口文件的设置</h3><ul><li>使用字符串 一个入口,一个出口<pre class="line-numbers language-js" data-language="js"><code class="language-js">entry<span class="token operator">:</span><span class="token string">'./src/index.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用数组 可以是多个入口，但是一个出口<pre class="line-numbers language-js" data-language="js"><code class="language-js">entry<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'./src/index.js'</span><span class="token punctuation">,</span><span class="token string">'./src/other.js'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用对象 可以是多个入口，多个出口口 (多页面应用)<pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token comment">// 3个属性名,对应了3个出口文件</span>entry<span class="token operator">:</span><span class="token punctuation">&#123;</span>   main<span class="token operator">:</span><span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  other<span class="token operator">:</span><span class="token string">'./src/other.js'</span><span class="token punctuation">,</span>  others<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'./src/test.js'</span><span class="token punctuation">,</span><span class="token string">'./src/test1.js'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-mode-模块打包的模式"><a href="#2-mode-模块打包的模式" class="headerlink" title="2. mode 模块打包的模式"></a>2. mode 模块打包的模式</h3><h5 id="默认值是-production-生产环境"><a href="#默认值是-production-生产环境" class="headerlink" title="默认值是 production 生产环境"></a>默认值是 production 生产环境</h5><p><img src="http://qiniu.xiner.work/blog/webpack_code.png"></p><h3 id="3-output-出口文件"><a href="#3-output-出口文件" class="headerlink" title="3. output 出口文件"></a>3. output 出口文件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">output<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">//生成的出口问件 目录,绝对路径</span>  path<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//  构建的文件</span>  <span class="token comment">// 1.一个 出口文件 使用的是字符串的格式</span>  filname<span class="token operator">:</span><span class="token string">'main.js'</span>  <span class="token comment">// 2. 出口文件 使用的是占位符的格式</span>  filname<span class="token operator">:</span><span class="token string">'[name].js'</span>  <span class="token comment">// 3. 出口文件 使用的是hash(长度为6)+占位符的格式</span>  <span class="token comment">// 修改 一个文件,打包后所有文件的hash都改变了,整个项目的缓存文件,都将失效</span>  <span class="token comment">// 多个入口文件，hash值都是一样的</span>  filname<span class="token operator">:</span><span class="token string">'[name]_[hash:6].js'</span>  <span class="token comment">// 4. 出口文件 使用的是chunkhash(长度为6)+占位符的格式  </span>  <span class="token comment">//  chunkhash 对于代码块 互不影响且不存在引用关系的代码块,改变一个文件,当前文件的hash值改变</span>  <span class="token comment">//另一个文件的hash值不变, 且不会再次打包</span>  filname<span class="token operator">:</span><span class="token string">'[name]_[chunkhash:6].js'</span> <span class="token comment">// 5. 出口文件 使用contenthash(长度为6)+占位符的格式  </span>  <span class="token comment">//  contenthash 对于一个文件，在同时引用js文件和css文件时，当js文件发生改变时，css文件不变,</span>  <span class="token comment">// 则 js文件的hash值改变，而css文件不改变</span>  filname<span class="token operator">:</span><span class="token string">'[name]_[contenthash:6].js'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-context-基础目录"><a href="#4-context-基础目录" class="headerlink" title="4. context 基础目录"></a>4. context 基础目录</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//上下文   项目打包的相对路径 必须是绝对路径</span> <span class="token comment">// process.cwd() 是当前Node.js进程执行时的文件夹目录——工作目录，保证了文件在不同</span> <span class="token comment">//的目录下执行时，路径始终不变</span> context<span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-devtool-中的sourceMap"><a href="#5-devtool-中的sourceMap" class="headerlink" title="5. devtool 中的sourceMap"></a>5. devtool 中的sourceMap</h3><h5 id="sourceMap-打包后的文件和原文件之间的关系-如果开启-可以定位到原文件-不安全"><a href="#sourceMap-打包后的文件和原文件之间的关系-如果开启-可以定位到原文件-不安全" class="headerlink" title="sourceMap 打包后的文件和原文件之间的关系,如果开启,可以定位到原文件,不安全"></a>sourceMap 打包后的文件和原文件之间的关系,如果开启,可以定位到原文件,不安全</h5><ul><li>mode==development 默认开启</li><li>mode==production 一般不建议开启,若要开启使用 cheap-module-eval-source-map<pre class="line-numbers language-js" data-language="js"><code class="language-js">devtool<span class="token operator">:</span><span class="token string">"cheap-module-source-map"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="二、module-模块转化-loader–需要安装"><a href="#二、module-模块转化-loader–需要安装" class="headerlink" title="二、module 模块转化  loader–需要安装"></a>二、module 模块转化  loader–需要安装</h2><h3 id="2-1-css-loader"><a href="#2-1-css-loader" class="headerlink" title="2.1 css-loader"></a>2.1 css-loader</h3><ul><li>css-loader的简单使用<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">/*      * loader 执行顺序从后往前      * css-loader  是将 css模块文件添加到js文件中       * style-loader 是将 css 出口出来 转化为以style标签的样式添加到html中      */</span>      use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'csse-loader'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>css-loader的模块的使用<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">/*      * css modules 开启       */</span>      use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span><span class="token punctuation">&#123;</span>          modules<span class="token operator">:</span><span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-2-less-loader"><a href="#2-2-less-loader" class="headerlink" title="2.2 less-loader"></a>2.2 less-loader</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">/*      * css modules 开启       */</span>      use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span><span class="token punctuation">&#123;</span>          modules<span class="token operator">:</span><span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">'less-loader'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-postcss-loader-帮助css-适应css各种浏览器"><a href="#2-3-postcss-loader-帮助css-适应css各种浏览器" class="headerlink" title="2.3 postcss-loader 帮助css 适应css各种浏览器"></a>2.3 postcss-loader 帮助css 适应css各种浏览器</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 下载 postcss<span class="token operator">-</span>loader 和 autoprefixer<span class="token number">2.</span> 使用postcss<span class="token operator">-</span>loader 必须是在css<span class="token operator">-</span>loader之后module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">/*      * css modules 开启       */</span>      use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span><span class="token punctuation">&#123;</span>          modules<span class="token operator">:</span><span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">'postcss-loader'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">3.</span>创建一个 postcss<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js 文件<span class="token keyword">const</span> autoprefixer<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token comment">/**     * autoprefixer("IE 10")     * last 2 versions  最近的两个版本     * >1%  全球浏览器份额大于1%     *  也可以指定 版本号    */</span>    <span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>       overrideBrowserslist<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"last 2 versions"</span><span class="token punctuation">,</span><span class="token string">">1%"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-url-loader-处理文件-包含了file-loader-且比他更强大"><a href="#2-4-url-loader-处理文件-包含了file-loader-且比他更强大" class="headerlink" title="2.4 url-loader 处理文件(包含了file-loader,且比他更强大)"></a>2.4 url-loader 处理文件(包含了file-loader,且比他更强大)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">/*      * css modules 开启       */</span>      use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span><span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token comment">/**           * ext 后缀名           * outputPath 输出文件 加一个目录 提取图片在一个目录下           * limit 小的文件可以将其转化为base64格式 提高加载速度 10kb以下          */</span>            name<span class="token operator">:</span> <span class="token string">'[name]_[hash:6].[ext]'</span><span class="token punctuation">,</span>             outputPath<span class="token operator">:</span><span class="token string">'images/'</span><span class="token punctuation">,</span>            limit<span class="token operator">:</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1024</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、-plugins-插件的使用"><a href="#三、-plugins-插件的使用" class="headerlink" title="三、 plugins 插件的使用"></a>三、 plugins 插件的使用</h2><h5 id="插件-作用于webpack整个打包生命周期的"><a href="#插件-作用于webpack整个打包生命周期的" class="headerlink" title="插件 作用于webpack整个打包生命周期的"></a>插件 作用于webpack整个打包生命周期的</h5><h3 id="3-1-clean-webpack-plugin-每次打包，清除打包后的文件"><a href="#3-1-clean-webpack-plugin-每次打包，清除打包后的文件" class="headerlink" title="3.1 clean-webpack-plugin 每次打包，清除打包后的文件"></a>3.1 clean-webpack-plugin 每次打包，清除打包后的文件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin npm install <span class="token operator">-</span><span class="token constant">D</span> clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token number">2.</span>在webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js文件中引用<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>CleanWebpackPlugin<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.</span>使用plugins<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    cleanOnceBeforeBuildPatterns<span class="token operator">:</span>     <span class="token punctuation">[</span>    <span class="token comment">/*    * 打包 不清除的文件夹和文件 前面加 !     * 数组中 一定要有 **/</span><span class="token operator">*</span>   <span class="token comment">//否则不生效  </span>    <span class="token operator">*</span><span class="token operator">/</span>      <span class="token string">"**/*"</span><span class="token punctuation">,</span> <span class="token string">"!images"</span><span class="token punctuation">,</span><span class="token string">"!index.html"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-htmlWepbpackPlugin-自动生成html文件，并将打包后生成的js模块一如到html中"><a href="#3-2-htmlWepbpackPlugin-自动生成html文件，并将打包后生成的js模块一如到html中" class="headerlink" title="3.2 htmlWepbpackPlugin 自动生成html文件，并将打包后生成的js模块一如到html中"></a>3.2 htmlWepbpackPlugin 自动生成html文件，并将打包后生成的js模块一如到html中</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 htmlWepbpackPluginnpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin<span class="token number">2.</span> 加载模块<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpackplugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.</span>使用plugins<span class="token operator">:</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">//选择html模板</span>    <span class="token comment">/**     *  template html的模板路径     *  title html的标题 要在html使用 ejs 语法擦能生效     * &lt;title>&lt;%= htmlWebpackPlugin.options.title %>&lt;/title>     *  filename 生成的文件     */</span>    template<span class="token operator">:</span><span class="token string">"./src/index.html"</span><span class="token punctuation">,</span>    title<span class="token operator">:</span> <span class="token string">"心儿"</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span><span class="token string">"index.html"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-mini-css-extract-plugin-抽离css"><a href="#3-3-mini-css-extract-plugin-抽离css" class="headerlink" title="3.3 mini-css-extract-plugin 抽离css"></a>3.3 mini-css-extract-plugin 抽离css</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 mini<span class="token operator">-</span>css<span class="token operator">-</span>extract<span class="token operator">-</span>pluginnpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev mini<span class="token operator">-</span>css<span class="token operator">-</span>extract<span class="token operator">-</span>plugin<span class="token number">2.</span> 加载模块onst MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-cssextract-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.</span>使用替换style<span class="token operator">-</span>loader为<span class="token operator">:</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loaderplugins<span class="token operator">:</span><span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> filename<span class="token operator">:</span> <span class="token string">"[name][chunkhash:8].css"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、devserver的使用-本地开发服务"><a href="#四、devserver的使用-本地开发服务" class="headerlink" title="四、devserver的使用 本地开发服务"></a>四、devserver的使用 本地开发服务</h2><h3 id="4-1-devserver的-简单的使用"><a href="#4-1-devserver的-简单的使用" class="headerlink" title="4.1 devserver的 简单的使用"></a>4.1 devserver的 简单的使用</h3><ul><li>提高开发效率,更改代码后不需要重新打包</li><li>打包后生成的文件不会放在dist目录下,而是放到内存中 从而提升速度<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 webpack<span class="token operator">-</span>dev<span class="token operator">-</span>servernpm install webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token operator">-</span><span class="token constant">D</span><span class="token number">2.</span>使用devserver<span class="token operator">:</span><span class="token punctuation">&#123;</span>  contentBase<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  open<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  post<span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-2-本地mock数据-解决跨域"><a href="#4-2-本地mock数据-解决跨域" class="headerlink" title="4.2 本地mock数据,解决跨域"></a>4.2 本地mock数据,解决跨域</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * before webpack打包前的生命周期,可以直接模拟写接口 * app 类似于express 搭建的服务 * server 可以是指端口*/</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span>server</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/info'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      hello<span class="token operator">:</span> <span class="token string">'world8888888'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-HMR-热模块替换-webpack自带的-保留之前操作的行为，浏览器不刷新-动态生效修改的代码"><a href="#4-2-HMR-热模块替换-webpack自带的-保留之前操作的行为，浏览器不刷新-动态生效修改的代码" class="headerlink" title="4.2 HMR 热模块替换 webpack自带的,保留之前操作的行为，浏览器不刷新,动态生效修改的代码"></a>4.2 HMR 热模块替换 webpack自带的,保留之前操作的行为，浏览器不刷新,动态生效修改的代码</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">cosnt webpack<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>devserver<span class="token operator">:</span><span class="token punctuation">&#123;</span>  contentBase<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  open<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  post<span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">,</span>  hot<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// </span>  <span class="token comment">/*  *  hotOnly:true  即使HMR 不生效,也不会自动的刷新浏览器  *  css 开发中不要使用mini-css-extract-plugin,否则不生效  */</span>  hotOnly<span class="token operator">:</span><span class="token boolean">true</span> <span class="token punctuation">&#125;</span>plugins<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">/** *  *  *  * */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"./b"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>"number"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、性能优化"><a href="#五、性能优化" class="headerlink" title="五、性能优化"></a>五、性能优化</h2><h2 id="六、小问题总结"><a href="#六、小问题总结" class="headerlink" title="六、小问题总结"></a>六、小问题总结</h2><h3 id="6-1-webpack中chunk和bundle中的关系"><a href="#6-1-webpack中chunk和bundle中的关系" class="headerlink" title="6.1 webpack中chunk和bundle中的关系"></a>6.1 webpack中chunk和bundle中的关系</h3><blockquote><ul><li>chunk 是webpack对源文件进行打包时,根据引用关系生成 chunk文件,并对其进行一些操作,不可以在浏览器运行</li><li>处理好的chunk文件,最后输出成 bundle,可以直接再浏览器中运行</li></ul></blockquote><h3 id="6-2-file-loader和url-loader的区别"><a href="#6-2-file-loader和url-loader的区别" class="headerlink" title="6.2 file-loader和url-loader的区别"></a>6.2 file-loader和url-loader的区别</h3><blockquote><ul><li>file-loader 把打包⼊⼝中识别出的资源模块，移动到输出⽬录，并且返回⼀个地址名称</li><li>url-loader 包含了file-loader,但是对jpg格式的模块,会将其进行压缩,并打包到js中,大体积不合适</li></ul></blockquote><h3 id="6-3-解决跨域"><a href="#6-3-解决跨域" class="headerlink" title="6.3 解决跨域"></a>6.3 解决跨域</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string">"/api"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> target<span class="token operator">:</span> <span class="token string">"http://localhost:9092"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-解决跨域-1"><a href="#6-3-解决跨域-1" class="headerlink" title="6.3 解决跨域"></a>6.3 解决跨域</h3>]]></content>
      
      
      <categories>
          
          <category> js工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第912题:数组排序</title>
      <link href="posts/7ddc.html"/>
      <url>posts/7ddc.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><h5 id="实现思路-比较相邻的两个项-如果第一个比第二个大-就交换位置"><a href="#实现思路-比较相邻的两个项-如果第一个比第二个大-就交换位置" class="headerlink" title="实现思路: 比较相邻的两个项,如果第一个比第二个大,就交换位置"></a>实现思路: 比较相邻的两个项,如果第一个比第二个大,就交换位置</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buddling</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//arr 传入的数组</span>  <span class="token keyword">let</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">buddling</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1, 2, 5, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改之后的冒泡排序"><a href="#修改之后的冒泡排序" class="headerlink" title="修改之后的冒泡排序"></a>修改之后的冒泡排序</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buddling</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//arr 传入的数组</span>  <span class="token keyword">let</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//减去 i 后面已经是最大的了</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">buddling</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1, 2, 5, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="冒泡排序的复杂度是-O-n-2-两个循环-比较慢"><a href="#冒泡排序的复杂度是-O-n-2-两个循环-比较慢" class="headerlink" title="冒泡排序的复杂度是 O(n^2),两个循环,比较慢"></a>冒泡排序的复杂度是 O(n^2),两个循环,比较慢</h5><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h2><h5 id="实现思路-找到数组中的最小值并将其放在第一位-接着找第二小放到第二位-依次类推"><a href="#实现思路-找到数组中的最小值并将其放在第一位-接着找第二小放到第二位-依次类推" class="headerlink" title="实现思路:找到数组中的最小值并将其放在第一位,接着找第二小放到第二位,依次类推"></a>实现思路:找到数组中的最小值并将其放在第一位,接着找第二小放到第二位,依次类推</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//arr 传入的数组</span>  <span class="token keyword">let</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> minIndex<span class="token punctuation">;</span> <span class="token comment">//最小值的索引</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    minIndex<span class="token operator">=</span>i<span class="token punctuation">;</span> <span class="token comment">//先赋值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断最小索引的值是否是最小的</span>        minIndex<span class="token operator">=</span>j <span class="token comment">//不是最小 赋值 </span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!==</span>minIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">//交换位置 </span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1, 2, 5, 6, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="选择排序的复杂度同样也是-O-n-2-两个循环"><a href="#选择排序的复杂度同样也是-O-n-2-两个循环" class="headerlink" title="选择排序的复杂度同样也是 O(n^2),两个循环"></a>选择排序的复杂度同样也是 O(n^2),两个循环</h5><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h2><h5 id="实现思路-每次排一个数组项-以此方式构建最后的排序数组"><a href="#实现思路-每次排一个数组项-以此方式构建最后的排序数组" class="headerlink" title="实现思路: 每次排一个数组项,以此方式构建最后的排序数组"></a>实现思路: 每次排一个数组项,以此方式构建最后的排序数组</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//arr 传入的数组</span>  <span class="token keyword">let</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> middle<span class="token punctuation">;</span> <span class="token comment">//表示当前插入值的位置</span>  <span class="token keyword">let</span> middleValue<span class="token punctuation">;</span> <span class="token comment">//当前的值 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    middle<span class="token operator">=</span>i    middleValue<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>middle<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>middle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>middleValue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断要插入的值</span>      arr<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>middle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//交换两个数的位置     </span>      middle<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    arr<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token operator">=</span>middleValue <span class="token comment">//确保插入的数据赋值成功</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1, 2, 5, 6, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="插入排序的复杂度同样也是-O-n-2"><a href="#插入排序的复杂度同样也是-O-n-2" class="headerlink" title="插入排序的复杂度同样也是 O(n^2)"></a>插入排序的复杂度同样也是 O(n^2)</h5><h2 id="4-归并排序"><a href="#4-归并排序" class="headerlink" title="4.归并排序"></a>4.归并排序</h2><h5 id="实现思路-利用分治的方法-先将数组拆成一个长度为1的数组-然后然后再一个一个合并成大数组并排序"><a href="#实现思路-利用分治的方法-先将数组拆成一个长度为1的数组-然后然后再一个一个合并成大数组并排序" class="headerlink" title="实现思路: 利用分治的方法,先将数组拆成一个长度为1的数组,然后然后再一个一个合并成大数组并排序"></a>实现思路: 利用分治的方法,先将数组拆成一个长度为1的数组,然后然后再一个一个合并成大数组并排序</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//</span>  <span class="token comment">//arr的长度等于1,直接返回</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr <span class="token comment">//arr的长度大于1</span>  <span class="token keyword">let</span> middle <span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取到arr长度的中间值</span>  <span class="token keyword">let</span> arrLeft<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组左半边</span>  <span class="token keyword">let</span> arrRight<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//数组右半边</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arrLeft<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arrRight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//先递归,合并左右数组</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">leftA<span class="token punctuation">,</span>rightA</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> il<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//左边数组的起始索引</span>  <span class="token keyword">let</span> ir<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//右边数组的起始索引</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>il<span class="token operator">&lt;</span>leftA<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> ir<span class="token operator">&lt;</span>rightA<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>leftA<span class="token punctuation">[</span>il<span class="token punctuation">]</span><span class="token operator">></span>rightA<span class="token punctuation">[</span>ir<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//左边大于右边,先push右边，反之push左边</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightA<span class="token punctuation">[</span>ir<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftA<span class="token punctuation">[</span>il<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>il<span class="token operator">&lt;</span>leftA<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//push最大的那个左边值</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftA<span class="token punctuation">[</span>il<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//++ 数组数据多，需要++</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>ir<span class="token operator">&lt;</span>rightA<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//push最大的那个右边值</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightA<span class="token punctuation">[</span>ir<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 5, 6, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="归并排序的复杂度同样也是-O-nlog-n"><a href="#归并排序的复杂度同样也是-O-nlog-n" class="headerlink" title="归并排序的复杂度同样也是 O(nlog n)"></a>归并排序的复杂度同样也是 O(nlog n)</h5><h2 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5.快速排序"></a>5.快速排序</h2><h5 id="实现思路-利用分治的方法"><a href="#实现思路-利用分治的方法" class="headerlink" title="实现思路: 利用分治的方法,"></a>实现思路: 利用分治的方法,</h5><h5 id="快速排序的复杂度同样也是-O-nlog-n"><a href="#快速排序的复杂度同样也是-O-nlog-n" class="headerlink" title="快速排序的复杂度同样也是 O(nlog n)"></a>快速排序的复杂度同样也是 O(nlog n)</h5>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单实现vue源码</title>
      <link href="posts/e9c3.html"/>
      <url>posts/e9c3.html</url>
      
        <content type="html"><![CDATA[<h5 id="vue是一个mvvm框架"><a href="#vue是一个mvvm框架" class="headerlink" title="vue是一个mvvm框架"></a>vue是一个mvvm框架</h5><h5 id="mvvm框架实现的三要素是-数据响应式、模板引擎及其渲染"><a href="#mvvm框架实现的三要素是-数据响应式、模板引擎及其渲染" class="headerlink" title="mvvm框架实现的三要素是: 数据响应式、模板引擎及其渲染"></a>mvvm框架实现的三要素是: 数据响应式、模板引擎及其渲染</h5><h5 id="数据响应式-监听数据变化并在视图中更新"><a href="#数据响应式-监听数据变化并在视图中更新" class="headerlink" title="数据响应式: 监听数据变化并在视图中更新"></a>数据响应式: 监听数据变化并在视图中更新</h5><ul><li>Object.defineProperty() </li><li>Proxy </li></ul><h5 id="模板引擎-提供描述试图的模板语法"><a href="#模板引擎-提供描述试图的模板语法" class="headerlink" title="模板引擎: 提供描述试图的模板语法"></a>模板引擎: 提供描述试图的模板语法</h5><ul><li>插值 </li><li>指令: v-bind、v-on、v-html、v-if、v-for <h5 id="渲染-将模板转换为html"><a href="#渲染-将模板转换为html" class="headerlink" title="渲染: 将模板转换为html"></a>渲染: 将模板转换为html</h5></li><li>模板 =&gt; vdom =&gt; dom</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第8题:字符串转换整数</title>
      <link href="posts/ea5a.html"/>
      <url>posts/ea5a.html</url>
      
        <content type="html"><![CDATA[<h5 id="请你来实现一个myAtoi-string-s-函数-使其能将字符串转换成一个-32-位有符号整数（类似-C-C-中的-atoi-函数）"><a href="#请你来实现一个myAtoi-string-s-函数-使其能将字符串转换成一个-32-位有符号整数（类似-C-C-中的-atoi-函数）" class="headerlink" title="请你来实现一个myAtoi(string s)函数,使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）"></a>请你来实现一个myAtoi(string s)函数,使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）</h5><h6 id="函数myAtoi-string-s-的算法如下："><a href="#函数myAtoi-string-s-的算法如下：" class="headerlink" title="函数myAtoi(string s)的算法如下："></a>函数myAtoi(string s)的算法如下：</h6><ul><li>读入字符串并丢弃无用的前导空格</li><li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li><li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li><li>·将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。</li><li>如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。</li><li>返回整数作为最终结果。<h3 id="使用遍历的方法"><a href="#使用遍历的方法" class="headerlink" title="使用遍历的方法"></a>使用遍历的方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param &#123;string&#125; s * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">myAtoi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @param &#123;number&#125; times 循环次数     * @return &#123;number&#125; res     */</span>    <span class="token keyword">let</span> times<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>times <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>times<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                times<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>times<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>times<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>times<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">=</span> s<span class="token punctuation">[</span>times<span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>times<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">+=</span> s<span class="token punctuation">[</span>times<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        times<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="使用-parseInt"><a href="#使用-parseInt" class="headerlink" title="使用 parseInt"></a>使用 parseInt</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">myAtoi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span> res <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span>  Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">=</span>  Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第7题:整数反转</title>
      <link href="posts/9923.html"/>
      <url>posts/9923.html</url>
      
        <content type="html"><![CDATA[<h5 id="给出一个-32-位的有符号整数，你需要将这个整数中每位上的数字进行反转"><a href="#给出一个-32-位的有符号整数，你需要将这个整数中每位上的数字进行反转" class="headerlink" title="给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转."></a>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转.</h5><h5 id="注意-假设我们的环境只能存储得下-32-位的有符号整数，则其数值范围为-−2-31-2-31-−-1-。请根据这个假设，如果反转后整数溢出那么就返回-0。"><a href="#注意-假设我们的环境只能存储得下-32-位的有符号整数，则其数值范围为-−2-31-2-31-−-1-。请根据这个假设，如果反转后整数溢出那么就返回-0。" class="headerlink" title="注意:假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。"></a>注意:假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</h5><h2 id="一、利用栈的原理来求解"><a href="#一、利用栈的原理来求解" class="headerlink" title="一、利用栈的原理来求解"></a>一、利用栈的原理来求解</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> max_int<span class="token operator">=</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> min_int<span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> ret<span class="token operator">=</span><span class="token number">0</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>max_int<span class="token operator">||</span>x<span class="token operator">&lt;</span>min_int<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span>   <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//栈的原理 一个一个出栈</span>    <span class="token keyword">const</span> value<span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//拿到最后面的余数</span>    x<span class="token operator">=</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//~~ 相当于向下取整</span>    ret <span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span>ret<span class="token operator">+</span>value<span class="token punctuation">;</span> <span class="token comment">//将余数拼接起来</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">></span>max_int<span class="token operator">||</span>ret<span class="token operator">&lt;</span>min_int<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、利用js的-或来求解"><a href="#二、利用js的-或来求解" class="headerlink" title="二、利用js的|或来求解"></a>二、利用js的|或来求解</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// |强制转换32位有符号的整数</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>res <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> res <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、将整数转化为字符串-再利用js自身的方法来实现"><a href="#三、将整数转化为字符串-再利用js自身的方法来实现" class="headerlink" title="三、将整数转化为字符串,再利用js自身的方法来实现"></a>三、将整数转化为字符串,再利用js自身的方法来实现</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> max<span class="token operator">=</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> min<span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res<span class="token punctuation">;</span>  res<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Number</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token operator">></span>max<span class="token operator">||</span>res<span class="token operator">&lt;</span>min<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第6题:Z字型转换</title>
      <link href="posts/8701.html"/>
      <url>posts/8701.html</url>
      
        <content type="html"><![CDATA[<h5 id="将一个给定字符串-s-根据给定的行数-numRows-，以从上往下、从左到右进行-Z-字形排列。"><a href="#将一个给定字符串-s-根据给定的行数-numRows-，以从上往下、从左到右进行-Z-字形排列。" class="headerlink" title="将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。"></a>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</h5><h5 id="解题思路-将字符串组成“z”字型，看成类似于倒”N”字型-s的长度有j个-“-“-双层遍历-numRows-j-找规律求解"><a href="#解题思路-将字符串组成“z”字型，看成类似于倒”N”字型-s的长度有j个-“-“-双层遍历-numRows-j-找规律求解" class="headerlink" title="解题思路:将字符串组成“z”字型，看成类似于倒”N”字型  s的长度有j个 “|/“ 双层遍历(numRows,j)找规律求解"></a>解题思路:将字符串组成“z”字型，看成类似于倒”N”字型  s的长度有j个 “|/“ 双层遍历(numRows,j)找规律求解</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param &#123;string&#125; s * @param &#123;number&#125; numRows * @return &#123;string&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">convert</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> numRows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numRows<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s    <span class="token comment">//拿到类似"v"中元素的个数</span>    <span class="token keyword">let</span> size<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>numRows<span class="token operator">-</span><span class="token number">2</span>    <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">//最后返回的值</span>    <span class="token comment">//两个遍历 第一个遍历 行数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numRows<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//第二个遍历 遍历s中一共有多少个size</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token operator">/</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//每一个 "|" 对应的索引</span>            <span class="token keyword">let</span> vert<span class="token operator">=</span>j<span class="token operator">*</span>size<span class="token operator">+</span>i            <span class="token comment">//每一个"/" 对应的索引</span>            <span class="token keyword">let</span> oblique<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token operator">-</span>i            <span class="token keyword">if</span><span class="token punctuation">(</span>vert<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> res<span class="token operator">+=</span>s<span class="token punctuation">[</span>vert<span class="token punctuation">]</span>            <span class="token comment">//对于 i==0 和 i==numRous-1  没有"/"的索引,则不需要加 oblique</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">==</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>oblique<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> vert<span class="token operator">!=</span>oblique<span class="token punctuation">)</span> res<span class="token operator">+=</span>s<span class="token punctuation">[</span>oblique<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第5题:最长回文子串</title>
      <link href="posts/8d9a.html"/>
      <url>posts/8d9a.html</url>
      
        <content type="html"><![CDATA[<h5 id="给你一个字符串s-找到-s-中最长的回文子串。-s的最大长度为1000"><a href="#给你一个字符串s-找到-s-中最长的回文子串。-s的最大长度为1000" class="headerlink" title="给你一个字符串s,找到 s 中最长的回文子串。 s的最大长度为1000"></a>给你一个字符串s,找到 s 中最长的回文子串。 s的最大长度为1000</h5><h5 id="解题思路-动态规划"><a href="#解题思路-动态规划" class="headerlink" title="解题思路:动态规划"></a>解题思路:动态规划</h5><h5 id="当遇到反复出现的子问题时-子问题还会包含更小的子问题-然后我们需要解决更小的问题，然后把问题的结果记录出来，最后通过子问题得到原问题的解-该题主要是要用到-if-s-i-s-j-amp-amp-dp-i-1-j-1-dp-i-j-true-回文子串的子集也是回文子串-dp-记录每一次遍历的结果"><a href="#当遇到反复出现的子问题时-子问题还会包含更小的子问题-然后我们需要解决更小的问题，然后把问题的结果记录出来，最后通过子问题得到原问题的解-该题主要是要用到-if-s-i-s-j-amp-amp-dp-i-1-j-1-dp-i-j-true-回文子串的子集也是回文子串-dp-记录每一次遍历的结果" class="headerlink" title="当遇到反复出现的子问题时,子问题还会包含更小的子问题,然后我们需要解决更小的问题，然后把问题的结果记录出来，最后通过子问题得到原问题的解. 该题主要是要用到  if(s[i]===s[j] &amp;&amp; dp[i+1][j-1]) dp[i][j]=true,回文子串的子集也是回文子串 dp 记录每一次遍历的结果"></a>当遇到反复出现的子问题时,子问题还会包含更小的子问题,然后我们需要解决更小的问题，然后把问题的结果记录出来，最后通过子问题得到原问题的解. 该题主要是要用到  if(s[i]===s[j] &amp;&amp; dp[i+1][j-1]) dp[i][j]=true,回文子串的子集也是回文子串 dp 记录每一次遍历的结果</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param &#123;string&#125; s * @return &#123;string&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">longestPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s    <span class="token keyword">let</span> res<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// dp[i][j]=true 当前是回文子串</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span>            <span class="token comment">// dp[i+1][j-i] 包含的子集也是回文子串</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span>            <span class="token comment">// j-i+1>res.length 判断的是当前回文子串的长度是否是最大的</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  res<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第3题:无重复字符的最长子串</title>
      <link href="posts/11a9.html"/>
      <url>posts/11a9.html</url>
      
        <content type="html"><![CDATA[<h5 id="给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。"><a href="#给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。" class="headerlink" title="给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。"></a>给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。</h5><h6 id="使用滑动窗口-给定一个空数组-遍历当前字符串-检查当前值是否在数组中-若不在-将其push到数组中-若在，将当前值所在位置之前并包括其本身都从数组中删除-然后再将其push到数组中-每次push到数组中时，都取max和当前数组长度的最大值赋值给max，最后将max返回-得到最大的长度"><a href="#使用滑动窗口-给定一个空数组-遍历当前字符串-检查当前值是否在数组中-若不在-将其push到数组中-若在，将当前值所在位置之前并包括其本身都从数组中删除-然后再将其push到数组中-每次push到数组中时，都取max和当前数组长度的最大值赋值给max，最后将max返回-得到最大的长度" class="headerlink" title="使用滑动窗口,给定一个空数组,遍历当前字符串,检查当前值是否在数组中,若不在,将其push到数组中,若在，将当前值所在位置之前并包括其本身都从数组中删除,然后再将其push到数组中, 每次push到数组中时，都取max和当前数组长度的最大值赋值给max，最后将max返回 得到最大的长度"></a>使用滑动窗口,给定一个空数组,遍历当前字符串,检查当前值是否在数组中,若不在,将其push到数组中,若在，将当前值所在位置之前并包括其本身都从数组中删除,然后再将其push到数组中, 每次push到数组中时，都取max和当前数组长度的最大值赋值给max，最后将max返回 得到最大的长度</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param &#123;string&#125; s * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 截取之前相同数字前的长度</span>            arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//charAt 返回当前索引所在字符串的值</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">//拿到 最大值</span>        max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第2题:两数相加</title>
      <link href="posts/44cd.html"/>
      <url>posts/44cd.html</url>
      
        <content type="html"><![CDATA[<h5 id="给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。请你将两个数相加，并以相同形式返回一个表示和的链表。"><a href="#给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。请你将两个数相加，并以相同形式返回一个表示和的链表。" class="headerlink" title="给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。请你将两个数相加，并以相同形式返回一个表示和的链表。"></a>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。请你将两个数相加，并以相同形式返回一个表示和的链表。</h5><h5 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h5><!-- <blockquote></blockquote> --><pre class="line-numbers language-js" data-language="js"><code class="language-js">输入：l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>解释：<span class="token number">342</span> <span class="token operator">+</span> <span class="token number">465</span> <span class="token operator">=</span> <span class="token number">807.</span>输入：l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通用解法"><a href="#通用解法" class="headerlink" title="通用解法"></a>通用解法</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val, next) &#123; *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * &#125; */</span><span class="token comment">/** * @param &#123;ListNode&#125; l1 * @param &#123;ListNode&#125; l2 * @return &#123;ListNode&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> add<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//来判断是否进位</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个空的链表</span>    <span class="token keyword">let</span> head<span class="token operator">=</span>sum<span class="token punctuation">;</span> <span class="token comment">//</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>add <span class="token operator">||</span> l1 <span class="token operator">||</span> l2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> val1<span class="token operator">=</span>l1<span class="token operator">!==</span><span class="token keyword">null</span><span class="token operator">?</span>l1<span class="token punctuation">.</span>val<span class="token operator">:</span><span class="token number">0</span> <span class="token comment">//判断l1是否有值</span>    <span class="token keyword">let</span> val2<span class="token operator">=</span>l2<span class="token operator">!==</span><span class="token keyword">null</span><span class="token operator">?</span>l2<span class="token punctuation">.</span>val<span class="token operator">:</span><span class="token number">0</span> <span class="token comment">//判断l2是否有值</span>    <span class="token keyword">let</span> r1<span class="token operator">=</span>val1 <span class="token operator">+</span> val2 <span class="token operator">+</span> add <span class="token comment">//将l1、l2和进位相加</span>    add<span class="token operator">=</span><span class="token punctuation">(</span>r1<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span>  <span class="token comment">//判断r1是否大于0，看是否进位</span>    sum<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>r1 <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//取r1的个位数</span>    sum<span class="token operator">=</span>sum<span class="token punctuation">.</span>next     <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next <span class="token comment">//判断下一个指针是否存在</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span> l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next     <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next <span class="token comment">//返回头部</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第1题:两数之和</title>
      <link href="posts/d10e.html"/>
      <url>posts/d10e.html</url>
      
        <content type="html"><![CDATA[<h5 id="给定一个整数数组-nums-和一个整数目标值-target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是-数组中同一个元素不能使用两遍。"><a href="#给定一个整数数组-nums-和一个整数目标值-target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是-数组中同一个元素不能使用两遍。" class="headerlink" title="给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是,数组中同一个元素不能使用两遍。"></a>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是,数组中同一个元素不能使用两遍。</h5><h2 id="一、直接遍历"><a href="#一、直接遍历" class="headerlink" title="一、直接遍历"></a>一、直接遍历</h2><h5 id="直接遍历两边-第一次遍历找x-第二次遍历找target-x-然后输出结果-复杂度-O-n-2"><a href="#直接遍历两边-第一次遍历找x-第二次遍历找target-x-然后输出结果-复杂度-O-n-2" class="headerlink" title="直接遍历两边,第一次遍历找x,第二次遍历找target-x,然后输出结果.复杂度 O(n^2)"></a>直接遍历两边,第一次遍历找x,第二次遍历找target-x,然后输出结果.复杂度 O(n^2)</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 直接 遍历两遍得出结果</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、obj"><a href="#二、obj" class="headerlink" title="二、obj"></a>二、obj</h2><h5 id="遍历一遍-使用对象作为中间件-把target-x保存下来-复杂度-O-n"><a href="#遍历一遍-使用对象作为中间件-把target-x保存下来-复杂度-O-n" class="headerlink" title="遍历一遍,使用对象作为中间件,把target-x保存下来.复杂度 O(n)"></a>遍历一遍,使用对象作为中间件,把target-x保存下来.复杂度 O(n)</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> num<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>obj<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      obj<span class="token punctuation">[</span>target<span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token operator">=</span>i    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、map"><a href="#三、map" class="headerlink" title="三、map"></a>三、map</h2><h5 id="遍历一遍-使用map作为中间件-把target-x保存下来-复杂度-O-n"><a href="#遍历一遍-使用map作为中间件-把target-x保存下来-复杂度-O-n" class="headerlink" title="遍历一遍,使用map作为中间件,把target-x保存下来.复杂度 O(n)"></a>遍历一遍,使用map作为中间件,把target-x保存下来.复杂度 O(n)</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> map<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>     map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写promise</title>
      <link href="posts/b2f4.html"/>
      <url>posts/b2f4.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、prosmise的出现解决了什么问题？"><a href="#一、prosmise的出现解决了什么问题？" class="headerlink" title="一、prosmise的出现解决了什么问题？"></a>一、prosmise的出现解决了什么问题？</h2><ol><li>回到地狱问题</li><li>代码的可读性更高</li></ol><h2 id="二、promise的状态及使用方法"><a href="#二、promise的状态及使用方法" class="headerlink" title="二、promise的状态及使用方法"></a>二、promise的状态及使用方法</h2><ul><li>promise 一共有三中状态<ul><li>pedding 等待的状态,只是暂时的 一定会转为fulfilled或者rejected</li><li>fulfilled 成功的状态 </li><li>rejected  失败的状态</li></ul></li><li>promise的 使用方法<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">myPromise</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了么？就这样结束了么？'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">///1111  成功的回调</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//catch 接受promise的所有报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="三、then方法的实现"><a href="#三、then方法的实现" class="headerlink" title="三、then方法的实现"></a>三、then方法的实现</h2><h3 id="3-1-简单的then-实现"><a href="#3-1-简单的then-实现" class="headerlink" title="3.1 简单的then 实现"></a>3.1 简单的then 实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Mypromise</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"pedding"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 失败的返回参数</span>       <span class="token comment">//成功的回调函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">resolve</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"fullFilled"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//失败的回到函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">reject</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"rejected"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span>reason<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//执行函数</span>        <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//失败时执行reject函数</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//then 方法的实现</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulFilled<span class="token punctuation">,</span>onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//成功执行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"fullFilled"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//失败执行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"rejected"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">myPromise</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了么？就这样结束了么？'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//打印成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-为promise增加发布订阅模式，使pedding异步转化为成功或者失败状态也可以执行"><a href="#3-2-为promise增加发布订阅模式，使pedding异步转化为成功或者失败状态也可以执行" class="headerlink" title="3.2 为promise增加发布订阅模式，使pedding异步转化为成功或者失败状态也可以执行"></a>3.2 为promise增加发布订阅模式，使pedding异步转化为成功或者失败状态也可以执行</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">class</span> <span class="token class-name">Mypromise</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"pedding"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 失败的返回参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//成功的回调函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//失败的回调函数</span>       <span class="token comment">//成功的回调函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">resolve</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"fullFilled"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>          <span class="token comment">//成功函数的执行</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token operator">=></span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//失败的回到函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">reject</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"rejected"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span>reason<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>          <span class="token comment">//失败函数的执行</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token operator">=></span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//执行函数</span>        <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//失败时执行reject函数</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//then 方法的实现</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulFilled<span class="token punctuation">,</span>onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//同步成功执行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"fullFilled"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//同步失败执行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"rejected"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 在pedding状态时,将成功和失败的回调函数分别 push到 mypromise自身当中,</span>    <span class="token comment">// 然后当转台改变时 再去执行相应的函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">myPromise</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 异步调用</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment">// resolve(1111)</span>    <span class="token comment">// throw new Error('失败了')</span>    <span class="token comment">// reject('失败了么？就这样结束了么？')</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-增加then的链式调用"><a href="#3-3-增加then的链式调用" class="headerlink" title="3.3 增加then的链式调用"></a>3.3 增加then的链式调用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//判断是否是函数</span><span class="token keyword">const</span> <span class="token function-variable function">isFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'function'</span><span class="token keyword">class</span> <span class="token class-name">Mypromise</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"pedding"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">'undefined'</span><span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span><span class="token string">'undefined'</span><span class="token punctuation">;</span> <span class="token comment">// 失败的返回参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//成功的回调函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//失败的回调函数</span>       <span class="token comment">//成功的回调函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">resolve</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"fullFilled"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>          <span class="token comment">//成功函数的执行</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token operator">=></span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//失败的回到函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">reject</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"rejected"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span>reason<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>          <span class="token comment">//失败函数的执行</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token operator">=></span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//执行函数</span>        <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//失败时执行reject函数</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//then 方法的实现</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulFilled<span class="token punctuation">,</span>onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 将两个参数，都设这成可选的</span>      onFulFilled <span class="token operator">=</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>onFulFilled<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function-variable function">onFulFilled</span> <span class="token operator">:</span> <span class="token parameter">data</span> <span class="token operator">=></span> data      onRejected <span class="token operator">=</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> err      <span class="token punctuation">&#125;</span>      <span class="token comment">//先调用自己</span>      <span class="token keyword">let</span> selfPromise<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token comment">//同步成功执行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"fullFilled"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//拿到 onFullFilled函数返回的值,再次执行resolve或者 reject</span>             <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>             <span class="token comment">//判断 x返回值 是否还是一个 promise</span>              <span class="token function">checkPromise</span><span class="token punctuation">(</span>selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//同步失败执行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"rejected"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>              <span class="token function">checkPromise</span><span class="token punctuation">(</span>selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 异步执行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>                <span class="token function">checkPromise</span><span class="token punctuation">(</span>selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>                <span class="token function">checkPromise</span><span class="token punctuation">(</span>selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> selfPromise  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//检查是否为promise</span><span class="token keyword">function</span> <span class="token function">checkPromise</span><span class="token punctuation">(</span><span class="token parameter">selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// selfPromiseh 和返回值不能是同一个 否则直接返回报错</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>selfPromise<span class="token operator">===</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Chaining cycle detected for promise #&lt;promise>'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//当x是函数或者对象时 执行判断</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token operator">===</span><span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> x<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> isFirst<span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>      <span class="token comment">//将then抽离出来</span>      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>      <span class="token comment">//判断then 是否是一个方法</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>then<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token parameter">y</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>isFirst<span class="token punctuation">)</span> <span class="token keyword">return</span>          isFirst<span class="token operator">=</span><span class="token boolean">true</span>          <span class="token function">checkPromise</span><span class="token punctuation">(</span>selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">r</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>isFirst<span class="token punctuation">)</span> <span class="token keyword">return</span>          isFirst<span class="token operator">=</span><span class="token boolean">true</span>          <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//x不是一个 promise</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isFirst<span class="token punctuation">)</span> <span class="token keyword">return</span>        isFirst<span class="token operator">=</span><span class="token boolean">true</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 保证只执行一次</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>isFirst<span class="token punctuation">)</span> <span class="token keyword">return</span>      isFirst<span class="token operator">=</span><span class="token boolean">true</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//直接 执行x</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、其他方法的实现"><a href="#四、其他方法的实现" class="headerlink" title="四、其他方法的实现"></a>四、其他方法的实现</h2><h3 id="4-1-catch方法的实现-捕捉到promise中的-错误"><a href="#4-1-catch方法的实现-捕捉到promise中的-错误" class="headerlink" title="4.1 catch方法的实现 捕捉到promise中的 错误"></a>4.1 catch方法的实现 捕捉到promise中的 错误</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Mypromise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">catch</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-2-所有的promise都成功返回true，否则返回false"><a href="#4-2-所有的promise都成功返回true，否则返回false" class="headerlink" title="4.2 所有的promise都成功返回true，否则返回false"></a>4.2 所有的promise都成功返回true，否则返回false</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** @param 验证是否是一个 promise*/</span><span class="token keyword">const</span> <span class="token function-variable function">isPromise</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">.</span>then <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">//实现 all方法</span>  <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">lists</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//也要验证 lists是一个数组</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">/*      * @param 数组中的 索引  data当前索引对应的执行结果      * @param 当到最后一项时，执行resolve      */</span>      <span class="token comment">//数组中的 索引  data 当前索引对应的参数</span>      <span class="token keyword">let</span> resArr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//保存执行过程中的结果</span>      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">processData</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>data        index<span class="token operator">+=</span><span class="token number">1</span> <span class="token comment">//执行一次 调用一次，保证每一个都执行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>resArr<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">processData</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>data<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token comment">//当报错时直接走出循环</span>            <span class="token keyword">return</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>          <span class="token function">processData</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-race方法的-实现"><a href="#4-3-race方法的-实现" class="headerlink" title="4.3 race方法的 实现"></a>4.3 race方法的 实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">lists</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token keyword">return</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-resolve方法的实现"><a href="#4-4-resolve方法的实现" class="headerlink" title="4.4 resolve方法的实现"></a>4.4 resolve方法的实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> value    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-reject方法的实现"><a href="#4-5-reject方法的实现" class="headerlink" title="4.5 reject方法的实现"></a>4.5 reject方法的实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-finally方法的实现"><a href="#4-6-finally方法的实现" class="headerlink" title="4.6 finally方法的实现"></a>4.6 finally方法的实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">finally</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token parameter">value</span> <span class="token operator">=></span> Mypromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">)</span>        <span class="token punctuation">,</span>        <span class="token parameter">reason</span> <span class="token operator">=></span> Mypromise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> reason <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js深浅copy</title>
      <link href="posts/159a.html"/>
      <url>posts/159a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>深copy和浅copy都是对于引用数据类型的。<br>浅copy就只是复制对象的引用,如果copy后的对象发生变化,原对象也会发生变化,只有当深copy才是真正地对象的copy。</p></blockquote><h2 id="一、浅copy及常用的浅copy的一些方法"><a href="#一、浅copy及常用的浅copy的一些方法" class="headerlink" title="一、浅copy及常用的浅copy的一些方法"></a>一、浅copy及常用的浅copy的一些方法</h2><h5 id="给定一个引用数据类型A-当B复制了A后-B改变-A也会跟着改变"><a href="#给定一个引用数据类型A-当B复制了A后-B改变-A也会跟着改变" class="headerlink" title="给定一个引用数据类型A,当B复制了A后,B改变,A也会跟着改变"></a>给定一个引用数据类型A,当B复制了A后,B改变,A也会跟着改变</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> b<span class="token operator">=</span>a<span class="token punctuation">;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[5,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[5,2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-Object-assign"><a href="#1-1-Object-assign" class="headerlink" title="1.1 Object.assign()"></a>1.1 Object.assign()</h3><h5 id="将源对象中所有的可枚举属性-复制到目标对象"><a href="#将源对象中所有的可枚举属性-复制到目标对象" class="headerlink" title="将源对象中所有的可枚举属性,复制到目标对象"></a>将源对象中所有的可枚举属性,复制到目标对象</h5><h5 id="Object-assign-target–目标对象-可以跟多个参数-且后者会覆盖前者"><a href="#Object-assign-target–目标对象-可以跟多个参数-且后者会覆盖前者" class="headerlink" title="Object.assign(target–目标对象,可以跟多个参数,且后者会覆盖前者)"></a>Object.assign(target–目标对象,可以跟多个参数,且后者会覆盖前者)</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">88888</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span>obj<span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">7777</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">//&#123;name: "xiner", age: &#123;a:7777&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">//&#123;name: "xiner", age: &#123;a:7777&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只能copy原对象的自身属性和symbol值的属性<br>不能copy原对象不可枚举的属性和继承的属性,也不能copy null和undefined</p></blockquote><h3 id="1-2-扩展运算符"><a href="#1-2-扩展运算符" class="headerlink" title="1.2 扩展运算符"></a>1.2 扩展运算符</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">88888</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>obj<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token number">7777</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">//&#123;name: "xiner", age: &#123;c:7777&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">//&#123;name: "xiner", age: &#123;c:7777&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-数组的方法-slice-concat"><a href="#1-3-数组的方法-slice-concat" class="headerlink" title="1.3 数组的方法 slice concat"></a>1.3 数组的方法 slice concat</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// slice</span><span class="token keyword">let</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1,2,3,4,5,[8,8,9]]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">//[1,2,3,4,5,[8,8,9]]</span><span class="token comment">// concat</span><span class="token keyword">let</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token operator">=</span>arr2<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1,2,3,4,5,[8,8,9]]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">//[1,2,3,4,5,[8,8,9]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h5><blockquote><p>1.赋值运算符 = 实现的是浅拷贝，只拷贝对象的引用值；<br>2.数组和对象自带的拷贝方法都是“首层浅拷贝”</p></blockquote><h2 id="二、深copy及深copy的一些方法"><a href="#二、深copy及深copy的一些方法" class="headerlink" title="二、深copy及深copy的一些方法"></a>二、深copy及深copy的一些方法</h2><h5 id="深copy后-两者没有任何关系"><a href="#深copy后-两者没有任何关系" class="headerlink" title="深copy后,两者没有任何关系"></a>深copy后,两者没有任何关系</h5><h3 id="2-1-JSON-parse-和-JSON-stringify"><a href="#2-1-JSON-parse-和-JSON-stringify" class="headerlink" title="2.1 JSON.parse 和 JSON.stringify"></a>2.1 JSON.parse 和 JSON.stringify</h3><h5 id="JSON-parse-把字符串转化为一个js对象"><a href="#JSON-parse-把字符串转化为一个js对象" class="headerlink" title="JSON,parse 把字符串转化为一个js对象"></a>JSON,parse 把字符串转化为一个js对象</h5><h5 id="JSON-stringify-把对象转换为一个字符串"><a href="#JSON-stringify-把对象转换为一个字符串" class="headerlink" title="JSON.stringify 把对象转换为一个字符串"></a>JSON.stringify 把对象转换为一个字符串</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">88888</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">9999</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">//&#123;name: "xiner", age: &#123;a:88888&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">//&#123;name: "xiner", age: &#123;a:9999&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="缺点-不能处理包含函数的对象和数组"><a href="#缺点-不能处理包含函数的对象和数组" class="headerlink" title="缺点: 不能处理包含函数的对象和数组"></a>缺点: 不能处理包含函数的对象和数组</h5><h3 id="2-2-使用递归实现深copy"><a href="#2-2-使用递归实现深copy" class="headerlink" title="2.2 使用递归实现深copy"></a>2.2 使用递归实现深copy</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> resObj<span class="token operator">=</span>source<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Array<span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//判断赋值的是数组还是对象</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//遍历</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 自己本身有的，不是继承来的</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断属性值是否是引用数据类型</span>        resObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor<span class="token operator">===</span>Array<span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//判断属性值是数组还是对象</span>        resObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">deepClone</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//递归</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        resObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">//直接赋值</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> resObj <span class="token comment">//返回值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js继承</title>
      <link href="posts/ffd3.html"/>
      <url>posts/ffd3.html</url>
      
        <content type="html"><![CDATA[<h5 id="js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式"><a href="#js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式" class="headerlink" title="js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式"></a>js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式</h5><h2 id="一、es5中的继承方式"><a href="#一、es5中的继承方式" class="headerlink" title="一、es5中的继承方式"></a>一、es5中的继承方式</h2><h5 id="首先我们先引入父类"><a href="#首先我们先引入父类" class="headerlink" title="首先我们先引入父类"></a>首先我们先引入父类</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Heart</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token operator">||</span><span class="token string">"小明"</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address<span class="token operator">||</span><span class="token string">"山西"</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' 是一个 '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token string">' 人'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">let</span> heart<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小军'</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Childheart</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>heart <span class="token comment">//子类的原型指向父类的实例</span> <span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span>address<span class="token operator">=</span><span class="token string">'上海'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小军</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 58, 58588, 8888]</span> firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span> secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小军</span> firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小红 是一个 上海 人</span> secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小军 是一个 北京 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-主要利用的是子类的原型指向父类的实例"><a href="#实现方式-主要利用的是子类的原型指向父类的实例" class="headerlink" title="实现方式:主要利用的是子类的原型指向父类的实例"></a>实现方式:主要利用的是子类的原型指向父类的实例</h5><h5 id="优点：-简单-父类的方法都可以服用"><a href="#优点：-简单-父类的方法都可以服用" class="headerlink" title="优点： 简单, 父类的方法都可以服用"></a>优点： 简单, 父类的方法都可以服用</h5><h5 id="缺点：-当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变-而且子类的实例不能向父类传值"><a href="#缺点：-当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变-而且子类的实例不能向父类传值" class="headerlink" title="缺点： 当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变,而且子类的实例不能向父类传值"></a>缺点： 当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变,而且子类的实例不能向父类传值</h5><h3 id="2-借用构造函数继承-call-apply"><a href="#2-借用构造函数继承-call-apply" class="headerlink" title="2.借用构造函数继承(call,apply)"></a>2.借用构造函数继承(call,apply)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Heart</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'重庆'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">//Childheart &#123;name: "小明", address: "重庆", arr: Array(4), get: ƒ&#125;</span> firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span>address<span class="token operator">=</span><span class="token string">'上海'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小明</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 3，5]</span> firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span> secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明</span> firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 报错 firstChild.say is not a function</span> secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//报错 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-在子类的构造函数中改变父类的构造函数的this指向"><a href="#实现方式-在子类的构造函数中改变父类的构造函数的this指向" class="headerlink" title="实现方式:在子类的构造函数中改变父类的构造函数的this指向"></a>实现方式:在子类的构造函数中改变父类的构造函数的this指向</h5><h5 id="优点：-子类可以向父类传递参数，且父类的引用属性不会共享"><a href="#优点：-子类可以向父类传递参数，且父类的引用属性不会共享" class="headerlink" title="优点： 子类可以向父类传递参数，且父类的引用属性不会共享"></a>优点： 子类可以向父类传递参数，且父类的引用属性不会共享</h5><h5 id="缺点：-子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大"><a href="#缺点：-子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大" class="headerlink" title="缺点： 子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大"></a>缺点： 子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大</h5><h3 id="3-组合式继承-原型链继承和借用构造函数继承的组合"><a href="#3-组合式继承-原型链继承和借用构造函数继承的组合" class="headerlink" title="3.组合式继承(原型链继承和借用构造函数继承的组合)"></a>3.组合式继承(原型链继承和借用构造函数继承的组合)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">Heart</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'重庆'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Childheart</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">//Childheart &#123;name: "小明", address: "重庆", arr: Array(4), get: ƒ&#125;</span>firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span>firstChild<span class="token punctuation">.</span>address<span class="token operator">=</span><span class="token string">'上海'</span><span class="token punctuation">;</span>firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span> <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小明</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 3，5]</span>firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span>secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明</span>firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 小红 是一个 上海 人</span>secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明 是一个 重庆 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性"><a href="#实现方式-使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性" class="headerlink" title="实现方式: 使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性"></a>实现方式: 使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性</h5><h5 id="优点：-父类的方法可以复用，也可以向父类传值-而且父类的引用属性也不会被子类共享"><a href="#优点：-父类的方法可以复用，也可以向父类传值-而且父类的引用属性也不会被子类共享" class="headerlink" title="优点： 父类的方法可以复用，也可以向父类传值,而且父类的引用属性也不会被子类共享"></a>优点： 父类的方法可以复用，也可以向父类传值,而且父类的引用属性也不会被子类共享</h5><h5 id="缺点：-调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数"><a href="#缺点：-调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数" class="headerlink" title="缺点： 调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数"></a>缺点： 调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数</h5><h3 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4.原型式继承"></a>4.原型式继承</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//obj为父类的实例</span><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>obj   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> heart<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小李'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span>heart<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">// F&#123;&#125;</span>firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span>firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span> <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span>heart<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小李</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 58, 58588, 8888]</span>firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span>secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小李</span>firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 小红 是一个 深圳 人</span>secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小李 是一个 深圳 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例-最后再返回当前的构造函数（与Object-craete-类似）"><a href="#实现方式-在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例-最后再返回当前的构造函数（与Object-craete-类似）" class="headerlink" title="实现方式: 在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例,最后再返回当前的构造函数（与Object.craete()类似）"></a>实现方式: 在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例,最后再返回当前的构造函数（与Object.craete()类似）</h5><h5 id="优点：-父类的方法可以复用"><a href="#优点：-父类的方法可以复用" class="headerlink" title="优点： 父类的方法可以复用"></a>优点： 父类的方法可以复用</h5><h5 id="缺点：-子类不能向父类传参-父类的引用属性会被所有子类共享"><a href="#缺点：-子类不能向父类传参-父类的引用属性会被所有子类共享" class="headerlink" title="缺点： 子类不能向父类传参,父类的引用属性会被所有子类共享"></a>缺点： 子类不能向父类传参,父类的引用属性会被所有子类共享</h5><h3 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5.寄生式继承"></a>5.寄生式继承</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//obj为父类的实例</span> <span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>obj    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token comment">//在原型式的基础上有套一个函数</span><span class="token keyword">function</span> <span class="token function">ChildH</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> childHeart<span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">Childheart</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  childHeart<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'心儿'</span><span class="token keyword">return</span> childHeart<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-在原型式继承的基础上套一个盒子"><a href="#实现方式-在原型式继承的基础上套一个盒子" class="headerlink" title="实现方式: 在原型式继承的基础上套一个盒子"></a>实现方式: 在原型式继承的基础上套一个盒子</h5><h5 id="缺点：-无法复用"><a href="#缺点：-无法复用" class="headerlink" title="缺点： 无法复用"></a>缺点： 无法复用</h5><h2 id="6-寄生组合式继承"><a href="#6-寄生组合式继承" class="headerlink" title="6.寄生组合式继承"></a>6.寄生组合式继承</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token comment">//父类的构造函数</span>  <span class="token keyword">function</span> <span class="token function">Heart</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token operator">||</span><span class="token string">"小明"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address<span class="token operator">||</span><span class="token string">"山西"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//在父类的原型上添加方法</span>  <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' 是一个 '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token string">' 人'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//利用原型式继承</span> <span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>obj    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">//在原型式的基础上有套一个函数,将 子类的原型跟父类的实例结合起来</span> <span class="token keyword">function</span> <span class="token function">inheritH</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span>parent</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> childH<span class="token operator">=</span><span class="token function">Childheart</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span>   childH<span class="token punctuation">.</span>constructor<span class="token operator">=</span>child<span class="token punctuation">;</span><span class="token comment">//将对象的构造函数转向子类</span>   child<span class="token punctuation">.</span>prototype<span class="token operator">=</span>childH<span class="token punctuation">;</span> <span class="token comment">//子类的原型又指向父类的实例</span> <span class="token punctuation">&#125;</span><span class="token comment">//子类的构造函数</span> <span class="token keyword">function</span> <span class="token function">Childs</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">Heart</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>address<span class="token punctuation">)</span><span class="token comment">//借用构造函数继承</span> <span class="token punctuation">&#125;</span> <span class="token comment">//把子类和父类结合在一起</span> <span class="token function">inheritH</span><span class="token punctuation">(</span>Childs<span class="token punctuation">,</span>Heart<span class="token punctuation">)</span><span class="token comment">//  一些调用</span> <span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childs</span><span class="token punctuation">(</span><span class="token string">'小李'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">//Childs &#123;name: "小李", address: "深圳", arr: Array(4), get: ƒ&#125;</span> firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childs</span><span class="token punctuation">(</span><span class="token string">'小赵'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小赵</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 3，5]</span> firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span> secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小赵</span> firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 小红 是一个 深圳 人</span> secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小赵 是一个 深圳 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-修复组合式继承的不足"><a href="#实现方式-修复组合式继承的不足" class="headerlink" title="实现方式: 修复组合式继承的不足"></a>实现方式: 修复组合式继承的不足</h5><h5 id="优点：-父类的方法可以复用-子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数"><a href="#优点：-父类的方法可以复用-子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数" class="headerlink" title="优点： 父类的方法可以复用,子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数"></a>优点： 父类的方法可以复用,子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数</h5><h2 id="二、es6中的继承方式"><a href="#二、es6中的继承方式" class="headerlink" title="二、es6中的继承方式"></a>二、es6中的继承方式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Heart</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token punctuation">&#125;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">childH</span> <span class="token keyword">extends</span> <span class="token class-name">Heart</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token comment">//继承父类的属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address  <span class="token punctuation">&#125;</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">childH</span><span class="token punctuation">(</span><span class="token string">'心儿'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-利用class的extends让子类继承父类的属性和方法"><a href="#实现方式-利用class的extends让子类继承父类的属性和方法" class="headerlink" title="实现方式:利用class的extends让子类继承父类的属性和方法"></a>实现方式:利用class的extends让子类继承父类的属性和方法</h5>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节流和防抖</title>
      <link href="posts/1f25.html"/>
      <url>posts/1f25.html</url>
      
        <content type="html"><![CDATA[<h5 id="防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。"><a href="#防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。" class="headerlink" title="防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。"></a>防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。</h5><h2 id="一、防抖-debounce"><a href="#一、防抖-debounce" class="headerlink" title="一、防抖 debounce"></a>一、防抖 debounce</h2><h5 id="对于短时间内连续触发的事件，防抖就是让某个时间期限内，事件处理函数只执行一次"><a href="#对于短时间内连续触发的事件，防抖就是让某个时间期限内，事件处理函数只执行一次" class="headerlink" title="对于短时间内连续触发的事件，防抖就是让某个时间期限内，事件处理函数只执行一次"></a>对于短时间内连续触发的事件，防抖就是让某个时间期限内，事件处理函数只执行一次</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*  fn 指的是执行的函数  delay 指的是延迟的时间*/</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token operator">||</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> scrollTop<span class="token operator">=</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// window.onscroll=scrollTop //一直在打印</span>window<span class="token punctuation">.</span>onscroll<span class="token operator">=</span><span class="token function">debounce</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//滚动停止后打印</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、节流-throttle"><a href="#二、节流-throttle" class="headerlink" title="二、节流 throttle"></a>二、节流 throttle</h2><h5 id="如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效"><a href="#如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效" class="headerlink" title="如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效"></a>如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效</h5><h5 id="用setTimeout实现"><a href="#用setTimeout实现" class="headerlink" title="用setTimeout实现"></a>用setTimeout实现</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*  fn 指的是执行的函数  delay 指的是延迟的时间*/</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    timer<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//如果里面用到this，记得改变this 指向</span>      timer<span class="token operator">=</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>delay<span class="token operator">||</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> scrollTop<span class="token operator">=</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// window.onscroll=scrollTop //一直在打印</span>window<span class="token punctuation">.</span>onscroll<span class="token operator">=</span><span class="token function">throttle</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//0.5s的间隔输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用-new-Date实现"><a href="#用-new-Date实现" class="headerlink" title="用 new Date实现"></a>用 new Date实现</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token comment">/*    fn 指的是执行的函数    delay 指的是延迟的时间  */</span>  <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>    <span class="token keyword">let</span> start<span class="token operator">=</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拿到开始的时间戳</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> current<span class="token operator">=</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拿到当前的时间戳</span>      <span class="token keyword">let</span> that<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">//保存当前的this</span>      <span class="token keyword">let</span> args<span class="token operator">=</span>arguments<span class="token punctuation">;</span> <span class="token comment">//传入的参数</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">-</span>start<span class="token operator">>=</span>delay<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        start <span class="token operator">=</span>current      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        timer<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> scrollTop<span class="token operator">=</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span><span class="token string">'555'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token comment">// window.onscroll=scrollTop //一直在打印</span>window<span class="token punctuation">.</span>onscroll<span class="token operator">=</span><span class="token function">throttle</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//0.5s的间隔输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="总的来说-防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。"><a href="#总的来说-防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。" class="headerlink" title="总的来说:防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。"></a>总的来说:防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。</h5><h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><h5 id="防抖"><a href="#防抖" class="headerlink" title="防抖:"></a>防抖:</h5><h5 id="search搜索联想，用户在不断输入值时，用防抖来节约请求资源。"><a href="#search搜索联想，用户在不断输入值时，用防抖来节约请求资源。" class="headerlink" title="search搜索联想，用户在不断输入值时，用防抖来节约请求资源。"></a>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。</h5><h5 id="window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次"><a href="#window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次" class="headerlink" title="window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次"></a>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</h5><h5 id="节流"><a href="#节流" class="headerlink" title="节流:"></a>节流:</h5><h5 id="鼠标不断点击触发，mousedown-单位时间内只触发一次"><a href="#鼠标不断点击触发，mousedown-单位时间内只触发一次" class="headerlink" title="鼠标不断点击触发，mousedown(单位时间内只触发一次)"></a>鼠标不断点击触发，mousedown(单位时间内只触发一次)</h5><h5 id="监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断"><a href="#监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断" class="headerlink" title="监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断"></a>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</h5>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js闭包</title>
      <link href="posts/7d8b.html"/>
      <url>posts/7d8b.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><h5 id="闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数"><a href="#闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数" class="headerlink" title="闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数"></a>闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数</h5><h5 id="闭包的形成与变量的作用域和变量的生命周期息息相关"><a href="#闭包的形成与变量的作用域和变量的生命周期息息相关" class="headerlink" title="闭包的形成与变量的作用域和变量的生命周期息息相关"></a>闭包的形成与变量的作用域和变量的生命周期息息相关</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">"xiner"</span><span class="token punctuation">;</span> <span class="token comment">//name是heart 创建的局部变量 </span>  <span class="token keyword">function</span> <span class="token function">heartChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//内部函数,闭包</span>    <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用外部的变量</span>  <span class="token punctuation">&#125;</span>  <span class="token function">heartChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在-heartChild-内部可以使用heart-中声明的变量name-这就形成了一个闭包"><a href="#在-heartChild-内部可以使用heart-中声明的变量name-这就形成了一个闭包" class="headerlink" title="在 heartChild()内部可以使用heart()中声明的变量name,这就形成了一个闭包"></a>在 heartChild()内部可以使用heart()中声明的变量name,这就形成了一个闭包</h5><h2 id="二、作用"><a href="#二、作用" class="headerlink" title="二、作用"></a>二、作用</h2><h3 id="1-函数内部调用外部变量"><a href="#1-函数内部调用外部变量" class="headerlink" title="1.函数内部调用外部变量"></a>1.函数内部调用外部变量</h3><h5 id="上面的例子就反映了在heartChild-函数内部并没有name变量，而是访问了heart-里面的内部变量"><a href="#上面的例子就反映了在heartChild-函数内部并没有name变量，而是访问了heart-里面的内部变量" class="headerlink" title="上面的例子就反映了在heartChild()函数内部并没有name变量，而是访问了heart()里面的内部变量"></a>上面的例子就反映了在heartChild()函数内部并没有name变量，而是访问了heart()里面的内部变量</h5><h3 id="2-构造函数的私有属性"><a href="#2-构造函数的私有属性" class="headerlink" title="2.构造函数的私有属性"></a>2.构造函数的私有属性</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Heart</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name<span class="token operator">=</span>name<span class="token punctuation">;</span> <span class="token comment">//name是heart 创建的局部变量 </span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">15</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'xiner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>heart1<span class="token punctuation">.</span>age<span class="token operator">+=</span><span class="token number">1</span> heart1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'xin'</span>heart1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//xiner  name就是构造函数的私有属性，不能改变,age就可以改变</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">)</span>  <span class="token comment">//age=16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-延长变量生命周期"><a href="#3-延长变量生命周期" class="headerlink" title="3.延长变量生命周期"></a>3.延长变量生命周期</h3><h5 id="在函数内部的变量-原来在函数执行之后-都会被销毁-而由于闭包-变量永远会被保存下来-延长了生命周期"><a href="#在函数内部的变量-原来在函数执行之后-都会被销毁-而由于闭包-变量永远会被保存下来-延长了生命周期" class="headerlink" title="在函数内部的变量,原来在函数执行之后,都会被销毁,而由于闭包,变量永远会被保存下来,延长了生命周期"></a>在函数内部的变量,原来在函数执行之后,都会被销毁,而由于闭包,变量永远会被保存下来,延长了生命周期</h5><h2 id="三、闭包的应用"><a href="#三、闭包的应用" class="headerlink" title="三、闭包的应用"></a>三、闭包的应用</h2><h5 id="axios的请求回调"><a href="#axios的请求回调" class="headerlink" title="axios的请求回调"></a>axios的请求回调</h5><h5 id="事件绑定的回调"><a href="#事件绑定的回调" class="headerlink" title="事件绑定的回调"></a>事件绑定的回调</h5><h5 id="setTimeout的延时回调"><a href="#setTimeout的延时回调" class="headerlink" title="setTimeout的延时回调"></a>setTimeout的延时回调</h5><h5 id="函数内部返回一个匿名函数"><a href="#函数内部返回一个匿名函数" class="headerlink" title="函数内部返回一个匿名函数"></a>函数内部返回一个匿名函数</h5><h5 id="函数节流和防抖等等"><a href="#函数节流和防抖等等" class="headerlink" title="函数节流和防抖等等"></a>函数节流和防抖等等</h5><h2 id="四、内存泄漏"><a href="#四、内存泄漏" class="headerlink" title="四、内存泄漏"></a>四、内存泄漏</h2><h5 id="由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露"><a href="#由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露" class="headerlink" title="由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露"></a>由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// div用完之后一直存在内存中，无法被回收</span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里用div导致内存泄露</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> test <span class="token operator">=</span> div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    div <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//div用完后,使其制空，避免泄露</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型与原型链</title>
      <link href="posts/e69b.html"/>
      <url>posts/e69b.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、原型"><a href="#一、原型" class="headerlink" title="一、原型"></a>一、原型</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><h5 id="原型是一个对象的模板-利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法"><a href="#原型是一个对象的模板-利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法" class="headerlink" title="原型是一个对象的模板,利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法"></a>原型是一个对象的模板,利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span><span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明是一个15的帅哥</span>heart2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小红是一个18的美女</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="并且通过原型创建的新实例是相互独立-互不影响的"><a href="#并且通过原型创建的新实例是相互独立-互不影响的" class="headerlink" title="并且通过原型创建的新实例是相互独立,互不影响的"></a>并且通过原型创建的新实例是相互独立,互不影响的</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span><span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//小明</span>heart2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//报错 heart2.getName is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-总结"><a href="#2-总结" class="headerlink" title="2.总结"></a>2.总结</h3><h5 id="原型分为隐士原型-proto-和显示原型-prototype"><a href="#原型分为隐士原型-proto-和显示原型-prototype" class="headerlink" title="原型分为隐士原型(__proto__)和显示原型(prototype)"></a>原型分为隐士原型(__proto__)和显示原型(prototype)</h5><h5 id="隐士原型-proto-是对象拥有的-显示原型-prototype-是构造函数拥有的"><a href="#隐士原型-proto-是对象拥有的-显示原型-prototype-是构造函数拥有的" class="headerlink" title="隐士原型(__proto__)是对象拥有的,显示原型(prototype)是构造函数拥有的"></a>隐士原型(__proto__)是对象拥有的,显示原型(prototype)是构造函数拥有的</h5><h5 id="实例的隐士原型-proto-指向构造函数的显示原型-prototype"><a href="#实例的隐士原型-proto-指向构造函数的显示原型-prototype" class="headerlink" title="实例的隐士原型(__proto__)指向构造函数的显示原型(prototype)"></a>实例的隐士原型(__proto__)指向构造函数的显示原型(prototype)</h5><h5 id="实例的构造器属性-constructor-指向构造函数"><a href="#实例的构造器属性-constructor-指向构造函数" class="headerlink" title="实例的构造器属性(constructor)指向构造函数"></a>实例的构造器属性(constructor)指向构造函数</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>constructor<span class="token operator">===</span> Heart<span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、原型链"><a href="#二、原型链" class="headerlink" title="二、原型链"></a>二、原型链</h2><h5 id="1-当访问heart1的属性时-先访问自身是否是否具有该属性"><a href="#1-当访问heart1的属性时-先访问自身是否是否具有该属性" class="headerlink" title="1.当访问heart1的属性时,先访问自身是否是否具有该属性;"></a>1.当访问heart1的属性时,先访问自身是否是否具有该属性;</h5><h5 id="2-若自身没有该属性-就会访问Heart-prototype是否拥有"><a href="#2-若自身没有该属性-就会访问Heart-prototype是否拥有" class="headerlink" title="2.若自身没有该属性,就会访问Heart.prototype是否拥有;"></a>2.若自身没有该属性,就会访问Heart.prototype是否拥有;</h5><h5 id="3-若Heart-prototype没有该属性-就会访问Object-prototype是否拥有"><a href="#3-若Heart-prototype没有该属性-就会访问Object-prototype是否拥有" class="headerlink" title="3.若Heart.prototype没有该属性,就会访问Object.prototype是否拥有;"></a>3.若Heart.prototype没有该属性,就会访问Object.prototype是否拥有;</h5><h5 id="3-若Object-prototype没有该属性-就会返回undefined"><a href="#3-若Object-prototype没有该属性-就会返回undefined" class="headerlink" title="3.若Object.prototype没有该属性,就会返回undefined"></a>3.若Object.prototype没有该属性,就会返回undefined</h5><h5 id="原型链为-heart1—-gt-Heart-prototype—-gt-Object-prototype—-gt-null"><a href="#原型链为-heart1—-gt-Heart-prototype—-gt-Object-prototype—-gt-null" class="headerlink" title="原型链为: heart1—&gt;Heart.prototype—&gt;Object.prototype—&gt;null"></a>原型链为: heart1—&gt;Heart.prototype—&gt;Object.prototype—&gt;null</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name   <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age   <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type <span class="token punctuation">&#125;</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span> <span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span> heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="原型链反应了对象之间继承的关系"><a href="#原型链反应了对象之间继承的关系" class="headerlink" title="原型链反应了对象之间继承的关系"></a>原型链反应了对象之间继承的关系</h5>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向以及改变this指向的方法</title>
      <link href="posts/6b6.html"/>
      <url>posts/6b6.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、this指向"><a href="#一、this指向" class="headerlink" title="一、this指向"></a>一、this指向</h2><h3 id="1-普通函数调用时，this指向window"><a href="#1-普通函数调用时，this指向window" class="headerlink" title="1.普通函数调用时，this指向window"></a>1.普通函数调用时，this指向window</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//Window</span><span class="token punctuation">&#125;</span><span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-构造函数调用时-this指向实例对象"><a href="#2-构造函数调用时-this指向实例对象" class="headerlink" title="2.构造函数调用时,this指向实例对象"></a>2.构造函数调用时,this指向实例对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Hearter</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//指向了实例heart</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> heart<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hearter</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'xiner'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-定时器调用时-this指向window"><a href="#3-定时器调用时-this指向window" class="headerlink" title="3.定时器调用时,this指向window"></a>3.定时器调用时,this指向window</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//Window</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-对象的方法调用时，this指向该对象"><a href="#4-对象的方法调用时，this指向该对象" class="headerlink" title="4.对象的方法调用时，this指向该对象"></a>4.对象的方法调用时，this指向该对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//obj</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="对于this指向总的来说，谁调用，指向谁-而且必须是对象"><a href="#对于this指向总的来说，谁调用，指向谁-而且必须是对象" class="headerlink" title="对于this指向总的来说，谁调用，指向谁,而且必须是对象"></a>对于this指向总的来说，谁调用，指向谁,而且必须是对象</h5><hr><h2 id="二、改变this的指向"><a href="#二、改变this的指向" class="headerlink" title="二、改变this的指向"></a>二、改变this的指向</h2><h3 id="1-call改变this的指向"><a href="#1-call改变this的指向" class="headerlink" title="1.call改变this的指向"></a>1.call改变this的指向</h3><h6 id="使用call时，this指向第一个参数，后面可以跟无数个参数-并执行回调函数"><a href="#使用call时，this指向第一个参数，后面可以跟无数个参数-并执行回调函数" class="headerlink" title="使用call时，this指向第一个参数，后面可以跟无数个参数,并执行回调函数"></a>使用call时，this指向第一个参数，后面可以跟无数个参数,并执行回调函数</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> hearter<span class="token operator">=</span><span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>   age<span class="token operator">:</span><span class="token number">15</span> <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token comment">//xiner 18 男</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hearter 可以使用heart里面的方法</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//xiner</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span> <span class="token punctuation">&#125;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>hearter<span class="token punctuation">,</span><span class="token string">'xiner'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span> <span class="token comment">//直接执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-apply改变this的指向"><a href="#2-apply改变this的指向" class="headerlink" title="2.apply改变this的指向"></a>2.apply改变this的指向</h3><h6 id="使用apply时，this指向第一个参数，第二个参数时数组"><a href="#使用apply时，this指向第一个参数，第二个参数时数组" class="headerlink" title="使用apply时，this指向第一个参数，第二个参数时数组"></a>使用apply时，this指向第一个参数，第二个参数时数组</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token comment">//1 5 8 9 10 7 6</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-bind改变this的指向"><a href="#3-bind改变this的指向" class="headerlink" title="3.bind改变this的指向"></a>3.bind改变this的指向</h3><h6 id="使用bind时，this指向第一个参数，后面也可以跟无数个参数"><a href="#使用bind时，this指向第一个参数，后面也可以跟无数个参数" class="headerlink" title="使用bind时，this指向第一个参数，后面也可以跟无数个参数"></a>使用bind时，this指向第一个参数，后面也可以跟无数个参数</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//obj</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
