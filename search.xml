<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>服务端渲染ssr</title>
      <link href="posts/c910.html"/>
      <url>posts/c910.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、单页面应用SPA的优缺点"><a href="#一、单页面应用SPA的优缺点" class="headerlink" title="一、单页面应用SPA的优缺点"></a>一、单页面应用SPA的优缺点</h2><ul><li>优点<ul><li>用户体验好</li><li>开发效率高</li><li>渲染性能好</li><li>可维护性好</li></ul></li><li>缺点<ul><li>首屏加载慢<ul><li>单页面使用js生成html渲染,需要等到js解析完毕,才可以看到页面首屏</li></ul></li><li>不利于seo<ul><li>单页面的html中是没有内容的,只有当js解析完毕,生成Html才能进行抓取,但是现在搜索引擎对这种方式抓取还不太好</li></ul></li></ul></li></ul><h2 id="二、同构应用"><a href="#二、同构应用" class="headerlink" title="二、同构应用"></a>二、同构应用</h2><h3 id="2-1-什么是同构应用"><a href="#2-1-什么是同构应用" class="headerlink" title="2.1 什么是同构应用"></a>2.1 什么是同构应用</h3><ul><li>什么是同构应用<br>通过服务端渲染首屏,解决单页面应用首屏喧染慢以及不利于seo的问题,同时通过客户端渲染继续页面交互,而得到更好的客户体验,这中渲染方式为服务端渲染,也为同构渲染。这中渲染方式生成的应用,也是服务端渲染应用或同构应用</li></ul><h3 id="2-2-传统的服务端渲染"><a href="#2-2-传统的服务端渲染" class="headerlink" title="2.2 传统的服务端渲染"></a>2.2 传统的服务端渲染</h3>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue源码---响应式原理</title>
      <link href="posts/4905.html"/>
      <url>posts/4905.html</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>vue 的el、set、delete等初始化过程</li><li>vue初始化过程进行了什么</li><li>数据响应式原理</li></ul><h2 id="一、vue的入口文件"><a href="#一、vue的入口文件" class="headerlink" title="一、vue的入口文件"></a>一、vue的入口文件</h2><ul><li> src/platforms/entry-runtime-with-compiler.js</li><li> 与平台相关的入口</li><li>重写了$mount方法— 将temlate转化为虚拟dom</li><li>注册了Vue.compile 将html转化为render函数</li><li>src/platforms/runtime/index.js<ul><li>与平台相关的入口</li><li>注册了全局指令 v-model、v-show</li><li>注册了全局组件 v-transtion、v-transtion-group</li><li>定义了全局方法__patch__ 把虚拟dom转化为真实dom</li></ul></li><li>src/core/index.js<ul><li>设置了vue的静态方法 initGlobalAPI</li></ul></li><li>src/core/instance/index.js<ul><li>定义了vue的构造函数,调用了this._init 初始化方法</li><li>给vue混入了常用的实例</li></ul></li></ul><h2 id="二、vue页面的首次渲染"><a href="#二、vue页面的首次渲染" class="headerlink" title="二、vue页面的首次渲染"></a>二、vue页面的首次渲染</h2><ul><li>执行Vue初始化,注册vue的实例成员和静态成员</li><li>执行new Vue()构造函数</li><li>在构造函数中调用,this._init(),相当于入口文件,</li><li>再执行vm.$mount()<ul><li>调用web平台的entry-runtime-with-compiler.js</li><li>判断有没有render函数,如果有,添加到 options.render=render</li><li>若没有,通过 compileToFunction 将template转换为render函数</li></ul></li><li>运行时,再次触发vm.$mount() —-platforms/runtime/index.js<ul><li> 执行mountComponent</li></ul></li><li>mountComponent(this,el)—- core/instance/lifecycle.js<ul><li>再判断是否有render,如果传入的是template 会发出警告</li><li>触发beforeMount</li><li>定义updateComponent<ul><li>vm._render 生成虚拟DOM</li><li>vm._update 将虚拟DOM转化为真实DOM</li></ul></li><li>创建Watcher实例<ul><li>传入 updateComponent</li><li>调用watcher.get方法<ul><li>先执行get方法</li><li>调用updateComponent</li><li>调用vm._render 创建虚拟DOM<ul><li>调用render.call 将实例化传入的render或者通过compileToFunction将template转化的render,生成虚拟DOM</li></ul></li><li>调用vm._update 渲染<ul><li>通过vm.<strong>patch</strong> 将虚拟DOM转化为真实DOM,并挂载到页面上</li></ul></li></ul></li></ul></li><li>触发mounted</li><li>return vm</li></ul></li></ul><h2 id="三、响应式处理过程"><a href="#三、响应式处理过程" class="headerlink" title="三、响应式处理过程"></a>三、响应式处理过程</h2><ul><li>在initState 中初始化vue实例的状态,并调用了initData,将data属性添加到vue实例上,并调用observe()</li><li>observe(data)中,判断传来的value是否是对象,不是则返回,然后再判断value中是否有__ob__(是否已经是响应式),有则返回,如果没有,创建Observer对象,然后返回Observer对象</li><li>Observer 对象中给对象添加一个不可枚举的属性__ob__,记录当前的observer对象,然后进行<ul><li>数组的响应式处理—设置可以修改原数组的方法,当调用这些方法时,找到数组对象对应的__ob__, 即observer对象,再找到对象中的Dep,调用对象中的notify方法,发送通知; 接着遍历数组的所有成员,判断是否是对象,如果是也将为其创建observer对象,转化为响应式的数据</li><li>对象的响应式处理—如果当前的值是对象,会调用walk方法,walk方法中遍历所有的成员,如果当前成员是对象,就会调用defineReactive</li></ul></li><li>defineReactive<ul><li>为每一个属性创建dep对象,并判断当前属性的值是否是对象,如果是,调用observe</li><li>定义getter — 收集当前对象的依赖,并为对象中的子对象收集依赖,返回属性的值</li><li>定义setter — 保存新值,如果新值是对象,也调用observe,并派发更新,调用dep.notify()方法</li></ul></li><li>依赖收集<ul><li>在watcher对象的get方法中调用pushTarget 记录当前的Dep.target</li><li>当访问data中的成员时,defineReactive的getter方法中收集依赖,把属性对应的watcher添加到dep的subs数组中</li><li>当属性的值也是对象时,创建childOb,并为子对象添加何删除成员时发送通知</li></ul></li><li>watcher<ul><li>发送通知会调用watcher的update()方法</li><li>在update方法中判断当前watcher也没有被处理,如果没有添加到queue对列中,并调用flushSchedlerQueue()<ul><li>在flushSchedlerQueue方法中 触发beforeUpdate钩子函数</li><li>调用watcher.run方法调用–get()—getter()–updateComponent</li><li>清空上一次的依赖,触发activer钩子函数和updated钩子函数</li></ul></li></ul></li></ul><h2 id="四、-set、-delete、-nextTick、-watch"><a href="#四、-set、-delete、-nextTick、-watch" class="headerlink" title="四、$set、$delete、$nextTick、$watch"></a>四、$set、$delete、$nextTick、$watch</h2><ul><li><p>$set 给data中的对象属性和数组属性,添加键和值时,设置成相应式对的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">set</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">|</span> Object<span class="token punctuation">,</span> key<span class="token operator">:</span> any<span class="token punctuation">,</span> val<span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Cannot set reactive property on undefined, null, or primitive value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span>target<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 判断target是否是数组</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidArrayIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    target<span class="token punctuation">.</span>length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>length<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    target<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token keyword">return</span> val  <span class="token punctuation">&#125;</span>  <span class="token comment">// target 是对象</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> target <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token keyword">return</span> val  <span class="token punctuation">&#125;</span>  <span class="token comment">// ob 是否是响应式的</span>  <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>__ob__  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>_isVue <span class="token operator">||</span> <span class="token punctuation">(</span>ob <span class="token operator">&amp;&amp;</span> ob<span class="token punctuation">.</span>vmCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token string">'Avoid adding reactive properties to a Vue instance or its root $data '</span> <span class="token operator">+</span>      <span class="token string">'at runtime - declare it upfront in the data option.'</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> val  <span class="token punctuation">&#125;</span>  <span class="token comment">// 当前的target 不是响应式的,则也没有必要给属性添加响应式</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ob<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token keyword">return</span> val  <span class="token punctuation">&#125;</span>  <span class="token comment">// 把 key 设置为响应式属性</span>  <span class="token function">defineReactive</span><span class="token punctuation">(</span>ob<span class="token punctuation">.</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  <span class="token comment">// 发送通知</span>  ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> val<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>$delete 删除对象的属性,且删除属性时,如果是响应式的,会发送通知</p></li><li><p>$watch 用户watcher 监听器</p><ul><li>watcher 分三种<ul><li>computed watcher 计算属性</li><li>watch 用户watcher 监听器</li><li>渲染watcher </li></ul></li><li>调用顺序<ul><li>computed watcher 计算属性</li><li>watch 用户watcher 监听器</li><li>渲染watcher </li></ul></li></ul></li><li><p>$nextTick 异步更新队列, DOM更新完毕,可以执行里面的代码</p></li></ul><h2 id="五、问题"><a href="#五、问题" class="headerlink" title="五、问题"></a>五、问题</h2><h3 id="5-1-vue的不同版本"><a href="#5-1-vue的不同版本" class="headerlink" title="5.1 vue的不同版本"></a>5.1 vue的不同版本</h3><ul><li>vue.js 完整版本,包含了运行时和编译器版本,体积较大</li><li>vue.runtime.js 用来创建vue实例、渲染和处理虚拟dom,体积小,效率高,除去了编译器的代码<ul><li>不能直接对template进行渲染,要将其转换为render函数,才能进行渲染</li><li>vue-cli 使用的就是 vue.runtime.js</li></ul></li><li>esm  使用es6打包工具的版本</li><li>cjs 使用commonjs打包工具的vue版本</li></ul><h3 id="5-2-当vue实例有render和template-执行谁-执行顺序"><a href="#5-2-当vue实例有render和template-执行谁-执行顺序" class="headerlink" title="5.2 当vue实例有render和template 执行谁,执行顺序"></a>5.2 当vue实例有render和template 执行谁,执行顺序</h3><ul><li>当创建vue实例的时候,先执行 index.js中的Vue构造函数,在构造函数中调用Vue._init 方法初始化vue,然后在执行Vue.$mount 把虚拟DOM转化为真实DOM</li><li>当执行$mount时,会进行判断如果有render,直接执行挂载,如果没有render,再去找template, 因此有render会执行render<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$mount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  <span class="token parameter">el<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Component <span class="token punctuation">&#123;</span>  el <span class="token operator">=</span> el <span class="token operator">&amp;&amp;</span> <span class="token function">query</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token comment">/* istanbul ignore if */</span>  <span class="token comment">// el不能是 body 和 html</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token operator">===</span> document<span class="token punctuation">.</span>body <span class="token operator">||</span> el <span class="token operator">===</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Do not mount Vue to &lt;html> or &lt;body> - mount to normal elements instead.</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options  <span class="token comment">// resolve template/el and convert to render function</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// .......</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">mount</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-3-vue-可以挂在到body或者html么"><a href="#5-3-vue-可以挂在到body或者html么" class="headerlink" title="5.3 vue 可以挂在到body或者html么?"></a>5.3 vue 可以挂在到body或者html么?</h3><p>在vue实例挂载执行$mount时,进行了判断,如果el的值是’body’/‘html’,直接会抛出异常</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// el不能是 body 和 html</span><span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token operator">===</span> document<span class="token punctuation">.</span>body <span class="token operator">||</span> el <span class="token operator">===</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Do not mount Vue to &lt;html> or &lt;body> - mount to normal elements instead.</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-数组是否是响应式的？"><a href="#5-4-数组是否是响应式的？" class="headerlink" title="5.4 数组是否是响应式的？"></a>5.4 数组是否是响应式的？</h3><blockquote><p>利用数组中7个(push、pop、splice 、shift、unshift、sort、reverse)可以修改数组的方法,修改这几个方法,将其添加到依赖于数组原型的对象上,然后当触发这些方法的时候,收集依赖,发送更新的通知;<br>因为在数组中并没有遍历数组,对数组的每一个值进行依赖收集,因此不能使用 索引和长度来对数组进行响应式的的处理</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟DOM</title>
      <link href="posts/1675.html"/>
      <url>posts/1675.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Virtual-DOM"><a href="#一、Virtual-DOM" class="headerlink" title="一、Virtual DOM"></a>一、Virtual DOM</h2><h3 id="1-1-Virtual-DOM-是什么"><a href="#1-1-Virtual-DOM-是什么" class="headerlink" title="1.1 Virtual DOM 是什么?"></a>1.1 Virtual DOM 是什么?</h3><p>利用普通的javaScript对象描述真实DOM,这个javaScript对象就是虚拟DOM</p><h3 id="1-2-为什么要使用Virtual-DOM"><a href="#1-2-为什么要使用Virtual-DOM" class="headerlink" title="1.2 为什么要使用Virtual DOM"></a>1.2 为什么要使用Virtual DOM</h3><ul><li>DOM操作比较复杂</li><li>需要兼容各种版本的浏览器</li><li>每进行一次DOM操作,就会重述和回流,性能不好</li></ul><h3 id="1-3-Virtual-DOM的作用"><a href="#1-3-Virtual-DOM的作用" class="headerlink" title="1.3 Virtual DOM的作用"></a>1.3 Virtual DOM的作用</h3><ul><li>维护视图和状态的关系</li><li>对于复杂的视图,可以减少DOM操作</li><li>可以实现服务端渲染SSR、原生应用、小程序登等</li></ul><h3 id="1-4-Virtual-DOM的库"><a href="#1-4-Virtual-DOM的库" class="headerlink" title="1.4 Virtual DOM的库"></a>1.4 Virtual DOM的库</h3><ul><li>snabbdom</li><li>virtual-DOM</li></ul><h2 id="二、snabbdom的基本使用"><a href="#二、snabbdom的基本使用" class="headerlink" title="二、snabbdom的基本使用"></a>二、snabbdom的基本使用</h2><h3 id="2-1-实现一个-hello-world"><a href="#2-1-实现一个-hello-world" class="headerlink" title="2.1 实现一个 hello world"></a>2.1 实现一个 hello world</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * h 但会一个虚拟dom * init 是一个高阶函数  返回patch---对比两个vnode的差异更新到真实dom * thunk 是一种优化策略 */</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'snabbdom/build/package/h'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> init <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'snabbdom/build/package/init'</span><span class="token comment">// 1. 实现hello world</span><span class="token comment">// 初始化patch  对比两个vnode的差异更新到真实dom</span><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">/** * h 函数 * 第一个参数 标签+选择器 * 第二个参数 字符串代表标签的内容 */</span><span class="token keyword">let</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div#contanier.cls'</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment">/** * patch  两个不同时,后者会替换前者 * 第一个参数 可以是真实的dom元素 * 第二个参数 vnode */</span><span class="token keyword">let</span> oldVnode <span class="token operator">=</span> <span class="token function">patch</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'hello snabbdomh'</span><span class="token punctuation">)</span><span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-实现-div内嵌套-div和p"><a href="#2-2-实现-div内嵌套-div和p" class="headerlink" title="2.2 实现 div内嵌套 div和p"></a>2.2 实现 div内嵌套 div和p</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'snabbdom/build/package/h'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> init <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'snabbdom/build/package/init'</span><span class="token keyword">let</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div#container'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token string">'hello H1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'这是一个块元素'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token keyword">let</span> oldVnode <span class="token operator">=</span> <span class="token function">patch</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token comment">// 延时更细 vnode</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div#container'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token string">'hello 8888888'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'这是一个更新的块元素'</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-清空元素"><a href="#2-3-清空元素" class="headerlink" title="2.3 清空元素"></a>2.3 清空元素</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 官方使用 null ----是错误的  Cannot read property 'key' of null</span><span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">// 实际解决方案 h('!') 注释节点</span><span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-模块使用"><a href="#2-4-模块使用" class="headerlink" title="2.4 模块使用"></a>2.4 模块使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'snabbdom/build/package/h'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> init <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'snabbdom/build/package/init'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> styleModule <span class="token punctuation">&#125;</span>  <span class="token keyword">from</span> <span class="token string">'snabbdom/build/package/modules/style'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> eventListenersModule <span class="token punctuation">&#125;</span>  <span class="token keyword">from</span> <span class="token string">'snabbdom/build/package/modules/eventlisteners'</span><span class="token comment">// 初始化时,加载模块</span><span class="token keyword">let</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  styleModule<span class="token punctuation">,</span>  eventListenersModule<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 第二个参数是对象时, 添加的属性</span><span class="token keyword">let</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div#container'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  style<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    backgroundColor<span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>    padding<span class="token operator">:</span><span class="token string">'10px'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  on<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    click<span class="token operator">:</span> eventHandler  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'这是一个p标签'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">eventHandler</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击了div'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token function">patch</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、snabbdom的源码解析"><a href="#三、snabbdom的源码解析" class="headerlink" title="三、snabbdom的源码解析"></a>三、snabbdom的源码解析</h2><ul><li>h() 函数创建js对象描述真实DOM</li><li>init 初始化模块+添加style、eventlistener,并创建patch</li><li>patch 比较新旧两个vnode,并将其的变化更新到真实的DOM上</li></ul><h3 id="3-1-h函数"><a href="#3-1-h函数" class="headerlink" title="3.1 h函数"></a>3.1 h函数</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; vnode, VNode, VNodeData &#125; from &#39;.&#x2F;vnode&#39;import * as is from &#39;.&#x2F;is&#39;export type VNodes &#x3D; VNode[]export type VNodeChildElement &#x3D; VNode | string | number | undefined | nullexport type ArrayOrElement&lt;T&gt; &#x3D; T | T[]export type VNodeChildren &#x3D; ArrayOrElement&lt;VNodeChildElement&gt;function addNS(data: any, children: VNodes | undefined, sel: string | undefined): void &#123;  data.ns &#x3D; &#39;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#39;  if (sel !&#x3D;&#x3D; &#39;foreignObject&#39; &amp;&amp; children !&#x3D;&#x3D; undefined) &#123;    for (let i &#x3D; 0; i &lt; children.length; ++i) &#123;      const childData &#x3D; children[i].data      if (childData !&#x3D;&#x3D; undefined) &#123;        addNS(childData, (children[i] as VNode).children as VNodes, children[i].sel)      &#125;    &#125;  &#125;&#125;&#x2F;&#x2F; h 函数的重载export function h(sel: string): VNodeexport function h(sel: string, data: VNodeData | null): VNodeexport function h(sel: string, children: VNodeChildren): VNodeexport function h(sel: string, data: VNodeData | null, children: VNodeChildren): VNodeexport function h(sel: any, b?: any, c?: any): VNode &#123;  var data: VNodeData &#x3D; &#123;&#125;  var children: any  var text: any  var i: number  &#x2F;&#x2F; 说明穿了 三个参数  if (c !&#x3D;&#x3D; undefined) &#123;    &#x2F;&#x2F; b 不为空时,data 是vnode的属性和状态    if (b !&#x3D;&#x3D; null) &#123; data &#x3D; b &#125;    &#x2F;&#x2F; c 是子元素    if (is.array(c)) &#123;      children &#x3D; c    &#x2F;&#x2F; c是文本或者是数字     &#125; else if (is.primitive(c)) &#123;      text &#x3D; c    &#x2F;&#x2F; c 是一个vnode    &#125; else if (c &amp;&amp; c.sel) &#123;      children &#x3D; [c]    &#125;  &#x2F;&#x2F; 两个参数  &#125; else if (b !&#x3D;&#x3D; undefined &amp;&amp; b !&#x3D;&#x3D; null) &#123;    if (is.array(b)) &#123;      children &#x3D; b    &#125; else if (is.primitive(b)) &#123;      text &#x3D; b    &#125; else if (b &amp;&amp; b.sel) &#123;      children &#x3D; [b]    &#125; else &#123; data &#x3D; b &#125;  &#125;  &#x2F;&#x2F; 如果children 存在,遍历children 并创建vnode节点  if (children !&#x3D;&#x3D; undefined) &#123;    for (i &#x3D; 0; i &lt; children.length; ++i) &#123;      &#x2F;&#x2F; 判断 children是不是 string&#x2F;number,  创建文本节点      if (is.primitive(children[i])) children[i] &#x3D; vnode(undefined, undefined, undefined, children[i], undefined)    &#125;  &#125;  &#x2F;&#x2F; 判断是不是 svg  if (    sel[0] &#x3D;&#x3D;&#x3D; &#39;s&#39; &amp;&amp; sel[1] &#x3D;&#x3D;&#x3D; &#39;v&#39; &amp;&amp; sel[2] &#x3D;&#x3D;&#x3D; &#39;g&#39; &amp;&amp;    (sel.length &#x3D;&#x3D;&#x3D; 3 || sel[3] &#x3D;&#x3D;&#x3D; &#39;.&#39; || sel[3] &#x3D;&#x3D;&#x3D; &#39;#&#39;)  ) &#123;    &#x2F;&#x2F; 如果是 svg 添加命名空间    addNS(data, children, sel)  &#125;  &#x2F;&#x2F; 返回 vnode 创建虚拟节点  return vnode(sel, data, children, text, undefined)&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>vnode <pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; VNode 接口 约束所有使用的对象都拥有这些属性export interface VNode &#123;  &#x2F;&#x2F; 标签+选择器  sel: string | undefined  &#x2F;&#x2F; 样式&#x2F;事件&#x2F;属性  data: VNodeData | undefined  &#x2F;&#x2F; 子节点 和text 文本节点 只能有一个  children: Array&lt;VNode | string&gt; | undefined  &#x2F;&#x2F; 保存 vnode最后生成的真实dom  elm: Node | undefined  &#x2F;&#x2F; 文本节点  text: string | undefined  &#x2F;&#x2F; 优化  key: Key | undefined&#125;&#x2F;&#x2F; 定义属性&#x2F;样式&#x2F;事件 的接口export interface VNodeData &#123;  props?: Props  attrs?: Attrs  class?: Classes  style?: VNodeStyle  dataset?: Dataset  on?: On  hero?: Hero  attachData?: AttachData  hook?: Hooks  key?: Key  ns?: string &#x2F;&#x2F; for SVGs  fn?: () &#x3D;&gt; VNode &#x2F;&#x2F; for thunks  args?: any[] &#x2F;&#x2F; for thunks  [key: string]: any &#x2F;&#x2F; for any other 3rd party module&#125;export function vnode (sel: string | undefined,  data: any | undefined,  children: Array&lt;VNode | string&gt; | undefined,  text: string | undefined,  elm: Element | Text | undefined): VNode &#123;  &#x2F;&#x2F; 如果 data中有key,将设置 key的值  const key &#x3D; data &#x3D;&#x3D;&#x3D; undefined ? undefined : data.key  return &#123; sel, data, children, text, elm, key &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue响应式原理</title>
      <link href="posts/e9c3.html"/>
      <url>posts/e9c3.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ul><li><p>数据驱动</p><ul><li> 数据响应式: 数据改变,视图更新,并且避免了DOM操作</li><li> 双向绑定: 数据改变,视图更新;视图改变,数据也随之更新</li><li> 数据驱动: 只要关心数据,没必要关心页面如何渲染</li></ul></li><li><p>响应式的核心原理</p><ul><li> Object.defineProperty<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 模拟vue中的data</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  msg<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">&#125;</span><span class="token comment">// 模拟vue实例</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// es5 数据劫持</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 可枚举</span>  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 可配置 删除和修改</span>  configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment">// 访问器属性</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当访问vue.msg时,返回data.msg中的数据</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get  :'</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span>msg  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 设置器属性</span>  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span> data<span class="token punctuation">.</span>msg <span class="token operator">===</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set  :'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span>msg <span class="token operator">=</span> newValue    <span class="token comment">// id 为app的可以自动拿到</span>    app<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>msg  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li> proxy 不需要遍历,就可以实现多属性<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 模拟vue中的data</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  msg<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">&#125;</span><span class="token comment">// 模拟vue实例</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 执行代理的函数</span>  <span class="token comment">// 当访问 vm 会执行 </span>  <span class="token comment">// target 指的是 data</span>  <span class="token function">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get : '</span><span class="token punctuation">,</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 修改 vm的 属性时会触发</span>  <span class="token function">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>     <span class="token punctuation">&#125;</span>     target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue    app<span class="token punctuation">.</span>innerText <span class="token operator">=</span>   target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>发布订阅模式和观察者模式</p><ul><li><p>发布订阅模式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建一个没有原型的对象, 实践中心</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 注册事件 往事件中心添加事件</span>  <span class="token function">$on</span> <span class="token punctuation">(</span><span class="token parameter">eventType<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>   <span class="token comment">// 触发事件 触发事件中心的事件</span>  <span class="token function">$emit</span> <span class="token punctuation">(</span><span class="token parameter">eventType</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">handler</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>           <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>观察者模式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 发布者 </span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 记录所有的订阅者</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 添加 订阅者</span>  <span class="token function">addSub</span> <span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sub <span class="token operator">&amp;&amp;</span> sub<span class="token punctuation">.</span>update<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 通知订阅者 更新</span>  <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">sub</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 观察者-订阅者</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">&#123;</span>  <span class="token function">update</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'update555'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">let</span> dep <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>两者区别</p><ul><li>发布订阅模式 发布者发布事件添加到事件中心,订阅者订阅事件中心的事件,如果有触发事件,没有则等待,两者之间有一个事件中心,互不影响 </li><li>观察者模式 观察者订阅发布者,发布者触发通知事件,观察者更新, 两者相互影响</li></ul></li></ul></li></ul><h2 id="二、-模拟vue的-响应式原理"><a href="#二、-模拟vue的-响应式原理" class="headerlink" title="二、 模拟vue的 响应式原理"></a>二、 模拟vue的 响应式原理</h2><p><img src="http://qiniu.xiner.work/blog/vue_code01.png"></p><h3 id="2-1-实现-vue"><a href="#2-1-实现-vue" class="headerlink" title="2.1 实现 vue"></a>2.1 实现 vue</h3><ul><li>通过属性保存选项的数据</li><li>把data中的数据转换成 getter 和 setter, 注入到 vue 实例</li><li>通过observer对象,监听数据的变化</li><li>通过 compiler对象,解析指令和表达式</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Vue</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 通过属性保存选项的数据</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 保存data中的数据</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token operator">=</span> options<span class="token punctuation">.</span>data    <span class="token comment">// 拿到当前的 dom对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$el <span class="token operator">=</span> <span class="token keyword">typeof</span> options<span class="token punctuation">.</span>el <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token operator">:</span> options<span class="token punctuation">.</span>el    <span class="token comment">// 2. 把data中的数据转换成 getter 和 setter, 注入到 vue 实例</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_proxyData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>    <span class="token comment">// 3. 通过observer对象,监听数据的变化</span>    <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>    <span class="token comment">// 4. 通过 compiler对象,解析指令和表达式</span>    <span class="token keyword">new</span> <span class="token class-name">Compiler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">_proxyData</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历data中的所有属性 并注入到vue中 可以通过 vm.msg 访问到</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">set</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span>           <span class="token punctuation">&#125;</span>          data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-observer"><a href="#2-2-observer" class="headerlink" title="2.2 observer"></a>2.2 observer</h3><ul><li>把data中的属性转换成响应式的数据</li><li>当data的属性是对象时,也转化成响应式的属性</li><li>数据改变时,通知发布者</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">walk</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1.判断data是否是对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">!=</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 2.遍历 data对象</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// </span>  <span class="token function">defineReactive</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 属性为对象时,也转化成响应式的</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// obj[key]相当于调用了 obj[key],会造成死循环,因此要使用 val</span>        <span class="token comment">// 形成了闭包，所以能访问到</span>        <span class="token comment">// 收集依赖</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span>        <span class="token keyword">return</span>  val      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span> <span class="token punctuation">(</span>newval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> newval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span>         <span class="token punctuation">&#125;</span>        val <span class="token operator">=</span> newval        <span class="token comment">// 新赋值的newval 为对象时, this指向变了,因此使用that 替换一下</span>        that<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>newval<span class="token punctuation">)</span>        <span class="token comment">// 发送通知</span>        dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-compiler"><a href="#2-3-compiler" class="headerlink" title="2.3 compiler"></a>2.3 compiler</h3><ul><li>编译模板,解析指令、插值表达式</li><li>负责页面的首次渲染</li><li>当数据变化后重新渲染视图</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Compiler</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">vm</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> vm<span class="token punctuation">.</span>$el    <span class="token comment">// 初始化视图</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 编译模板</span>  <span class="token function">compile</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> childNodes <span class="token operator">=</span> el<span class="token punctuation">.</span>childNodes    Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">node</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 处理文本节点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isTextNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compileText</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>      <span class="token comment">// 处理元素节点 </span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isElementNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compileElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 判断node节点是否有子节点,有子节点 递归调用子节点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 编译元素节点, 处理指令</span>  <span class="token function">compileElement</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">attr</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 拿到属性的值</span>      <span class="token keyword">let</span> key <span class="token operator">=</span> attr<span class="token punctuation">.</span>value      <span class="token comment">// 判断是否是指令</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isDirective</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> attrName <span class="token operator">=</span> attr<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> key<span class="token punctuation">,</span> attrName<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 属性指令的更新函数</span>  <span class="token function">update</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key<span class="token punctuation">,</span> attrName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> updateFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>attrName <span class="token operator">+</span> <span class="token string">'Updater'</span><span class="token punctuation">]</span>    <span class="token comment">// 改变 this指向 compiler </span>    updateFn <span class="token operator">&amp;&amp;</span> <span class="token function">updateFn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// v-text 的更新函数</span>  <span class="token function">textUpdater</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> value    <span class="token comment">// 创建 watcher 当数据改变改变试图</span>    <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newValue    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// v-model 的更新函数</span>  <span class="token function">modelUpdater</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span>value <span class="token operator">=</span> value     <span class="token comment">// 创建 watcher 当数据改变改变试图</span>     <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      node<span class="token punctuation">.</span>value <span class="token operator">=</span> newValue    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//双向绑定</span>    node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>value    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 编译文本节点,处理插值表达式</span>  <span class="token function">compileText</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断是否是插值表达式</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\&#123;\&#123;(.+?)\&#125;\&#125;</span><span class="token regex-delimiter">/</span></span>    <span class="token comment">// 拿到node的值 </span>    <span class="token keyword">let</span> value <span class="token operator">=</span> node<span class="token punctuation">.</span>nodeValue    <span class="token keyword">if</span> <span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 拿到匹配的并将去除前后空格</span>      <span class="token keyword">let</span> key <span class="token operator">=</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 替换text中的 值</span>      <span class="token comment">// replace 第一个参数是正则时,是匹配的参数</span>      node<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">// 创建 watcher 当数据改变改变试图</span>      <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> newValue      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 判断元素的属性是否为指令</span>  <span class="token function">isDirective</span> <span class="token punctuation">(</span><span class="token parameter">attrName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> attrName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'v-'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 判断节点 是否是文本</span>  <span class="token function">isTextNode</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">3</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 判断节点是否是元素节点</span>  <span class="token function">isElementNode</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-dep-发布者"><a href="#2-4-dep-发布者" class="headerlink" title="2.4 dep 发布者"></a>2.4 dep 发布者</h3><ul><li>在observer的get中收集依赖,添加观察者 </li><li>在set中通知所有观察者</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 存储所有的观察者</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 添加观察者</span>  <span class="token function">addSub</span> <span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sub <span class="token operator">&amp;&amp;</span> sub<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 发送通知</span>  <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">sub</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>      sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-watcher-订阅者-更新视图"><a href="#2-5-watcher-订阅者-更新视图" class="headerlink" title="2.5 watcher 订阅者 更新视图"></a>2.5 watcher 订阅者 更新视图</h3><ul><li>更新视图</li><li>讲自身添加到dep对象中</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> key <span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm    <span class="token comment">// data 中的属性名</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key    <span class="token comment">// 回调函数 负责更新视图</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb    <span class="token comment">// 把watcher 记录到dep类的静态属性target属性</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment">// 触发get 方法, 在get方法中调用addSub vm[key]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>oldValue <span class="token operator">=</span> vm<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token comment">// 滞空 防止重复添加</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 当数据发生变化时,更新视图</span>  <span class="token function">update</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> newValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oldValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 执行回调函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router 实现</title>
      <link href="posts/9548.html"/>
      <url>posts/9548.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、hash-和-history区别"><a href="#一、hash-和-history区别" class="headerlink" title="一、hash 和 history区别"></a>一、hash 和 history区别</h2><ul><li><p>hash 模式</p><ul><li>url#后面的内容是路由地址;</li><li>通过location改变路由地址,并将其写入到浏览器的访问历史;</li><li>当url发生变化时,通过hashchange 事件监听路由变化,并根据路由地址找到对应的组件重新渲染</li></ul></li><li><p>history 模式</p><ul><li>通过history.pushState 和push.replaceState 改变路由地址,并记录到浏览器历史,但不会向浏览器发送请求;</li><li>popstate事件并不会因为 pushState和replaceState触发,而是通过浏览器的前进和后退触发，history.back 和history.forword;</li><li>地址改变后,通过相应的地址进行渲染</li><li>当页面刷新后，会重新向浏览器发送请求,但浏览器除了index并没有进行其他的配置,则就会返回404,因此需要后台配合一下，设置其他路由时，返回index页面</li></ul></li></ul><h2 id="二、vue-router-实现原理-history"><a href="#二、vue-router-实现原理-history" class="headerlink" title="二、vue-router 实现原理(history)"></a>二、vue-router 实现原理(history)</h2><h5 id="需要用到的vue知识"><a href="#需要用到的vue知识" class="headerlink" title="需要用到的vue知识:"></a>需要用到的vue知识:</h5><ul><li>Vue.use() 调用依赖于vue的插件,注册插件</li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * vue.use 调用插件,接受两个参数 * 函数,内部会执行这个函数 * 对象,执行对象的install方法*/</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mixin 混入</li><li>Vue.observable() 响应式</li><li>slot 插槽</li><li>render 函数,形成虚拟DOM</li><li>运行时的Vue 和完整版的Vue </li></ul><h3 id="实现简单的VueRouter的类"><a href="#实现简单的VueRouter的类" class="headerlink" title="实现简单的VueRouter的类"></a>实现简单的VueRouter的类</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** *  _Vue 注册时,成为vue的全局变量 *  install 判断插件是否安装,并将router实例添加到vue的原型上 *  init 执行方法的综合 *  createRouteMap 实现 建立路径和组建的关系 *  initEvent 创建 popstate事件, 使用户点击前进后退也可以进行响应式的渲染 *  initComponents 创建 router-link router-view 使用render函数*/</span><span class="token keyword">let</span> _Vue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">VueRouter</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 构造函数</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 拿到传过来的参数 routes mode 等等</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$options <span class="token operator">=</span> options    <span class="token comment">// 存储路由地址和组件  键是当前路径  值是组件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>routeMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 当前的路由地址 _Vue.observable() 把数据变成响应式的数据</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> _Vue<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      current<span class="token operator">:</span> <span class="token string">'/'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">static</span> <span class="token function">install</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1.判断插件是否已经安装,未安装----安装</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>VueRouter<span class="token punctuation">.</span>install<span class="token punctuation">.</span>installed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    VueRouter<span class="token punctuation">.</span>install<span class="token punctuation">.</span>installed <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment">// 2.把vue构造函数记录在全局变量</span>    _Vue <span class="token operator">=</span> Vue    <span class="token comment">// 3.把创建的router注入到Vue实例上</span>    <span class="token comment">// 使用 混入给所有的vue组件添加</span>    _Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">beforeCreate</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// this指向的是当前组件</span>          <span class="token class-name">_Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router          <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">init</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createRouteMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initComponents</span><span class="token punctuation">(</span>_Vue<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">createRouteMap</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历所有的路由规则,把路由解析成键值对的形式,储存到routeMap中</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>routeMap<span class="token punctuation">[</span> route<span class="token punctuation">.</span>path <span class="token punctuation">]</span> <span class="token operator">=</span> route<span class="token punctuation">.</span>component    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 点击前进后退键 可以实现相应式</span>  <span class="token function">initEvent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// window.location.pathname 当前url的路径部分</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">initComponents</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 目前支持了,可以实现</span>    <span class="token comment">// Vue.component('router-link', &#123;</span>    <span class="token comment">//   props: &#123;</span>    <span class="token comment">//     to: String</span>    <span class="token comment">//   &#125;,</span>    <span class="token comment">//   template: '&lt;a :href="to">&lt;slot>&lt;/slot>&lt;/a>'</span>    <span class="token comment">// &#125;)</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'router-link'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        to<span class="token operator">:</span> String      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>          attrs<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            href<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          on<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            click<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clickHandler          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">clickHandler</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span>          <span class="token comment">// 改变当前响应式的路由地址</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span>data<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to          <span class="token comment">// 阻止浏览器跳转</span>          e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'router-view'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> component <span class="token operator">=</span> self<span class="token punctuation">.</span>routeMap<span class="token punctuation">[</span> self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>current <span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue面试题</title>
      <link href="posts/bd4e.html"/>
      <url>posts/bd4e.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-简述你对mvvm框架的了解-并说-mvvm-和-mvc-之间的区别"><a href="#1-简述你对mvvm框架的了解-并说-mvvm-和-mvc-之间的区别" class="headerlink" title="1. 简述你对mvvm框架的了解,并说 mvvm 和 mvc 之间的区别"></a>1. 简述你对mvvm框架的了解,并说 mvvm 和 mvc 之间的区别</h3><ul><li>MVVM<br>MVVM框架分为Model(模型)-view(视图)-viewModel,当模型中的数据发生变化时,viewModel能够监听数据的变化,然后通知视图进行自动更新;而当用户操作视图时,viewModel也能监听到视图的变化,通知数据变化,这就实现了数据的双向绑定</li><li>MVC<br>MVC框架分为Model(模型)-view(视图)-controller(控制器).view是指用户可以看到并与之交互的页面,Model是指业务规则,controller是指接受用户的输入并决定用哪一个Model去处理请求并确定用哪个view去显示返回的数据</li><li>两者的区别和优缺点:<ul><li>MVVM的优点:减少了DOM操作,实现了数据的双向绑定</li><li>MVVM的缺点:代码不能重用</li><li>MVC的优点:有利于工程化管理,可维护性高,耦合性低(相互之间依赖较少)</li><li>MVC的缺点:系统比较复杂;视图过分依赖控制器,因此视图不能单独应用;不适合中小型项目;视图对模型数据的低效率访问</li></ul></li></ul><h3 id="2-谈谈你对Vue2-x的响应式数据原理"><a href="#2-谈谈你对Vue2-x的响应式数据原理" class="headerlink" title="2. 谈谈你对Vue2.x的响应式数据原理"></a>2. 谈谈你对Vue2.x的响应式数据原理</h3><ul><li>当创建Vue实例的时候,将Vue实例中的data数据传送给Observer,在Observer中判断其数据类型<ul><li>如果是对象,使用Object.difineProperty对属性进行监听,并在get方法里创建 Dep对象,每一个属性对应一个,同时调用addSub方法添加订阅者</li><li>如果是数组,修改数组原型上7更改数组的方法(push、pop、shift、unshift、splice、sort、reverse),并通过Object.defineProperty进行重新定义</li></ul></li><li>同时Vue实例将el模板传送给compiler,解析模板中的指令,为每一个指令添加一个watcher,每一个指令都对应属性中的Dep对象,并初始化渲染视图</li><li>当数据改变了,Observer会监听数据发生了变化,就会在set方法里调用Dep.notify方法通知watcher,watcher会调用自身的update方法更新视图</li></ul><h3 id="3-谈谈你对Vue3-x的响应式数据原理"><a href="#3-谈谈你对Vue3-x的响应式数据原理" class="headerlink" title="3. 谈谈你对Vue3.x的响应式数据原理"></a>3. 谈谈你对Vue3.x的响应式数据原理</h3><ul><li><p>Vue3.x使用了proxy代替了Object.defineProperty监听对象和数组的变化,如果是嵌套对象,会递归调用reactive</p></li><li><p>proxy指挥判断对象的第一层,那么Vue3是怎么处理这个问题的呢？<br>判断当前的Reflect.get 的返回值是否为Object,如果是则再通过reactive方法做代理,这样就可以了</p></li><li><p>检测数组的时候如何避免多次get/set<br>判断当前属性是否为当前代理对象target的自身属性,或者可以判断旧值和新值是否相等,两个满足一个即可</p></li></ul><h3 id="4-proxy-和-Object-defineProperty-的优缺点"><a href="#4-proxy-和-Object-defineProperty-的优缺点" class="headerlink" title="4. proxy 和 Object.defineProperty 的优缺点"></a>4. proxy 和 Object.defineProperty 的优缺点</h3><ul><li>proxy <ul><li>可以监听属性的增删操作</li><li>监听数组中索引值的变化以及数组长度的变化</li><li>返回一个对象,可以直接进行一些操作</li><li>es6新增的方法,兼容性不是很好</li></ul></li><li>Obejct<ul><li>相比proxy兼容性好</li></ul></li></ul><h3 id="5-nextTick的实现原理"><a href="#5-nextTick的实现原理" class="headerlink" title="5.nextTick的实现原理"></a>5.nextTick的实现原理</h3><p>Vue更新DOM操作是异步更新的,只要监听数据变化,Vue将开启一个队列,并在事件循环中将发生的所有数据变更.(会对watcher进行去重,防止多次更新,消耗性能) 异步队列使用Promsie.then、MutationObserver、setImmediate,不支持采用setTimeout(fn,0)</p><h3 id="6-vue-的生命周期"><a href="#6-vue-的生命周期" class="headerlink" title="6. vue 的生命周期"></a>6. vue 的生命周期</h3><ul><li>beforeCreate<br>data、methods、props还没有初始化</li><li>created<br>data、methods、props、watch已经初始化完成,$el还未挂载</li><li>beforeMount 不允许在服务端渲染<br>$el 还没有挂载,已经生成了虚拟DOM</li><li>mounted 不允许在服务端渲染<br>实例已经挂载,只能保证自己已经挂载,不能保证所有的子组件都挂载了</li><li>beforeUpdate 不允许在服务端渲染<br>数据更新时调用,适合访问现有的DOM</li><li>updated  不允许在服务端渲染<br>数据已经改变,DOM 已经更新</li><li>beforeDestory 不允许在服务端渲染<br>实例销毁之前,实例可以使用</li><li>destroyed 不允许在服务端渲染<br>实例已经销毁,用于移除延时器</li><li>activated<br>keep-alive缓存的组件激活时触发</li><li>deactivated<br>keep-alive缓存的组件停用时触发</li></ul><h3 id="7-computed-和-watch"><a href="#7-computed-和-watch" class="headerlink" title="7.  computed 和 watch"></a>7.  computed 和 watch</h3><ul><li>computed 计算属性<br>计算属性是根据其他变量计算出来的一个属性,当依赖的变量没有发生变化时,会立即返回结果,有缓存,不可以是异步的,将复杂的逻辑放入到计算属性处理</li><li>watch 监听器(unwatch 注销)<br>监听某一个数据,可以设置深度监听,页面加载立即监听等,用于当一个值改变时,我们需要进行一些列操作,可以是异步的</li></ul><h3 id="8-v-if-和-v-show"><a href="#8-v-if-和-v-show" class="headerlink" title="8. v-if 和 v-show"></a>8. v-if 和 v-show</h3><ul><li>v-if<ul><li>条件不成立时,不会渲染</li></ul></li><li>v-show  <ul><li>依据 css的display：none/block 进行切换页面的显示和隐藏,一定会渲染,因此对于一定会渲染的使用 v-show,否则建议使用 v-if</li></ul></li></ul><h3 id="9-说一下-v-model-的原理"><a href="#9-说一下-v-model-的原理" class="headerlink" title="9. 说一下 v-model 的原理"></a>9. 说一下 v-model 的原理</h3><ul><li>输入框<br>v-model 指的是 :value=”msg”  @input=”msg = $event.target.value”</li><li>多选框<br>v-model 指的是 :value=”msg”  @input=”msg = $event.target.checked”</li></ul><h3 id="10-组件中的data为什么是一个函数"><a href="#10-组件中的data为什么是一个函数" class="headerlink" title="10. 组件中的data为什么是一个函数"></a>10. 组件中的data为什么是一个函数</h3><p>data是对象的话,所有调用当前组件的地方,将会共用一个data;data是函数的话,每次调用都会返回一个新的对象,相互之间不影响</p><h3 id="11-事件绑定原理"><a href="#11-事件绑定原理" class="headerlink" title="11. 事件绑定原理"></a>11. 事件绑定原理</h3><ul><li>自身<br>对于自身的绑定事件,使用 addEventListener 绑定到真是的 DOM 上</li><li>组件<br>组件的事件绑定是由$on实现的,必须有$emit才可以触发</li></ul><h3 id="12-vue的模板编译原理"><a href="#12-vue的模板编译原理" class="headerlink" title="12. vue的模板编译原理"></a>12. vue的模板编译原理</h3><ul><li>把模字符串转换为渲染函数<ul><li>首先把模板转化为ast对象(抽象语法树),然后优化ast对象,优化的过程就是标记静态根节点</li><li>把优化好的ast对象转化成字符串形式代码</li><li>最终通过 new Function 将字符串形式的代码转化成匿名函数,也就是最终生成的 render函数</li></ul></li></ul><h3 id="13-虚拟-DOM-和-使用key的好处"><a href="#13-虚拟-DOM-和-使用key的好处" class="headerlink" title="13. 虚拟 DOM 和 使用key的好处"></a>13. 虚拟 DOM 和 使用key的好处</h3><ul><li><p>虚拟 DOM<br>是 javaScript 对象,用对象的属性(tag、attrs、children)来描述节点,是对真实DOM的抽象,最终将虚拟DOM转化为真实DOM渲染到页面上</p></li><li><p>使用key的好处<br>尽可能的复用DOM,因为当key值相等时,顺序不同时,只需要移动元素,而不是直接创建新的DOM,避免了更多的DOM操作</p></li></ul><h3 id="14-diff-算法"><a href="#14-diff-算法" class="headerlink" title="14. diff 算法"></a>14. diff 算法</h3><p> Vue的diff 算法主要是通过patchVnode方法来比较新旧虚拟DOM,再以新虚拟DOM为标准,将旧虚拟DOM进行改动,完成对应的DOM渲染<br>Vnode 和 oldVnode</p><ul><li>执行流程</li><li>比较 Vnode 和 oldVnode 是否完全一样,一样,则返回</li><li>比较 Vnode 和 oldVnode 是否是静态节点,是,则返回</li><li>Vnode 是文本节点<br>判断Vnode 和 oldVnode的text的不同,使用vnode的text替代oldVnode的节点</li><li>Vnode不是文本节点<ul><li>oldVnode 是文本节点,清空oldVnode文本</li><li>只有oldVnode有children,清空oldVnode</li><li>只有Vnode有children,清空oldVnode,插入Vnode的children到oldVnode</li><li>两个都有children,定义4个变量下标<ul><li>跳过undefined</li><li>快捷查找<ul><li>旧开始和新开始 – 如果匹配,递归调用patchVnode,并将新旧开始下标++</li><li>旧结束和新结束 – 如果匹配,递归调用patchVnode,并将新旧结束下标–</li><li>旧开始和新结束 – 如果匹配,递归调用patchVnode,把新结束插到当前的最后一位,并将旧开始++,新结束–</li><li>旧结束和新开始 – 如果匹配,递归调用patchVnode,把新结束插到当前的第一位,并将旧结束–,新开始++</li></ul></li><li>key值查找<ul><li>key值匹配 – 移动节点位置</li><li>key值不匹配 – 创建插入DOM,并将++start</li></ul></li></ul></li></ul></li></ul><h3 id="15-keep-alive"><a href="#15-keep-alive" class="headerlink" title="15.keep-alive"></a>15.keep-alive</h3><p>作用是实现组件的缓存,当组件切换时,不会对组件进行卸载</p><ul><li>属性 include/exclude 设置当前组件是否需要缓存</li><li>生命周期 activated/deactivated 组件被激活/停用 会触发</li></ul><h3 id="16-Vue生命周期的调用顺序"><a href="#16-Vue生命周期的调用顺序" class="headerlink" title="16. Vue生命周期的调用顺序"></a>16. Vue生命周期的调用顺序</h3><p>组件的调用是先调用父组件,再调用子组件,子组件会先渲染完成,父组件后渲染完成<br>组件的销毁过程也是先父组件计划销毁,然后子组件销毁,最后父组件销毁完毕</p><ul><li>调用<ul><li>父 beforeCreate—- 父created —- 父 beforeMount—-子beforeCreate—-子created—-子beforeMount—-子 mounted-父mounted</li></ul></li><li>渲染<ul><li>父 beforeUpdate —- 子 beforeUpdate —- 子 updated —- 父 updated</li></ul></li><li>销毁<ul><li>父 beforeDestory —- 子 beforeDestory —- 子 destoryed — 父 destoryed</li></ul></li></ul><h3 id="17-vue组件通信"><a href="#17-vue组件通信" class="headerlink" title="17. vue组件通信"></a>17. vue组件通信</h3><ul><li>父传子通过 props 属性</li><li>子串父 $emit 方法 </li><li>$emit/$on 跨级,发布订阅者模式</li><li>vuex<ul><li>state</li><li>mutation<ul><li>只能同步操作</li></ul></li><li>action<ul><li>通过dispatch进行触发</li><li>执行commit来触发mutation,间接更新 state</li></ul></li><li>持久化<ul><li>数据更新的时候,把数据copy一份到localStorage,页面刷新后,再从localStorage取数据</li></ul></li></ul></li><li>$attrs/$listeners<ul><li>组件标签内,绑定的属性,会添加到根属性上, 设置 inheritAttrs: false 就不会继承</li><li>$ attrs 可以拿到绑定了未注册的属性</li></ul></li><li>povide/inject<ul><li>祖先使用 provide注入,为后代都添加属性和方法</li><li>子孙使用inject,进行接收,但是不是响应式的</li></ul></li></ul><h3 id="18-ssr-了解么"><a href="#18-ssr-了解么" class="headerlink" title="18. ssr 了解么"></a>18. ssr 了解么</h3><p>为了解决首屏渲染时间太长,解决单页面应用能更好的进行seo</p><h3 id="19-vue的性能优化"><a href="#19-vue的性能优化" class="headerlink" title="19.vue的性能优化"></a>19.vue的性能优化</h3><ul><li>编码优化<ul><li>减少data中的属性(减少setter、getter)</li><li>采用keep-alive 对组件进行缓存</li><li>v-if和v-for不能连用</li><li>尽量用v-if 代替 v-show</li><li>使用路由懒加载,异步组件</li><li>第三方组件按需导入</li><li>图片懒加载  vue-lazyload</li><li>防抖、节流</li></ul></li><li>打包优化<ul><li>tree shaking</li><li>代码压缩</li><li>抽离公共组件</li><li>sourceMap优化</li></ul></li><li>seo优化<ul><li>预渲染</li><li>服务端渲染</li></ul></li></ul><h3 id="20-hash路由和history路由原理了解么"><a href="#20-hash路由和history路由原理了解么" class="headerlink" title="20.hash路由和history路由原理了解么"></a>20.hash路由和history路由原理了解么</h3><ul><li>hash<br>使用的是 location</li><li>history<br>使用的是H5新增的history.pushState、replaceState</li></ul>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js面试题</title>
      <link href="posts/9482.html"/>
      <url>posts/9482.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><h3 id="1-1-js中的数据类型以及是如何存储的"><a href="#1-1-js中的数据类型以及是如何存储的" class="headerlink" title="1.1 js中的数据类型以及是如何存储的?"></a>1.1 js中的数据类型以及是如何存储的?</h3><blockquote><p>javaScript 一共有8中数据类型,其中基本数据类型有: null、undefined、boolean、number、string、bigint、symbol;<br>还有一个引用数据类型 object(function、array、Date等)<br>基本数据类型保存在栈中,占用空间小,大小固定<br>引用数据类型保存在栈和堆中，占用空间大,大小不固定,其中引用数据类型的键存放在栈中,栈中的指针指向堆,堆中储存了键所对应的值</p></blockquote><h3 id="1-2-如何判断数据类型"><a href="#1-2-如何判断数据类型" class="headerlink" title="1.2 如何判断数据类型"></a>1.2 如何判断数据类型</h3><ul><li><p>typeof<br>除了null会返回object以外,其他都是对的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object  false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// numbers</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>instanceof</p><ul><li>根据原型链去找类型的prototype</li><li>instanceof 的右边只能是一个对象</li><li>主要是用来判断对象的数据类型</li><li>对于基本数据类型,只有通过 new 创建的才能判断<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false     </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  </span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'11111'</span><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'22222'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false      </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1 <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true  </span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">instanceof</span>  <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>constructor</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true     </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true     </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错  Cannot read property 'constructor' of undefined </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错   Cannot read property 'constructor' of null </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span><span class="token keyword">function</span> <span class="token function">Fnc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Fnc</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Fnc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fnc</span><span class="token punctuation">(</span><span class="token number">22222</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当改变了构造函数的原型时,对应实例的constructor也会改变</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Object.prototype.toSting.call() 最完美的判断数据类型的方法<br>Object.prototype.toSting 返回一个对象的字符串,也就是对对象的描述 [object object]</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 如果只传一个参数则返回参数类型 * 如果传两个参数，则判断是否是传入类型 * @param &#123;String&#125; type 需要判断的类型 * @param &#123;*&#125; data 需要检测的对象 */</span><span class="token keyword">function</span> <span class="token function">checkType</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>data <span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>  <span class="token keyword">return</span>  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[object </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">checkType</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">checkType</span><span class="token punctuation">(</span><span class="token string">'Array'</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="二、作用域和作用域链"><a href="#二、作用域和作用域链" class="headerlink" title="二、作用域和作用域链"></a>二、作用域和作用域链</h2><h3 id="2-1-谈谈你对作用域和作用域链的了解"><a href="#2-1-谈谈你对作用域和作用域链的了解" class="headerlink" title="2.1 谈谈你对作用域和作用域链的了解"></a>2.1 谈谈你对作用域和作用域链的了解</h3><blockquote><p>作用域是变量声明的时候,产生的区域,使用 var 声明的变量,一般情况下是全局变量,在全局都可以访问,而使用 let 和 const声明的变量具有块级作用域,只能在当前块级作用内访问<br>作用域链 通过作用域链,函数内可以访问到全局变量和父级的变量</p></blockquote><h3 id="2-2-谈谈你对this的理解-以及各种环境下的this"><a href="#2-2-谈谈你对this的理解-以及各种环境下的this" class="headerlink" title="2.2. 谈谈你对this的理解,以及各种环境下的this"></a>2.2. 谈谈你对this的理解,以及各种环境下的this</h3><ul><li>在浏览器里,this 指向的window对象</li><li>在函数中,this 指向调用他的那个对象(箭头函数除外)</li><li>在构造函数中,this 指向的是通过构造函数创建的实例</li><li>箭头函数中没有this,this指向的是父级作用中的this</li></ul><h3 id="2-3-原型和原型链"><a href="#2-3-原型和原型链" class="headerlink" title="2.3 原型和原型链"></a>2.3 原型和原型链</h3><blockquote><p>原型: 显示原型:每一个构造函数有的prototype属性; 隐士原型:实例对象有的属性 <strong>proto</strong> ; 且实例对象的__proto__指向他构造函数的原型<br>原型链: 当访问实例对象的属性时,若当前的对象中没有该属性,会在其 <strong>proto</strong> 的值中去查找,也就是构造函数的prototype属性,若还没有,会继续向上查找构造函数的prototype属性的__proto__的值中是否拥有,若果没有会继续向上查找,直到返回的值是null,结束</p></blockquote><h2 id="三、-闭包"><a href="#三、-闭包" class="headerlink" title="三、 闭包"></a>三、 闭包</h2><ul><li>定义<ul><li>闭包指有权访问另一个函数作用域内变量的函数,即函数中嵌套函数</li></ul></li><li>作用<ul><li>创建私有变量</li><li>函数内返回一个函数</li><li>函数节流和防抖</li><li>延长变量的生命周期</li></ul></li></ul><h2 id="四、事件模型"><a href="#四、事件模型" class="headerlink" title="四、事件模型"></a>四、事件模型</h2><p>浏览器的事件模型一共有3种:</p><ul><li>DOM0级模型 —没有事件流,不会传播</li><li>IE事件模型 —分为两个过程,事件处理阶段和事件冒泡阶段<ul><li>先执行绑定的事件,然后是冒泡阶段,事件从自身-&gt;父元素-&gt;body-&gt;html-&gt;document-&gt;window</li></ul></li><li>DOM2级事件模型 —分为3个过程,事件处理阶段、事件冒泡阶段和事件捕获阶段<ul><li>先跟IE事件模型一样,然后执行捕获,捕获是先从window-&gt;document-&gt;html-&gt;body-&gt;父元素-&gt;自身</li></ul></li></ul><h2 id="五、常用的event对象"><a href="#五、常用的event对象" class="headerlink" title="五、常用的event对象"></a>五、常用的event对象</h2><ul><li>event.preventDefault   阻止默认事件</li><li>event.stopPropagation  阻止冒泡</li></ul><h2 id="六、异步编程"><a href="#六、异步编程" class="headerlink" title="六、异步编程"></a>六、异步编程</h2><h3 id="6-1-什么是异步编程"><a href="#6-1-什么是异步编程" class="headerlink" title="6.1 什么是异步编程?"></a>6.1 什么是异步编程?</h3><p>主线程从上到下执行时,遇到异步函数时,会将其放入到工作线程，继续下面的代码，当主线程执行完毕,当工作线程工作完毕时，消息队列会通知主线程,主线程从消息队列的头部取消息,并执行其代码,之后会循环的从消息队列取消息，直到消息队列也为空,执行结束</p><h3 id="6-2-异步编程的几种方案？"><a href="#6-2-异步编程的几种方案？" class="headerlink" title="6.2 异步编程的几种方案？"></a>6.2 异步编程的几种方案？</h3><p>异步编程的7种方案:</p><ul><li>回调函数</li><li>事件监听</li><li>发布/订阅</li><li>promise</li><li>Generator</li><li>Async/Await</li></ul><h3 id="6-3-微任务和宏任务"><a href="#6-3-微任务和宏任务" class="headerlink" title="6.3 微任务和宏任务"></a>6.3 微任务和宏任务</h3><ul><li><p>微任务</p></li><li><p>宏任务</p></li></ul><h3 id="6-4-js的事件循环机制-和-消息队列"><a href="#6-4-js的事件循环机制-和-消息队列" class="headerlink" title="6.4 js的事件循环机制 和 消息队列?"></a>6.4 js的事件循环机制 和 消息队列?</h3><h2 id="七、-es6-的新增方法"><a href="#七、-es6-的新增方法" class="headerlink" title="七、 es6+的新增方法"></a>七、 es6+的新增方法</h2><h3 id="7-1-新增了变量声明"><a href="#7-1-新增了变量声明" class="headerlink" title="7.1 新增了变量声明"></a>7.1 新增了变量声明</h3><ul><li>let<ul><li>不存在变量提升</li><li>不允许重新声明</li><li>拥有块级作用域</li></ul></li><li>const<ul><li>不存在变量提升</li><li>不允许重复声明</li><li>拥有块级作用域</li></ul></li></ul><h3 id="7-2-解构赋值"><a href="#7-2-解构赋值" class="headerlink" title="7.2 解构赋值"></a>7.2 解构赋值</h3><ul><li>数组的解构赋值</li><li>对象的解构赋值</li><li>字符串的解构赋值</li></ul><h3 id="7-3-字符串的扩展"><a href="#7-3-字符串的扩展" class="headerlink" title="7.3 字符串的扩展"></a>7.3 字符串的扩展</h3><ul><li>遍历字符串 for … of</li><li>模板字符串 <code>$&#123;&#125;</code></li><li>includes 是否找到参数的字符传—Boolean</li><li>startsWith 是否以什么开头 — Boolean</li><li>endsWith 是否以什么结尾— Boolean</li><li>repeat 将原字符串重复n次,返回一个新的字符串</li><li>padStart 在字符串的开头补全字符串<ul><li>第一个参数: 字符串的长度</li><li>第二个参数: 用什么补全</li></ul></li><li>padEnd 在字符串的末尾补全字符串</li><li>trimStart/trimEnd 过滤头部/尾部多余的空格</li><li>replaceAll <ul><li>第一个参数 替换的值</li><li>第二个参数 用什么替换</li></ul></li><li>replace  修改所有时,要在正则判断后+g</li></ul><h3 id="7-4-数组的扩展"><a href="#7-4-数组的扩展" class="headerlink" title="7.4 数组的扩展"></a>7.4 数组的扩展</h3><ul><li>扩展运算符 将数组展开、复制数组、合并数组、把字符串转化为数组</li><li>Array.from 类似于数组的对象和可遍历的对象转换为数组</li><li>Array.of 将一组值转化为数组</li></ul><h3 id="7-5-函数的扩展"><a href="#7-5-函数的扩展" class="headerlink" title="7.5 函数的扩展"></a>7.5 函数的扩展</h3><ul><li>参数可以设置默认值</li><li>…rest 设置多个参数,代替了arguments</li><li>箭头函数<ul><li>不能作为构造函数、不能使用arguments、不能使用yield</li><li>没有this</li></ul></li></ul><h3 id="7-6-对象的扩展"><a href="#7-6-对象的扩展" class="headerlink" title="7.6 对象的扩展"></a>7.6 对象的扩展</h3><ul><li>扩展运算符 展开对象</li><li>super 在简写的函数中,使用super可以指向当前对象的原型</li><li>?.  链判断运算符 前面存在,执行后面的</li><li>?? null判断运算符</li><li>Object.is()  判断俩个值是否严格相等<ul><li>但是 NAN 与 NAN 相等,是错的</li></ul></li><li>Object.assign() 对象的合并,后者会覆盖前者</li><li>Object.setProtutypeOf() 设置对象的原型</li><li>Object.getPrototypeOf() 获取对象的原型</li><li>Object.keys、Object.values、Object.entries</li></ul><h3 id="7-7-symbol"><a href="#7-7-symbol" class="headerlink" title="7.7 symbol"></a>7.7 symbol</h3><ul><li>为了避免属性名的冲突,引入了symbol</li></ul><h3 id="7-8-set-和-map"><a href="#7-8-set-和-map" class="headerlink" title="7.8 set 和 map"></a>7.8 set 和 map</h3><ul><li>set  成员值唯一,类似于数组<ul><li>add 添加某个值</li><li>delete 删除某个值</li><li>clear 清空</li><li>has 是否有当前值 — Boolean</li></ul></li><li>map 键值对的集合,属性可以是对象<ul><li>size 返回成员的总数</li><li>set 添加属性</li><li>get 获取值</li><li>has 是否有当前值</li><li>delete 删除当前值</li><li>clear 清空map</li></ul></li></ul><h3 id="7-9-proxy"><a href="#7-9-proxy" class="headerlink" title="7.9 proxy"></a>7.9 proxy</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> propKey</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">35</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxy<span class="token punctuation">.</span>time <span class="token comment">// 35</span>proxy<span class="token punctuation">.</span>name <span class="token comment">// 35</span>proxy<span class="token punctuation">.</span>title <span class="token comment">// 35</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>get 拦截对象属性的获取</li><li>set 拦截对象设置属性的设置</li></ul><h3 id="7-10-promise-Generator-Async"><a href="#7-10-promise-Generator-Async" class="headerlink" title="7.10 promise/Generator/Async"></a>7.10 promise/Generator/Async</h3><ul><li>解决地狱回调 </li><li>都时异步编程</li></ul><h3 id="7-11-class"><a href="#7-11-class" class="headerlink" title="7.11 class"></a>7.11 class</h3><ul><li>和构造函数类似</li></ul><h3 id="7-12-module"><a href="#7-12-module" class="headerlink" title="7.12 module"></a>7.12 module</h3><ul><li>import 导入文件</li><li>export 导出对象</li><li>es6 模块 和 commonjs的差异<ul><li>ES module <ul><li>是静态引入,编译时加载</li><li>可以使用 tree-shaking</li><li>输出的值是引用,不能修改</li><li>import() 函数,运行时异步加载</li></ul></li><li>Commonjs <ul><li>是动态引入,执行时加载</li><li>加载的是一个对象</li><li>输出的值是拷贝</li><li>require() 运行时同步加载</li></ul></li></ul></li></ul><h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><h3 id="8-1-函数的柯里化"><a href="#8-1-函数的柯里化" class="headerlink" title="8.1 函数的柯里化"></a>8.1 函数的柯里化</h3><ul><li>定义<ul><li>一种将使用多个参数转化成一些列使用一个参数的技术,返回的是一个函数的函数</li></ul></li><li>作用<ul><li>减少代码的冗余,增加代码的可读性</li><li>延迟计算</li><li>参数复用</li></ul></li><li>缺点<ul><li>存取arguments会占用内存</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>rest</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> _args <span class="token operator">=</span> rest    <span class="token keyword">let</span> <span class="token function-variable function">_return</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        _args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>        <span class="token keyword">return</span> _return    <span class="token punctuation">&#125;</span>    _return<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> _args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a<span class="token operator">+</span>b        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> _return<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="posts/3bd5.html"/>
      <url>posts/3bd5.html</url>
      
        <content type="html"><![CDATA[<h5 id="webpack-是一个模块打包工具-基于nodejs-只支持js和JSON模块"><a href="#webpack-是一个模块打包工具-基于nodejs-只支持js和JSON模块" class="headerlink" title="webpack 是一个模块打包工具,基于nodejs,只支持js和JSON模块"></a>webpack 是一个模块打包工具,基于nodejs,只支持js和JSON模块</h5><h2 id="一、基础的一些配置-entry-mode-output等"><a href="#一、基础的一些配置-entry-mode-output等" class="headerlink" title="一、基础的一些配置(entry,mode,output等)"></a>一、基础的一些配置(entry,mode,output等)</h2><h3 id="1-entry-入口文件的设置"><a href="#1-entry-入口文件的设置" class="headerlink" title="1.entry 入口文件的设置"></a>1.entry 入口文件的设置</h3><ul><li>使用字符串 一个入口,一个出口</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">entry<span class="token operator">:</span><span class="token string">'./src/index.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用数组 可以是多个入口，但是一个出口</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">entry<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'./src/index.js'</span><span class="token punctuation">,</span><span class="token string">'./src/other.js'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用对象 可以是多个入口，多个出口口 (多页面应用)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token comment">// 3个属性名,对应了3个出口文件</span>entry<span class="token operator">:</span><span class="token punctuation">&#123;</span>   main<span class="token operator">:</span><span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  other<span class="token operator">:</span><span class="token string">'./src/other.js'</span><span class="token punctuation">,</span>  others<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'./src/test.js'</span><span class="token punctuation">,</span><span class="token string">'./src/test1.js'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-mode-模块打包的模式"><a href="#2-mode-模块打包的模式" class="headerlink" title="2. mode 模块打包的模式"></a>2. mode 模块打包的模式</h3><h5 id="默认值是-production-生产环境"><a href="#默认值是-production-生产环境" class="headerlink" title="默认值是 production 生产环境"></a>默认值是 production 生产环境</h5><p><img src="http://qiniu.xiner.work/blog/webpack_code.png"></p><h3 id="3-output-出口文件"><a href="#3-output-出口文件" class="headerlink" title="3. output 出口文件"></a>3. output 出口文件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">output<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token comment">//生成的出口问件 目录,绝对路径</span>  path<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//  构建的文件</span>  <span class="token comment">// 1.一个 出口文件 使用的是字符串的格式</span>  filname<span class="token operator">:</span><span class="token string">'main.js'</span>  <span class="token comment">// 2. 出口文件 使用的是占位符的格式</span>  filname<span class="token operator">:</span><span class="token string">'[name].js'</span>  <span class="token comment">// 3. 出口文件 使用的是hash(长度为6)+占位符的格式</span>  <span class="token comment">// 修改 一个文件,打包后所有文件的hash都改变了,整个项目的缓存文件,都将失效</span>  <span class="token comment">// 多个入口文件，hash值都是一样的</span>  filname<span class="token operator">:</span><span class="token string">'[name]_[hash:6].js'</span>  <span class="token comment">// 4. 出口文件 使用的是chunkhash(长度为6)+占位符的格式  </span>  <span class="token comment">//  chunkhash 对于代码块 互不影响且不存在引用关系的代码块,改变一个文件,当前文件的hash值改变</span>  <span class="token comment">//另一个文件的hash值不变, 且不会再次打包</span>  filname<span class="token operator">:</span><span class="token string">'[name]_[chunkhash:6].js'</span> <span class="token comment">// 5. 出口文件 使用contenthash(长度为6)+占位符的格式  </span>  <span class="token comment">//  contenthash 对于一个文件，在同时引用js文件和css文件时，当js文件发生改变时，css文件不变,</span>  <span class="token comment">// 则 js文件的hash值改变，而css文件不改变</span>  filname<span class="token operator">:</span><span class="token string">'[name]_[contenthash:6].js'</span> <span class="token comment">//  指定静态资源路径CDN,需要把文件上传到服务器</span>  publicPath<span class="token operator">:</span><span class="token string">''</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-context-基础目录"><a href="#4-context-基础目录" class="headerlink" title="4. context 基础目录"></a>4. context 基础目录</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//上下文   项目打包的相对路径 必须是绝对路径</span> <span class="token comment">// process.cwd() 是当前Node.js进程执行时的文件夹目录——工作目录，保证了文件在不同</span> <span class="token comment">//的目录下执行时，路径始终不变</span> context<span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-devtool-中的sourceMap"><a href="#5-devtool-中的sourceMap" class="headerlink" title="5. devtool 中的sourceMap"></a>5. devtool 中的sourceMap</h3><h5 id="sourceMap-打包后的文件和原文件之间的关系-如果开启-可以定位到原文件-不安全"><a href="#sourceMap-打包后的文件和原文件之间的关系-如果开启-可以定位到原文件-不安全" class="headerlink" title="sourceMap 打包后的文件和原文件之间的关系,如果开启,可以定位到原文件,不安全"></a>sourceMap 打包后的文件和原文件之间的关系,如果开启,可以定位到原文件,不安全</h5><ul><li>mode==development 默认开启</li><li>mode==production 一般不建议开启,若要开启使用 cheap-module-eval-source-map</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">devtool<span class="token operator">:</span><span class="token string">"cheap-module-source-map"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、module-模块转化-loader–需要安装"><a href="#二、module-模块转化-loader–需要安装" class="headerlink" title="二、module 模块转化  loader–需要安装"></a>二、module 模块转化  loader–需要安装</h2><h3 id="2-1-css-loader"><a href="#2-1-css-loader" class="headerlink" title="2.1 css-loader"></a>2.1 css-loader</h3><ul><li>css-loader的简单使用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">/*      * loader 执行顺序从后往前      * css-loader  是将 css模块文件添加到js文件中       * style-loader 是将 css 出口出来 转化为以style标签的样式添加到html中      */</span>      use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'csse-loader'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>css-loader的模块的使用</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">/*      * css modules 开启       */</span>      use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span><span class="token punctuation">&#123;</span>          modules<span class="token operator">:</span><span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-less-loader"><a href="#2-2-less-loader" class="headerlink" title="2.2 less-loader"></a>2.2 less-loader</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">/*      * css modules 开启       */</span>      use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span><span class="token punctuation">&#123;</span>          modules<span class="token operator">:</span><span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">'less-loader'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-postcss-loader-帮助css-适应css各种浏览器"><a href="#2-3-postcss-loader-帮助css-适应css各种浏览器" class="headerlink" title="2.3 postcss-loader 帮助css 适应css各种浏览器"></a>2.3 postcss-loader 帮助css 适应css各种浏览器</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 下载 postcss<span class="token operator">-</span>loader 和 autoprefixer<span class="token number">2.</span> 使用postcss<span class="token operator">-</span>loader 必须是在css<span class="token operator">-</span>loader之后module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">/*      * css modules 开启       */</span>      use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span><span class="token punctuation">&#123;</span>          modules<span class="token operator">:</span><span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">'postcss-loader'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">3.</span>创建一个 postcss<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js 文件<span class="token keyword">const</span> autoprefixer<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token comment">/**     * autoprefixer("IE 10")     * last 2 versions  最近的两个版本     * >1%  全球浏览器份额大于1%     *  也可以指定 版本号    */</span>    <span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>       overrideBrowserslist<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"last 2 versions"</span><span class="token punctuation">,</span><span class="token string">">1%"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-url-loader-处理文件-包含了file-loader-且比他更强大"><a href="#2-4-url-loader-处理文件-包含了file-loader-且比他更强大" class="headerlink" title="2.4 url-loader 处理文件(包含了file-loader,且比他更强大)"></a>2.4 url-loader 处理文件(包含了file-loader,且比他更强大)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">/*      * css modules 开启       */</span>      use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span><span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token comment">/**           * ext 后缀名           * outputPath 输出文件 加一个目录 提取图片在一个目录下           * limit 小的文件可以将其转化为base64格式 提高加载速度 10kb以下          */</span>            name<span class="token operator">:</span> <span class="token string">'[name]_[hash:6].[ext]'</span><span class="token punctuation">,</span>             outputPath<span class="token operator">:</span><span class="token string">'images/'</span><span class="token punctuation">,</span>            limit<span class="token operator">:</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1024</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、-plugins-插件的使用"><a href="#三、-plugins-插件的使用" class="headerlink" title="三、 plugins 插件的使用"></a>三、 plugins 插件的使用</h2><h5 id="插件-作用于webpack整个打包生命周期的"><a href="#插件-作用于webpack整个打包生命周期的" class="headerlink" title="插件 作用于webpack整个打包生命周期的"></a>插件 作用于webpack整个打包生命周期的</h5><h3 id="3-1-clean-webpack-plugin-每次打包，清除打包后的文件"><a href="#3-1-clean-webpack-plugin-每次打包，清除打包后的文件" class="headerlink" title="3.1 clean-webpack-plugin 每次打包，清除打包后的文件"></a>3.1 clean-webpack-plugin 每次打包，清除打包后的文件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin npm install <span class="token operator">-</span><span class="token constant">D</span> clean<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token number">2.</span>在webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js文件中引用<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>CleanWebpackPlugin<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.</span>使用plugins<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    cleanOnceBeforeBuildPatterns<span class="token operator">:</span>     <span class="token punctuation">[</span>    <span class="token comment">/*    * 打包 不清除的文件夹和文件 前面加 !     * 数组中 一定要有 **/</span><span class="token operator">*</span>   <span class="token comment">//否则不生效  </span>    <span class="token operator">*</span><span class="token operator">/</span>      <span class="token string">"**/*"</span><span class="token punctuation">,</span> <span class="token string">"!images"</span><span class="token punctuation">,</span><span class="token string">"!index.html"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-htmlWepbpackPlugin-自动生成html文件，并将打包后生成的js模块一如到html中"><a href="#3-2-htmlWepbpackPlugin-自动生成html文件，并将打包后生成的js模块一如到html中" class="headerlink" title="3.2 htmlWepbpackPlugin 自动生成html文件，并将打包后生成的js模块一如到html中"></a>3.2 htmlWepbpackPlugin 自动生成html文件，并将打包后生成的js模块一如到html中</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 htmlWepbpackPluginnpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin<span class="token number">2.</span> 加载模块<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpackplugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.</span>使用plugins<span class="token operator">:</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">//选择html模板</span>    <span class="token comment">/**     *  template html的模板路径     *  title html的标题 要在html使用 ejs 语法擦能生效     * &lt;title>&lt;%= htmlWebpackPlugin.options.title %>&lt;/title>     *  filename 生成的文件     */</span>    template<span class="token operator">:</span><span class="token string">"./src/index.html"</span><span class="token punctuation">,</span>    title<span class="token operator">:</span> <span class="token string">"心儿"</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span><span class="token string">"index.html"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-mini-css-extract-plugin-抽离css"><a href="#3-3-mini-css-extract-plugin-抽离css" class="headerlink" title="3.3 mini-css-extract-plugin 抽离css"></a>3.3 mini-css-extract-plugin 抽离css</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 mini<span class="token operator">-</span>css<span class="token operator">-</span>extract<span class="token operator">-</span>pluginnpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev mini<span class="token operator">-</span>css<span class="token operator">-</span>extract<span class="token operator">-</span>plugin<span class="token number">2.</span> 加载模块<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-cssextract-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.</span>使用替换style<span class="token operator">-</span>loader为<span class="token operator">:</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loaderplugins<span class="token operator">:</span><span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> filename<span class="token operator">:</span> <span class="token string">"[name][chunkhash:6].css"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、devserver的使用-本地开发服务"><a href="#四、devserver的使用-本地开发服务" class="headerlink" title="四、devserver的使用 本地开发服务"></a>四、devserver的使用 本地开发服务</h2><h3 id="4-1-devserver的-简单的使用"><a href="#4-1-devserver的-简单的使用" class="headerlink" title="4.1 devserver的 简单的使用"></a>4.1 devserver的 简单的使用</h3><ul><li>提高开发效率,更改代码后不需要重新打包</li><li>打包后生成的文件不会放在dist目录下,而是放到内存中 从而提升速度</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 webpack<span class="token operator">-</span>dev<span class="token operator">-</span>servernpm install webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token operator">-</span><span class="token constant">D</span><span class="token number">2.</span>使用devserver<span class="token operator">:</span><span class="token punctuation">&#123;</span>  contentBase<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  open<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  post<span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-本地mock数据-解决跨域"><a href="#4-2-本地mock数据-解决跨域" class="headerlink" title="4.2 本地mock数据,解决跨域"></a>4.2 本地mock数据,解决跨域</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * before webpack打包前的生命周期,可以直接模拟写接口 * app 类似于express 搭建的服务 * server 可以是指端口*/</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span>server</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/info'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      hello<span class="token operator">:</span> <span class="token string">'world8888888'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-HMR-热模块替换-webpack自带的-保留之前操作的行为，浏览器不刷新-动态生效修改的代码"><a href="#4-2-HMR-热模块替换-webpack自带的-保留之前操作的行为，浏览器不刷新-动态生效修改的代码" class="headerlink" title="4.2 HMR 热模块替换 webpack自带的,保留之前操作的行为，浏览器不刷新,动态生效修改的代码"></a>4.2 HMR 热模块替换 webpack自带的,保留之前操作的行为，浏览器不刷新,动态生效修改的代码</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">cosnt webpack<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>devserver<span class="token operator">:</span><span class="token punctuation">&#123;</span>  contentBase<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  open<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  post<span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">,</span>  hot<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// </span>  <span class="token comment">/*  *  hotOnly:true  即使HMR 不生效,也不会自动的刷新浏览器  *  css 开发中不要使用mini-css-extract-plugin,否则不生效  */</span>  hotOnly<span class="token operator">:</span><span class="token boolean">true</span> <span class="token punctuation">&#125;</span>plugins<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">/** * 原生js 实现,但是 用不到，因为不会使用原生开发 * react 使用 react-hot-loader * vue 使用 vue-loader*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"./b"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * vue-loader 默认是开启 热重载的*/</span>module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      loader<span class="token operator">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>      options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        hotReload<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 关闭热重载</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、-babel-处理ES6"><a href="#五、-babel-处理ES6" class="headerlink" title="五、 babel 处理ES6+"></a>五、 babel 处理ES6+</h2><h3 id="5-1-babel-loader-的使用"><a href="#5-1-babel-loader-的使用" class="headerlink" title="5.1 babel-loader 的使用"></a>5.1 babel-loader 的使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 babel<span class="token operator">-</span>loadernpm i <span class="token operator">-</span><span class="token constant">D</span> babel<span class="token operator">-</span>loader @babel<span class="token operator">/</span>core  @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env npm i <span class="token operator">-</span><span class="token constant">S</span>  @babel<span class="token operator">/</span>polyfill<span class="token number">2.</span>使用  <span class="token comment">/*  * babel-loader  只是一个桥梁,建立webpack与babel之间的桥梁,不会进行转换  * exclude 排除这些文件不需要  * @babel/core 语法转换的核心API  * @babel/preset-env 语法转换规则 可以将es6+转化为es5,但是对于Promise等不识别的浏览器,也会报错  * polyfill 垫片 es6+的库, 将es6+的语法库 直接导入到使用到es6+语法的文件,使其支持es6+的写法  * polyfill 会污染全局对象  * 1. polyfill 简单粗暴使用,在所有使用到es6模块的文件,文件会变得很大,不适用  * import '@babel/polyfill'  * 2. 按需引入polyfill  *  useBuiltIns: "usage"  * targets 目标浏览器  */</span>module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      exclude<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      use<span class="token operator">:</span><span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span><span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span><span class="token punctuation">[</span>          <span class="token punctuation">[</span>            <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              targets<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                edge<span class="token operator">:</span> <span class="token string">"17"</span><span class="token punctuation">,</span>                firefox<span class="token operator">:</span> <span class="token string">"60"</span><span class="token punctuation">,</span>                chrome<span class="token operator">:</span> <span class="token string">"67"</span><span class="token punctuation">,</span>                safari<span class="token operator">:</span> <span class="token string">"11.1"</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              corejs<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//新版本需要指定核⼼库版本</span>              useBuiltIns<span class="token operator">:</span> <span class="token string">"usage"</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-配置react的使用"><a href="#5-2-配置react的使用" class="headerlink" title="5.2 配置react的使用"></a>5.2 配置react的使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载npm i <span class="token operator">-</span><span class="token constant">D</span> @babel<span class="token operator">/</span>preset<span class="token operator">-</span>react<span class="token number">2.</span>使用 module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      exclude<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      use<span class="token operator">:</span><span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span><span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        options<span class="token operator">:</span><span class="token punctuation">&#123;</span>          presets<span class="token operator">:</span><span class="token punctuation">[</span>          <span class="token punctuation">[</span>            <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              targets<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                edge<span class="token operator">:</span> <span class="token string">"17"</span><span class="token punctuation">,</span>                firefox<span class="token operator">:</span> <span class="token string">"60"</span><span class="token punctuation">,</span>                chrome<span class="token operator">:</span> <span class="token string">"67"</span><span class="token punctuation">,</span>                safari<span class="token operator">:</span> <span class="token string">"11.1"</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              corejs<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//新版本需要指定核⼼库版本</span>              useBuiltIns<span class="token operator">:</span> <span class="token string">"usage"</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token string">'@babel/preset-react'</span>        <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-抽离babel的配置"><a href="#5-3-抽离babel的配置" class="headerlink" title="5.3 抽离babel的配置"></a>5.3 抽离babel的配置</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>新建文件 <span class="token punctuation">.</span>babelrc<span class="token number">2.</span>添加内容<span class="token punctuation">&#123;</span>  options<span class="token operator">:</span><span class="token punctuation">&#123;</span>      presets<span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">[</span>        <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          targets<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            edge<span class="token operator">:</span> <span class="token string">"17"</span><span class="token punctuation">,</span>            firefox<span class="token operator">:</span> <span class="token string">"60"</span><span class="token punctuation">,</span>            chrome<span class="token operator">:</span> <span class="token string">"67"</span><span class="token punctuation">,</span>            safari<span class="token operator">:</span> <span class="token string">"11.1"</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          corejs<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//新版本需要指定核⼼库版本</span>          useBuiltIns<span class="token operator">:</span> <span class="token string">"usage"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">'@babel/preset-react'</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">3.</span> 去掉babel<span class="token operator">-</span>loader的 options<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、性能优化"><a href="#六、性能优化" class="headerlink" title="六、性能优化"></a>六、性能优化</h2><h3 id="6-1-优化开发体验-优化构建速度、优化使用体验、提升效率"><a href="#6-1-优化开发体验-优化构建速度、优化使用体验、提升效率" class="headerlink" title="6.1 优化开发体验(优化构建速度、优化使用体验、提升效率)"></a>6.1 优化开发体验(优化构建速度、优化使用体验、提升效率)</h3><ul><li>include 缩小loader的查找方位 (exclude 排除哪里不查找)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span><span class="token punctuation">&#123;</span>  rules<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      include<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'.src'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>resolve 模块解析</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** *  resolve.modules 直接设置成当前项目的 node_modules 路径,减小查找范围 *  resolve.alias 设置别名,减少查找过程, *      react 直接指向了react.production.min.js,减少了查找时间 *  resolve.extensions 自动添加文件的后缀,尽量不要使用*/</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>  resolve<span class="token operator">:</span><span class="token punctuation">&#123;</span>    modules<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./node_modules"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    alias<span class="token operator">:</span><span class="token punctuation">&#123;</span>      react<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./node_modules/react/umd/react.production.min.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">"react-dom"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./node_modules/react-dom/umd/react-dom.production.min.js"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    extensions<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">'.ts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用Dllplugin 优化构建性能 需要手动引入<ul><li>项⽬中引⼊了很多第三⽅库，这些库在很⻓的⼀段时间内，基本不会更新，打包的时候分开打包来提升打包速度，⽽DllPlugin动态链接库插件，其原理就是把⽹⻚依赖的基础模块抽离出来打包到dll⽂件中，当需要导⼊的模块存在于某个dll中时，这个模块不再被打包，⽽是去dll中获取。</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> DllPlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"[name].dll.js"</span><span class="token punctuation">,</span>    library<span class="token operator">:</span> <span class="token string">"react"</span> <span class="token comment">//和下方的 name名字一样</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token comment">// manifest.json⽂件的输出位置</span>      path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./dll"</span><span class="token punctuation">,</span> <span class="token string">"[name]-manifest.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// 定义打包的公共vendor⽂件对外暴露的函数名</span>      name<span class="token operator">:</span> <span class="token string">"react"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span>在<span class="token keyword">package</span><span class="token punctuation">.</span>json中添加<span class="token punctuation">,</span>构建动态链接库<span class="token string">"dev:dll"</span><span class="token operator">:</span> <span class="token string">"webpack --config ./build/webpack.dll.config.js"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-优化输出质量-提升代码性能、减少代码体积"><a href="#6-2-优化输出质量-提升代码性能、减少代码体积" class="headerlink" title="6.2 优化输出质量(提升代码性能、减少代码体积)"></a>6.2 优化输出质量(提升代码性能、减少代码体积)</h3><ul><li>externals 以哪种模式去加载所引入的额外的包<ul><li>将引入的第三方模块的包,转化为cdn,不需要打包进入bundle文件,减小打包后的文件体积</li><li>公司有cdn服务</li><li>本地不需要引入当前文件</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">externals<span class="token operator">:</span><span class="token punctuation">&#123;</span>  lodash<span class="token operator">:</span><span class="token string">'_'</span><span class="token punctuation">,</span>  jquery<span class="token operator">:</span> <span class="token string">'jQuery'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>publicPath 将静态资源打包到cdn服务器,减少 bundle的体积</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">output<span class="token operator">:</span><span class="token punctuation">&#123;</span>  publicPath<span class="token operator">:</span><span class="token string">''</span>  <span class="token comment">//cdn服务地址</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>压缩css</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载  cssnano optimize<span class="token operator">-</span>css<span class="token operator">-</span>assets<span class="token operator">-</span>webpack<span class="token operator">-</span>pluginnpm i optimize<span class="token operator">-</span>css<span class="token operator">-</span>assets<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span><span class="token number">2.</span>使用 <span class="token keyword">const</span> OptimizeCssAssetsPlugin<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span>plugins<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">OptimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    cssProcessor<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cssnano"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//引⼊cssnano默认配置压缩,postcss-loader 带了这个模块,不需要重新安装</span>    cssProcessorOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      discardComments<span class="token operator">:</span> <span class="token punctuation">&#123;</span>         removeAll<span class="token operator">:</span> <span class="token boolean">true</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>抽离 css 使用mini-css-extract-plugin</p></li><li><p>压缩 Html 使用 html-webpack-plugin</p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * minify 压缩html的一些配置 * minifyCSS 压缩内联css * collapseWhitespace 删除空白符与换行符 * removeComments 移除注释*/</span><span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    title<span class="token operator">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>    template<span class="token operator">:</span> <span class="token string">"./index.html"</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span>    minify<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      removeComments<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       minifyCSS<span class="token operator">:</span> <span class="token boolean">true</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>tree shalking 清楚没有用到的css、js</li><li>代码不会被执行</li><li>代码执行的结果不会被用到</li><li>只写不读</li><li>清楚js 只支持 es module引入方式(require)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">css tree shaking<span class="token number">1.</span> 下载依赖 glob<span class="token operator">-</span>all purify<span class="token operator">-</span>css purifycss<span class="token operator">-</span>webpack<span class="token comment">/** * glob-all 查找文件 * purify-css 对css进行摇树 * purifycss-webpack webpack 对css摇树的支持*/</span>npm i glob<span class="token operator">-</span>all purify<span class="token operator">-</span>css purifycss<span class="token operator">-</span>webpack <span class="token operator">-</span><span class="token constant">D</span><span class="token keyword">const</span> PurifyCSS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'purifycss-webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'glob-all'</span><span class="token punctuation">)</span>plugins<span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">// 清除⽆⽤ css</span>  <span class="token keyword">new</span> <span class="token class-name">PurifyCSS</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    paths<span class="token operator">:</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">[</span>       <span class="token comment">// 要做 CSS Tree Shaking 的路径⽂件</span>      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/*.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 请注意，我们同样需要对 html ⽂件进⾏ tree shaking</span>      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/*.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>js tree shaking<span class="token comment">//开发模式,不生效 只在生产模式生效</span>optimization<span class="token operator">:</span><span class="token punctuation">&#123;</span>  usedExports<span class="token operator">:</span><span class="token boolean">true</span> 只打包使用的js模块<span class="token punctuation">&#125;</span><span class="token comment">// 副作用会把 polyfill摇掉 还有入口文件引入的,但是没有用</span>在<span class="token keyword">package</span><span class="token punctuation">.</span>json 文件加<span class="token punctuation">,</span> 不摇这些文件<span class="token string">"sideEffects"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'*.css'</span><span class="token punctuation">,</span><span class="token string">'@babel/polyfill'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代码分割 code spliting</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">optimization<span class="token operator">:</span><span class="token punctuation">&#123;</span>  splitChunks<span class="token operator">:</span><span class="token punctuation">&#123;</span>    chunks<span class="token operator">:</span>all <span class="token comment">// all 对同步和异步的都做处理</span>    minSize<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span><span class="token comment">//最⼩尺⼨，当模块⼤于30kb</span>    maxSize<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//对模块进⾏⼆次分割时使⽤，不推荐使⽤</span>    minChunks<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//打包⽣成的chunk⽂件最少有⼏个chunk引⽤了这个模块</span>    maxAsyncRequests<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token comment">//最⼤异步请求数，默认5</span>    maxInitialRequests<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">//最⼤初始化请求书，⼊⼝⽂件同步请求，默认3</span>    automaticNameDelimiter<span class="token operator">:</span> <span class="token string">'-'</span><span class="token punctuation">,</span><span class="token comment">//打包分割符号</span>    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//打包后的名称，除了布尔值，还可以接收⼀个函数function</span>    cacheGroups<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//缓存组</span>      vendors<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\/]node_modules[\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        name<span class="token operator">:</span><span class="token string">"vendor"</span><span class="token punctuation">,</span> <span class="token comment">// 要缓存的 分隔出来的 chunk 名称</span>        priority<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token comment">//缓存组优先级 数字越⼤，优先级越⾼</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      other<span class="token operator">:</span><span class="token punctuation">&#123;</span>        chunks<span class="token operator">:</span> <span class="token string">"initial"</span><span class="token punctuation">,</span> <span class="token comment">// 必须三选⼀： "initial" | "all" | "async"(默认就是async)</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">react|lodash</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 正则规则验证，如果符合就提取 chunk,</span>        name<span class="token operator">:</span><span class="token string">"other"</span><span class="token punctuation">,</span>        minSize<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>        minChunks<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        minChunks<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        priority<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>        reuseExistingChunk<span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//可设置是否重⽤该chunk</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 开启作用域提升 合并js文件,使打包后的文件更小、运行的更快</span>  concatenateModules<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、小问题总结"><a href="#七、小问题总结" class="headerlink" title="七、小问题总结"></a>七、小问题总结</h2><h3 id="7-1-webpack中chunk和bundle中的关系"><a href="#7-1-webpack中chunk和bundle中的关系" class="headerlink" title="7.1 webpack中chunk和bundle中的关系"></a>7.1 webpack中chunk和bundle中的关系</h3><blockquote><ul><li>chunk 是webpack对源文件进行打包时,根据引用关系生成 chunk文件,并对其进行一些操作,不可以在浏览器运行</li><li>处理好的chunk文件,最后输出成 bundle,可以直接再浏览器中运行</li></ul></blockquote><h3 id="7-2-file-loader和url-loader的区别"><a href="#7-2-file-loader和url-loader的区别" class="headerlink" title="7.2 file-loader和url-loader的区别"></a>7.2 file-loader和url-loader的区别</h3><blockquote><ul><li>file-loader 把打包⼊⼝中识别出的资源模块，移动到输出⽬录，并且返回⼀个地址名称</li><li>url-loader 包含了file-loader,但是对jpg格式的模块,会将其进行压缩,并打包到js中,大体积不合适</li></ul></blockquote><h3 id="7-3-解决跨域"><a href="#7-3-解决跨域" class="headerlink" title="7.3 解决跨域"></a>7.3 解决跨域</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string">"/api"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> target<span class="token operator">:</span> <span class="token string">"http://localhost:9092"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-解决polyfill全局污染问题-使用闭包"><a href="#7-4-解决polyfill全局污染问题-使用闭包" class="headerlink" title="7.4  解决polyfill全局污染问题,使用闭包"></a>7.4  解决polyfill全局污染问题,使用闭包</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtimenpm i <span class="token operator">-</span><span class="token constant">D</span> @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtimenpm i <span class="token operator">-</span><span class="token constant">S</span> @babel<span class="token operator">/</span>runtime<span class="token number">2.</span>使用options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  presets<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>    <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      targets<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        edge<span class="token operator">:</span> <span class="token string">"17"</span><span class="token punctuation">,</span>        firefox<span class="token operator">:</span> <span class="token string">"60"</span><span class="token punctuation">,</span>        chrome<span class="token operator">:</span> <span class="token string">"67"</span><span class="token punctuation">,</span>        safari<span class="token operator">:</span> <span class="token string">"11.1"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      useBuiltIns<span class="token operator">:</span> <span class="token string">"usage"</span><span class="token punctuation">,</span>      corejs<span class="token operator">:</span> <span class="token number">2</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>      <span class="token string">"absoluteRuntime"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">"corejs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string">"helpers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">"regenerator"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token string">"useESModules"</span><span class="token operator">:</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-development和-production-区分打包"><a href="#7-5-development和-production-区分打包" class="headerlink" title="7.5 development和 production 区分打包"></a>7.5 development和 production 区分打包</h3><ul><li>使用webpack-merge</li><li>使用 环境变量 cross-env</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载安装webpack<span class="token operator">-</span>merge<span class="token number">2.</span>区分目录webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>base<span class="token punctuation">.</span>js 公共配置  cosnt path<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>CleanWebpackPlugin<span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span>  module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>    extry<span class="token operator">:</span><span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    resolve<span class="token operator">:</span><span class="token punctuation">&#123;</span>      modules<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./node_modules"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      alias<span class="token operator">:</span><span class="token punctuation">&#123;</span>        react<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./node_modules/react/umd/react.production.min.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"react-dom"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./node_modules/react-dom/umd/react-dom.production.min.js"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      extensions<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">'.ts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>pro<span class="token punctuation">.</span>js  生产配置<span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> commonConfig<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config.base.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cosnt path<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-cssextract-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> OptimizeCssAssetsPlugin<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> proConfig<span class="token operator">=</span><span class="token punctuation">&#123;</span>  mode<span class="token operator">:</span><span class="token string">'production'</span><span class="token punctuation">,</span>  output<span class="token operator">:</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span><span class="token string">'[name].js'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  module<span class="token operator">:</span><span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        include<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./src/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        use<span class="token operator">:</span><span class="token punctuation">[</span>          MiniCssExtractPlugin<span class="token punctuation">.</span>loader          <span class="token punctuation">&#123;</span>            loader<span class="token operator">:</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span>            options<span class="token operator">:</span><span class="token punctuation">&#123;</span>              modules<span class="token operator">:</span><span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>            loader<span class="token operator">:</span><span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token string">'less-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span><span class="token punctuation">&#123;</span>          loader<span class="token operator">:</span><span class="token string">'babel-loader'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      filename<span class="token operator">:</span> <span class="token string">"[name][chunkhash:6].css"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">OptimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      cssProcessor<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cssnano"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//引⼊cssnano默认配置压缩,postcss-loader 带了这个模块,不需要重新安装</span>      cssProcessorOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        discardComments<span class="token operator">:</span> <span class="token punctuation">&#123;</span>           removeAll<span class="token operator">:</span> <span class="token boolean">true</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span>proConfig<span class="token punctuation">)</span>webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>js  开发配置<span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> commonConfig<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.config.base.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cosnt path<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> devConfig<span class="token operator">=</span><span class="token punctuation">&#123;</span>  mode<span class="token operator">:</span><span class="token string">'development'</span><span class="token punctuation">,</span>   output<span class="token operator">:</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span><span class="token string">'[name].js'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  devtool<span class="token operator">:</span><span class="token string">'cheap-inline-source-map'</span><span class="token punctuation">,</span>  devserver<span class="token operator">:</span><span class="token punctuation">&#123;</span>    contentBase<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    open<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    post<span class="token operator">:</span><span class="token number">8080</span><span class="token punctuation">,</span>    hot<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    hotOnly<span class="token operator">:</span><span class="token boolean">true</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  module<span class="token operator">:</span><span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        include<span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./src/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        use<span class="token operator">:</span><span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>            loader<span class="token operator">:</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span>            options<span class="token operator">:</span><span class="token punctuation">&#123;</span>              modules<span class="token operator">:</span><span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>            loader<span class="token operator">:</span><span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token string">'less-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span><span class="token punctuation">&#123;</span>          loader<span class="token operator">:</span><span class="token string">'babel-loader'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      title<span class="token operator">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>      template<span class="token operator">:</span> <span class="token string">"./index.html"</span><span class="token punctuation">,</span>      filename<span class="token operator">:</span> <span class="token string">"index.html"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span>devConfig<span class="token punctuation">)</span><span class="token keyword">package</span><span class="token punctuation">.</span>jsonscripts<span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token string">"dev"</span><span class="token operator">:</span><span class="token string">'webpack-dev-server --config  ./webpack.config.dev.js'</span>  <span class="token string">"build"</span><span class="token operator">:</span><span class="token string">'webpack --config  ./webpack.config.pro.js'</span><span class="token punctuation">,</span>  <span class="token string">"test"</span><span class="token operator">:</span> <span class="token string">"cross-env NODE_ENV=test webpack --config ./webpack.config.test.js"</span><span class="token punctuation">&#125;</span>拿到 cross<span class="token operator">-</span>env的值 process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-6-测量各个loader所花费的时间"><a href="#7-6-测量各个loader所花费的时间" class="headerlink" title="7.6 测量各个loader所花费的时间"></a>7.6 测量各个loader所花费的时间</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 speed<span class="token operator">-</span>measure<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin  npm i speed<span class="token operator">-</span>measure<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>  <span class="token comment">//webpack.config.js</span>  <span class="token keyword">const</span> SpeedMeasurePlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"speed-measure-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> smp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpeedMeasurePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//...webpack配置</span>  <span class="token punctuation">&#125;</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> smp<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-7-分析webpack打包后的模块依赖关系"><a href="#7-7-分析webpack打包后的模块依赖关系" class="headerlink" title="7.7 分析webpack打包后的模块依赖关系"></a>7.7 分析webpack打包后的模块依赖关系</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span>下载 webpack<span class="token operator">-</span>bundle<span class="token operator">-</span>analyzer  npm i speed<span class="token operator">-</span>measure<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>  <span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-bundleanalyzer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin<span class="token punctuation">;</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseWebpackConfig<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//....</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">//...</span>    <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第912题:数组排序</title>
      <link href="posts/7ddc.html"/>
      <url>posts/7ddc.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><h5 id="实现思路-比较相邻的两个项-如果第一个比第二个大-就交换位置"><a href="#实现思路-比较相邻的两个项-如果第一个比第二个大-就交换位置" class="headerlink" title="实现思路: 比较相邻的两个项,如果第一个比第二个大,就交换位置"></a>实现思路: 比较相邻的两个项,如果第一个比第二个大,就交换位置</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buddling</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//arr 传入的数组</span>  <span class="token keyword">let</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">buddling</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1, 2, 5, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改之后的冒泡排序"><a href="#修改之后的冒泡排序" class="headerlink" title="修改之后的冒泡排序"></a>修改之后的冒泡排序</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buddling</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//arr 传入的数组</span>  <span class="token keyword">let</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//减去 i 后面已经是最大的了</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">buddling</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1, 2, 5, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="冒泡排序的复杂度是-O-n-2-两个循环-比较慢"><a href="#冒泡排序的复杂度是-O-n-2-两个循环-比较慢" class="headerlink" title="冒泡排序的复杂度是 O(n^2),两个循环,比较慢"></a>冒泡排序的复杂度是 O(n^2),两个循环,比较慢</h5><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h2><h5 id="实现思路-找到数组中的最小值并将其放在第一位-接着找第二小放到第二位-依次类推"><a href="#实现思路-找到数组中的最小值并将其放在第一位-接着找第二小放到第二位-依次类推" class="headerlink" title="实现思路:找到数组中的最小值并将其放在第一位,接着找第二小放到第二位,依次类推"></a>实现思路:找到数组中的最小值并将其放在第一位,接着找第二小放到第二位,依次类推</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//arr 传入的数组</span>  <span class="token keyword">let</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> minIndex<span class="token punctuation">;</span> <span class="token comment">//最小值的索引</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    minIndex<span class="token operator">=</span>i<span class="token punctuation">;</span> <span class="token comment">//先赋值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断最小索引的值是否是最小的</span>        minIndex<span class="token operator">=</span>j <span class="token comment">//不是最小 赋值 </span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!==</span>minIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">//交换位置 </span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1, 2, 5, 6, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="选择排序的复杂度同样也是-O-n-2-两个循环"><a href="#选择排序的复杂度同样也是-O-n-2-两个循环" class="headerlink" title="选择排序的复杂度同样也是 O(n^2),两个循环"></a>选择排序的复杂度同样也是 O(n^2),两个循环</h5><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h2><h5 id="实现思路-每次排一个数组项-以此方式构建最后的排序数组"><a href="#实现思路-每次排一个数组项-以此方式构建最后的排序数组" class="headerlink" title="实现思路: 每次排一个数组项,以此方式构建最后的排序数组"></a>实现思路: 每次排一个数组项,以此方式构建最后的排序数组</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//arr 传入的数组</span>  <span class="token keyword">let</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> middle<span class="token punctuation">;</span> <span class="token comment">//表示当前插入值的位置</span>  <span class="token keyword">let</span> middleValue<span class="token punctuation">;</span> <span class="token comment">//当前的值 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    middle<span class="token operator">=</span>i    middleValue<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>middle<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>middle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>middleValue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断要插入的值</span>      arr<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>middle<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//交换两个数的位置     </span>      middle<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    arr<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token operator">=</span>middleValue <span class="token comment">//确保插入的数据赋值成功</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1, 2, 5, 6, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="插入排序的复杂度同样也是-O-n-2"><a href="#插入排序的复杂度同样也是-O-n-2" class="headerlink" title="插入排序的复杂度同样也是 O(n^2)"></a>插入排序的复杂度同样也是 O(n^2)</h5><h2 id="4-归并排序"><a href="#4-归并排序" class="headerlink" title="4.归并排序"></a>4.归并排序</h2><h5 id="实现思路-利用分治的方法-先将数组拆成一个长度为1的数组-然后然后再一个一个合并成大数组并排序"><a href="#实现思路-利用分治的方法-先将数组拆成一个长度为1的数组-然后然后再一个一个合并成大数组并排序" class="headerlink" title="实现思路: 利用分治的方法,先将数组拆成一个长度为1的数组,然后然后再一个一个合并成大数组并排序"></a>实现思路: 利用分治的方法,先将数组拆成一个长度为1的数组,然后然后再一个一个合并成大数组并排序</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//</span>  <span class="token comment">//arr的长度等于1,直接返回</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr <span class="token comment">//arr的长度大于1</span>  <span class="token keyword">let</span> middle <span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取到arr长度的中间值</span>  <span class="token keyword">let</span> arrLeft<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组左半边</span>  <span class="token keyword">let</span> arrRight<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//数组右半边</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arrLeft<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arrRight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//先递归,合并左右数组</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">leftA<span class="token punctuation">,</span>rightA</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> il<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//左边数组的起始索引</span>  <span class="token keyword">let</span> ir<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//右边数组的起始索引</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>il<span class="token operator">&lt;</span>leftA<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> ir<span class="token operator">&lt;</span>rightA<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>leftA<span class="token punctuation">[</span>il<span class="token punctuation">]</span><span class="token operator">></span>rightA<span class="token punctuation">[</span>ir<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//左边大于右边,先push右边，反之push左边</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightA<span class="token punctuation">[</span>ir<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftA<span class="token punctuation">[</span>il<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>il<span class="token operator">&lt;</span>leftA<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//push最大的那个左边值</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftA<span class="token punctuation">[</span>il<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//++ 数组数据多，需要++</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>ir<span class="token operator">&lt;</span>rightA<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//push最大的那个右边值</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightA<span class="token punctuation">[</span>ir<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 5, 6, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="归并排序的复杂度同样也是-O-nlog-n"><a href="#归并排序的复杂度同样也是-O-nlog-n" class="headerlink" title="归并排序的复杂度同样也是 O(nlog n)"></a>归并排序的复杂度同样也是 O(nlog n)</h5><h2 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5.快速排序"></a>5.快速排序</h2><h5 id="实现思路-利用分治的方法"><a href="#实现思路-利用分治的方法" class="headerlink" title="实现思路: 利用分治的方法,"></a>实现思路: 利用分治的方法,</h5><h5 id="快速排序的复杂度同样也是-O-nlog-n"><a href="#快速排序的复杂度同样也是-O-nlog-n" class="headerlink" title="快速排序的复杂度同样也是 O(nlog n)"></a>快速排序的复杂度同样也是 O(nlog n)</h5>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第10题:正则表达式匹配</title>
      <link href="posts/8010.html"/>
      <url>posts/8010.html</url>
      
        <content type="html"><![CDATA[<h5 id="给你一个字符串-s-和一个字符规律-p，请你来实现一个支持-‘-’-和-‘-’-的正则表达式匹配。"><a href="#给你一个字符串-s-和一个字符规律-p，请你来实现一个支持-‘-’-和-‘-’-的正则表达式匹配。" class="headerlink" title="给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。"></a>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</h5><ul><li><p>‘.’ 匹配任意单个字符</p></li><li><p>‘*’ 匹配零个或多个前面的那一个元素</p></li></ul><h3 id="使用遍历的方法"><a href="#使用遍历的方法" class="headerlink" title="使用遍历的方法"></a>使用遍历的方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="简单粗暴方法"><a href="#简单粗暴方法" class="headerlink" title="简单粗暴方法"></a>简单粗暴方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第9题:回文数</title>
      <link href="posts/42c6.html"/>
      <url>posts/42c6.html</url>
      
        <content type="html"><![CDATA[<h5 id="给你一个整数x-，如果-x-是一个回文整数，返回-true-；否则，返回-false-。"><a href="#给你一个整数x-，如果-x-是一个回文整数，返回-true-；否则，返回-false-。" class="headerlink" title="给你一个整数x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。"></a>给你一个整数x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</h5><h6 id="回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121-是回文，而-123-不是。"><a href="#回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121-是回文，而-123-不是。" class="headerlink" title="回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。"></a>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</h6><h3 id="使用遍历的方法"><a href="#使用遍历的方法" class="headerlink" title="使用遍历的方法"></a>使用遍历的方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param &#123;number&#125; x * @return &#123;boolean&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token string">''</span> <span class="token operator">+</span> x<span class="token punctuation">;</span>    <span class="token keyword">let</span> is_wen <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>j<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> j<span class="token punctuation">[</span>j<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            is_wen<span class="token operator">=</span><span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> is_wen<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简单粗暴方法"><a href="#简单粗暴方法" class="headerlink" title="简单粗暴方法"></a>简单粗暴方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param &#123;number&#125; x * @return &#123;boolean&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>x<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> x<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第8题:字符串转换整数</title>
      <link href="posts/ea5a.html"/>
      <url>posts/ea5a.html</url>
      
        <content type="html"><![CDATA[<h5 id="请你来实现一个myAtoi-string-s-函数-使其能将字符串转换成一个-32-位有符号整数（类似-C-C-中的-atoi-函数）"><a href="#请你来实现一个myAtoi-string-s-函数-使其能将字符串转换成一个-32-位有符号整数（类似-C-C-中的-atoi-函数）" class="headerlink" title="请你来实现一个myAtoi(string s)函数,使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）"></a>请你来实现一个myAtoi(string s)函数,使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）</h5><h6 id="函数myAtoi-string-s-的算法如下："><a href="#函数myAtoi-string-s-的算法如下：" class="headerlink" title="函数myAtoi(string s)的算法如下："></a>函数myAtoi(string s)的算法如下：</h6><ul><li>读入字符串并丢弃无用的前导空格</li><li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li><li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li><li>·将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。</li><li>如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。</li><li>返回整数作为最终结果。</li></ul><h3 id="使用遍历的方法"><a href="#使用遍历的方法" class="headerlink" title="使用遍历的方法"></a>使用遍历的方法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param &#123;string&#125; s * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">myAtoi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @param &#123;number&#125; times 循环次数     * @return &#123;number&#125; res     */</span>    <span class="token keyword">let</span> times<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>times <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>times<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                times<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>times<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>times<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>times<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">=</span> s<span class="token punctuation">[</span>times<span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>times<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">+=</span> s<span class="token punctuation">[</span>times<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        times<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-parseInt"><a href="#使用-parseInt" class="headerlink" title="使用 parseInt"></a>使用 parseInt</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">myAtoi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span> res <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span>  Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">=</span>  Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第7题:整数反转</title>
      <link href="posts/9923.html"/>
      <url>posts/9923.html</url>
      
        <content type="html"><![CDATA[<h5 id="给出一个-32-位的有符号整数，你需要将这个整数中每位上的数字进行反转"><a href="#给出一个-32-位的有符号整数，你需要将这个整数中每位上的数字进行反转" class="headerlink" title="给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转."></a>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转.</h5><h5 id="注意-假设我们的环境只能存储得下-32-位的有符号整数，则其数值范围为-−2-31-2-31-−-1-。请根据这个假设，如果反转后整数溢出那么就返回-0。"><a href="#注意-假设我们的环境只能存储得下-32-位的有符号整数，则其数值范围为-−2-31-2-31-−-1-。请根据这个假设，如果反转后整数溢出那么就返回-0。" class="headerlink" title="注意:假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。"></a>注意:假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</h5><h2 id="一、利用栈的原理来求解"><a href="#一、利用栈的原理来求解" class="headerlink" title="一、利用栈的原理来求解"></a>一、利用栈的原理来求解</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> max_int<span class="token operator">=</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> min_int<span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> ret<span class="token operator">=</span><span class="token number">0</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>max_int<span class="token operator">||</span>x<span class="token operator">&lt;</span>min_int<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span>   <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//栈的原理 一个一个出栈</span>    <span class="token keyword">const</span> value<span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//拿到最后面的余数</span>    x<span class="token operator">=</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//~~ 相当于向下取整</span>    ret <span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span>ret<span class="token operator">+</span>value<span class="token punctuation">;</span> <span class="token comment">//将余数拼接起来</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">></span>max_int<span class="token operator">||</span>ret<span class="token operator">&lt;</span>min_int<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、利用js的-或来求解"><a href="#二、利用js的-或来求解" class="headerlink" title="二、利用js的|或来求解"></a>二、利用js的|或来求解</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// |强制转换32位有符号的整数</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>res <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> res <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、将整数转化为字符串-再利用js自身的方法来实现"><a href="#三、将整数转化为字符串-再利用js自身的方法来实现" class="headerlink" title="三、将整数转化为字符串,再利用js自身的方法来实现"></a>三、将整数转化为字符串,再利用js自身的方法来实现</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> max<span class="token operator">=</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> min<span class="token operator">=</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res<span class="token punctuation">;</span>  res<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Number</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token operator">></span>max<span class="token operator">||</span>res<span class="token operator">&lt;</span>min<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第6题:Z字型转换</title>
      <link href="posts/8701.html"/>
      <url>posts/8701.html</url>
      
        <content type="html"><![CDATA[<h5 id="将一个给定字符串-s-根据给定的行数-numRows-，以从上往下、从左到右进行-Z-字形排列。"><a href="#将一个给定字符串-s-根据给定的行数-numRows-，以从上往下、从左到右进行-Z-字形排列。" class="headerlink" title="将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。"></a>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</h5><h5 id="解题思路-将字符串组成“z”字型，看成类似于倒”N”字型-s的长度有j个-“-“-双层遍历-numRows-j-找规律求解"><a href="#解题思路-将字符串组成“z”字型，看成类似于倒”N”字型-s的长度有j个-“-“-双层遍历-numRows-j-找规律求解" class="headerlink" title="解题思路:将字符串组成“z”字型，看成类似于倒”N”字型  s的长度有j个 “|/“ 双层遍历(numRows,j)找规律求解"></a>解题思路:将字符串组成“z”字型，看成类似于倒”N”字型  s的长度有j个 “|/“ 双层遍历(numRows,j)找规律求解</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param &#123;string&#125; s * @param &#123;number&#125; numRows * @return &#123;string&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">convert</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> numRows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numRows<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s    <span class="token comment">//拿到类似"v"中元素的个数</span>    <span class="token keyword">let</span> size<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>numRows<span class="token operator">-</span><span class="token number">2</span>    <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">//最后返回的值</span>    <span class="token comment">//两个遍历 第一个遍历 行数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numRows<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//第二个遍历 遍历s中一共有多少个size</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token operator">/</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//每一个 "|" 对应的索引</span>            <span class="token keyword">let</span> vert<span class="token operator">=</span>j<span class="token operator">*</span>size<span class="token operator">+</span>i            <span class="token comment">//每一个"/" 对应的索引</span>            <span class="token keyword">let</span> oblique<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token operator">-</span>i            <span class="token keyword">if</span><span class="token punctuation">(</span>vert<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> res<span class="token operator">+=</span>s<span class="token punctuation">[</span>vert<span class="token punctuation">]</span>            <span class="token comment">//对于 i==0 和 i==numRous-1  没有"/"的索引,则不需要加 oblique</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">==</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>oblique<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> vert<span class="token operator">!=</span>oblique<span class="token punctuation">)</span> res<span class="token operator">+=</span>s<span class="token punctuation">[</span>oblique<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第5题:最长回文子串</title>
      <link href="posts/8d9a.html"/>
      <url>posts/8d9a.html</url>
      
        <content type="html"><![CDATA[<h5 id="给你一个字符串s-找到-s-中最长的回文子串。-s的最大长度为1000"><a href="#给你一个字符串s-找到-s-中最长的回文子串。-s的最大长度为1000" class="headerlink" title="给你一个字符串s,找到 s 中最长的回文子串。 s的最大长度为1000"></a>给你一个字符串s,找到 s 中最长的回文子串。 s的最大长度为1000</h5><h5 id="解题思路-动态规划"><a href="#解题思路-动态规划" class="headerlink" title="解题思路:动态规划"></a>解题思路:动态规划</h5><h5 id="当遇到反复出现的子问题时-子问题还会包含更小的子问题-然后我们需要解决更小的问题，然后把问题的结果记录出来，最后通过子问题得到原问题的解-该题主要是要用到-if-s-i-s-j-amp-amp-dp-i-1-j-1-dp-i-j-true-回文子串的子集也是回文子串-dp-记录每一次遍历的结果"><a href="#当遇到反复出现的子问题时-子问题还会包含更小的子问题-然后我们需要解决更小的问题，然后把问题的结果记录出来，最后通过子问题得到原问题的解-该题主要是要用到-if-s-i-s-j-amp-amp-dp-i-1-j-1-dp-i-j-true-回文子串的子集也是回文子串-dp-记录每一次遍历的结果" class="headerlink" title="当遇到反复出现的子问题时,子问题还会包含更小的子问题,然后我们需要解决更小的问题，然后把问题的结果记录出来，最后通过子问题得到原问题的解. 该题主要是要用到  if(s[i]===s[j] &amp;&amp; dp[i+1][j-1]) dp[i][j]=true,回文子串的子集也是回文子串 dp 记录每一次遍历的结果"></a>当遇到反复出现的子问题时,子问题还会包含更小的子问题,然后我们需要解决更小的问题，然后把问题的结果记录出来，最后通过子问题得到原问题的解. 该题主要是要用到  if(s[i]===s[j] &amp;&amp; dp[i+1][j-1]) dp[i][j]=true,回文子串的子集也是回文子串 dp 记录每一次遍历的结果</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param &#123;string&#125; s * @return &#123;string&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">longestPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s    <span class="token keyword">let</span> res<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// dp[i][j]=true 当前是回文子串</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span>            <span class="token comment">// dp[i+1][j-i] 包含的子集也是回文子串</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span>            <span class="token comment">// j-i+1>res.length 判断的是当前回文子串的长度是否是最大的</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  res<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第3题:无重复字符的最长子串</title>
      <link href="posts/11a9.html"/>
      <url>posts/11a9.html</url>
      
        <content type="html"><![CDATA[<h5 id="给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。"><a href="#给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。" class="headerlink" title="给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。"></a>给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。</h5><h6 id="使用滑动窗口-给定一个空数组-遍历当前字符串-检查当前值是否在数组中-若不在-将其push到数组中-若在，将当前值所在位置之前并包括其本身都从数组中删除-然后再将其push到数组中-每次push到数组中时，都取max和当前数组长度的最大值赋值给max，最后将max返回-得到最大的长度"><a href="#使用滑动窗口-给定一个空数组-遍历当前字符串-检查当前值是否在数组中-若不在-将其push到数组中-若在，将当前值所在位置之前并包括其本身都从数组中删除-然后再将其push到数组中-每次push到数组中时，都取max和当前数组长度的最大值赋值给max，最后将max返回-得到最大的长度" class="headerlink" title="使用滑动窗口,给定一个空数组,遍历当前字符串,检查当前值是否在数组中,若不在,将其push到数组中,若在，将当前值所在位置之前并包括其本身都从数组中删除,然后再将其push到数组中, 每次push到数组中时，都取max和当前数组长度的最大值赋值给max，最后将max返回 得到最大的长度"></a>使用滑动窗口,给定一个空数组,遍历当前字符串,检查当前值是否在数组中,若不在,将其push到数组中,若在，将当前值所在位置之前并包括其本身都从数组中删除,然后再将其push到数组中, 每次push到数组中时，都取max和当前数组长度的最大值赋值给max，最后将max返回 得到最大的长度</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param &#123;string&#125; s * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 截取之前相同数字前的长度</span>            arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//charAt 返回当前索引所在字符串的值</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">//拿到 最大值</span>        max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第2题:两数相加</title>
      <link href="posts/44cd.html"/>
      <url>posts/44cd.html</url>
      
        <content type="html"><![CDATA[<h5 id="给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。请你将两个数相加，并以相同形式返回一个表示和的链表。"><a href="#给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。请你将两个数相加，并以相同形式返回一个表示和的链表。" class="headerlink" title="给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。请你将两个数相加，并以相同形式返回一个表示和的链表。"></a>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。请你将两个数相加，并以相同形式返回一个表示和的链表。</h5><h5 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js">输入：l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>解释：<span class="token number">342</span> <span class="token operator">+</span> <span class="token number">465</span> <span class="token operator">=</span> <span class="token number">807.</span>输入：l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通用解法"><a href="#通用解法" class="headerlink" title="通用解法"></a>通用解法</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val, next) &#123; *     this.val = (val===undefined ? 0 : val) *     this.next = (next===undefined ? null : next) * &#125; */</span><span class="token comment">/** * @param &#123;ListNode&#125; l1 * @param &#123;ListNode&#125; l2 * @return &#123;ListNode&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> add<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//来判断是否进位</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个空的链表</span>    <span class="token keyword">let</span> head<span class="token operator">=</span>sum<span class="token punctuation">;</span> <span class="token comment">//</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>add <span class="token operator">||</span> l1 <span class="token operator">||</span> l2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> val1<span class="token operator">=</span>l1<span class="token operator">!==</span><span class="token keyword">null</span><span class="token operator">?</span>l1<span class="token punctuation">.</span>val<span class="token operator">:</span><span class="token number">0</span> <span class="token comment">//判断l1是否有值</span>    <span class="token keyword">let</span> val2<span class="token operator">=</span>l2<span class="token operator">!==</span><span class="token keyword">null</span><span class="token operator">?</span>l2<span class="token punctuation">.</span>val<span class="token operator">:</span><span class="token number">0</span> <span class="token comment">//判断l2是否有值</span>    <span class="token keyword">let</span> r1<span class="token operator">=</span>val1 <span class="token operator">+</span> val2 <span class="token operator">+</span> add <span class="token comment">//将l1、l2和进位相加</span>    add<span class="token operator">=</span><span class="token punctuation">(</span>r1<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span>  <span class="token comment">//判断r1是否大于0，看是否进位</span>    sum<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>r1 <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//取r1的个位数</span>    sum<span class="token operator">=</span>sum<span class="token punctuation">.</span>next     <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next <span class="token comment">//判断下一个指针是否存在</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span> l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next     <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span>next <span class="token comment">//返回头部</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第1题:两数之和</title>
      <link href="posts/d10e.html"/>
      <url>posts/d10e.html</url>
      
        <content type="html"><![CDATA[<h5 id="给定一个整数数组-nums-和一个整数目标值-target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是-数组中同一个元素不能使用两遍。"><a href="#给定一个整数数组-nums-和一个整数目标值-target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是-数组中同一个元素不能使用两遍。" class="headerlink" title="给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是,数组中同一个元素不能使用两遍。"></a>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是,数组中同一个元素不能使用两遍。</h5><h2 id="一、直接遍历"><a href="#一、直接遍历" class="headerlink" title="一、直接遍历"></a>一、直接遍历</h2><h5 id="直接遍历两边-第一次遍历找x-第二次遍历找target-x-然后输出结果-复杂度-O-n-2"><a href="#直接遍历两边-第一次遍历找x-第二次遍历找target-x-然后输出结果-复杂度-O-n-2" class="headerlink" title="直接遍历两边,第一次遍历找x,第二次遍历找target-x,然后输出结果.复杂度 O(n^2)"></a>直接遍历两边,第一次遍历找x,第二次遍历找target-x,然后输出结果.复杂度 O(n^2)</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 直接 遍历两遍得出结果</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span>target<span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、obj"><a href="#二、obj" class="headerlink" title="二、obj"></a>二、obj</h2><h5 id="遍历一遍-使用对象作为中间件-把target-x保存下来-复杂度-O-n"><a href="#遍历一遍-使用对象作为中间件-把target-x保存下来-复杂度-O-n" class="headerlink" title="遍历一遍,使用对象作为中间件,把target-x保存下来.复杂度 O(n)"></a>遍历一遍,使用对象作为中间件,把target-x保存下来.复杂度 O(n)</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> num<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>obj<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      obj<span class="token punctuation">[</span>target<span class="token operator">-</span>num<span class="token punctuation">]</span><span class="token operator">=</span>i    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、map"><a href="#三、map" class="headerlink" title="三、map"></a>三、map</h2><h5 id="遍历一遍-使用map作为中间件-把target-x保存下来-复杂度-O-n"><a href="#遍历一遍-使用map作为中间件-把target-x保存下来-复杂度-O-n" class="headerlink" title="遍历一遍,使用map作为中间件,把target-x保存下来.复杂度 O(n)"></a>遍历一遍,使用map作为中间件,把target-x保存下来.复杂度 O(n)</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> map<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>     map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript 的性能优化</title>
      <link href="posts/4e04.html"/>
      <url>posts/4e04.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、GC-算法介绍"><a href="#一、GC-算法介绍" class="headerlink" title="一、GC 算法介绍"></a>一、GC 算法介绍</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>GC 是垃圾回收机制的简写</p><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h3><p>找到内存中的垃圾、并释放和回收空间</p><h3 id="1-3-GC-里的垃圾是什么"><a href="#1-3-GC-里的垃圾是什么" class="headerlink" title="1.3 GC 里的垃圾是什么"></a>1.3 GC 里的垃圾是什么</h3><ul><li>程序中不再需要使用的对象</li><li>程序中不能再访问到的对象</li></ul><h3 id="1-4-GC-算法是什么"><a href="#1-4-GC-算法是什么" class="headerlink" title="1.4 GC 算法是什么"></a>1.4 GC 算法是什么</h3><ul><li>GC 是一种机制, 垃圾回收器完成具体的工作</li><li>工作的内容是查找垃圾、释放空间、回收空间</li><li>算法就是工作时查找和回收遵循的规则</li></ul><h3 id="1-5-常见的-GC-算法"><a href="#1-5-常见的-GC-算法" class="headerlink" title="1.5 常见的 GC 算法"></a>1.5 常见的 GC 算法</h3><ul><li>引用计数<ul><li>核心思想: 设置引用计数器,判断当前引用计数是否为 0</li><li>引用计数器</li><li>引用关系发生改变时修改引用数字</li><li>引用数字为 0 时立即回收</li><li>优点<ul><li>发现垃圾时立即回收</li><li>最大限度减少程序的卡顿</li></ul></li><li>缺点<ul><li>无法回收循环引用的对象</li><li>资源消耗大</li></ul></li></ul></li><li>标记清除<ul><li>核心思想: 分 标记和清除 两个阶段完成</li><li>遍历所有对象找标记活动对象</li><li>遍历所有的对象清除没有标记对象</li><li>标记过后,回收相应的空间</li><li>优点<ul><li>可以回收循环引用的对象</li></ul></li><li>缺点<ul><li>会造成空间碎片化,浪费空间(回收的地址空间不连续,造成占用空间大,但是很多空间都是空的)</li><li>不会立即回收垃圾对象</li></ul></li></ul></li><li>标记整理<ul><li>标记整理是标记清除的增强操作</li><li>标记阶段的步骤都是一样的</li><li>清除阶段会先执行整理,然后再移动对象位置</li><li>优点<ul><li>解决空间碎片化</li></ul></li><li>缺点<ul><li>不能立即回收垃圾对象</li></ul></li></ul></li><li>分代回收</li></ul><h2 id="二、-V8-引擎"><a href="#二、-V8-引擎" class="headerlink" title="二、 V8 引擎"></a>二、 V8 引擎</h2><h3 id="2-1-简单了解-V8"><a href="#2-1-简单了解-V8" class="headerlink" title="2.1 简单了解 V8"></a>2.1 简单了解 V8</h3><ul><li>V8 一款主流的 javaScript 执行引擎</li><li>V8 采用即时编译</li><li>V8 内存设限<ul><li>64 位 1.5G</li><li>32 位 800M</li></ul></li></ul><h3 id="2-2-V8-垃圾回收策略"><a href="#2-2-V8-垃圾回收策略" class="headerlink" title="2.2 V8 垃圾回收策略"></a>2.2 V8 垃圾回收策略</h3><ul><li>采用分代回收的思想</li><li>内存分为 新生代、老生代</li><li>针对不同对象采用不同算法</li></ul><h3 id="2-3-回收新生代对象"><a href="#2-3-回收新生代对象" class="headerlink" title="2.3 回收新生代对象"></a>2.3 回收新生代对象</h3><ul><li>新生代 <blockquote><p>新生代指的是 存活时间较短的对象 新生代的空间相对老生代较小(32M|16M) </p></blockquote></li><li>新生代回收实现 <blockquote><p>回收过程采用复制算法+标记整理 将新生代空间等分为两个空间,FROM 使用空间和 TO 空闲空间,活动对象存储于 From 空间,当 From 空间储存一定的对象后,触发 GC 操作,将 From 空间进行标记整理, 使用标记整理后将 From 空间的活动对象拷贝到 To 空间,并把 From 空间完全释放 </p></blockquote></li><li>回收细节说明<ul><li>如果 拷贝 过程中,新生代对象在老生代也会使用,就会出现晋升,将新生代对象移动至老生代对象</li><li>一轮 GC 还存活的新生代对象需要晋升</li><li>当 To 空间的使用率大于 25%</li></ul></li></ul><h3 id="2-4-回收老生代对象"><a href="#2-4-回收老生代对象" class="headerlink" title="2.4 回收老生代对象"></a>2.4 回收老生代对象</h3><ul><li><p>老生代 <blockquote><p>新生代指的是 存活时间较长的对象 老生代的空间(1.4G|700M) </p></blockquote></p></li><li><p>老生代回收实现 <blockquote><p>先使用标记清除完成垃圾空间的回收,当新生代晋升时,晋升的对象所需要的空间,在老生代中不足,就会触发标记整理对老生代空间进行优化,同时还会采用增量标记进行效率优化 </p></blockquote></p></li></ul><h2 id="三、performance"><a href="#三、performance" class="headerlink" title="三、performance"></a>三、performance</h2><h3 id="3-1-performance-简单介绍"><a href="#3-1-performance-简单介绍" class="headerlink" title="3.1 performance 简单介绍"></a>3.1 performance 简单介绍</h3><ul><li>GC 的目的是为了实现内存空间的良性循环</li><li>良性循环的基石是合理使用</li><li>时刻关注才能确定是否合理</li><li>performance 提供多种监控方式</li></ul><h3 id="3-2-performance-使用步骤"><a href="#3-2-performance-使用步骤" class="headerlink" title="3.2 performance 使用步骤"></a>3.2 performance 使用步骤</h3><ul><li>打开浏览器输入目标网址</li><li>进入开发人员工具面板,选择性能</li><li>开启录制功能,访问具体界面</li><li>执行用户行为,一段时间后停止录制</li><li>分析界面中记录的内存信息</li></ul><h3 id="3-3-内存问题的外在表现"><a href="#3-3-内存问题的外在表现" class="headerlink" title="3.3 内存问题的外在表现"></a>3.3 内存问题的外在表现</h3><ul><li>页面出现延迟加载或经常型暂停</li><li>页面持续性出现糟糕的性能</li><li>页面的性能随时间延长越来越差</li></ul><h3 id="3-4-监控内存的几种方式"><a href="#3-4-监控内存的几种方式" class="headerlink" title="3.4 监控内存的几种方式"></a>3.4 监控内存的几种方式</h3><ul><li>界定内存问题的标准<ul><li>内存泄漏：内存使用持续升高</li><li>内存膨胀：在多数设备上都存在性能问题</li><li>频繁垃圾回收：通过内存变化图进行分析</li></ul></li><li>监控内存的几种方式<ul><li>浏览器的任务管理器</li><li>Timeline 时序图记录</li><li>堆快照查找分离 DOM<ul><li>界面存活在 DOM 树上</li><li>垃圾对象时的 DOM 节点</li><li>分离状态的 DOM 节点</li></ul></li><li>判断是否存在频繁的垃圾回收<ul><li>timeline 中的频繁上升下降</li><li>任务管理器中数据频繁的增加减小</li></ul></li></ul></li></ul><h2 id="四、代码优化介绍"><a href="#四、代码优化介绍" class="headerlink" title="四、代码优化介绍"></a>四、代码优化介绍</h2><h3 id="4-1-慎用全局变量"><a href="#4-1-慎用全局变量" class="headerlink" title="4.1 慎用全局变量"></a>4.1 慎用全局变量</h3><ul><li>全局变量定义在全局执行上下文,是所有作用域链的顶端</li><li>全局执行上下文一直存在于上下文执行栈,直到程序退出</li><li>如果某个局部作用域出现了同名变量则会遮蔽或污染全局变量</li></ul><h3 id="4-2-缓存全局变量"><a href="#4-2-缓存全局变量" class="headerlink" title="4.2 缓存全局变量"></a>4.2 缓存全局变量</h3><ul><li>将无法避免的全局变量缓存到局部</li></ul><h3 id="4-3-通过原型给构造函数添加方法"><a href="#4-3-通过原型给构造函数添加方法" class="headerlink" title="4.3 通过原型给构造函数添加方法"></a>4.3 通过原型给构造函数添加方法</h3><h3 id="4-4-避开闭包陷阱-给闭包储存的变量清空"><a href="#4-4-避开闭包陷阱-给闭包储存的变量清空" class="headerlink" title="4.4 避开闭包陷阱,给闭包储存的变量清空"></a>4.4 避开闭包陷阱,给闭包储存的变量清空</h3><h3 id="4-5-避免属性访问方法使用-添加一个方法返回属性"><a href="#4-5-避免属性访问方法使用-添加一个方法返回属性" class="headerlink" title="4.5 避免属性访问方法使用(添加一个方法返回属性)"></a>4.5 避免属性访问方法使用(添加一个方法返回属性)</h3><h3 id="4-6-For-循环优化"><a href="#4-6-For-循环优化" class="headerlink" title="4.6 For 循环优化"></a>4.6 For 循环优化</h3><ul><li>将变量的数组的长度提前获取</li></ul><h3 id="4-7-选择最佳的循环方法"><a href="#4-7-选择最佳的循环方法" class="headerlink" title="4.7 选择最佳的循环方法"></a>4.7 选择最佳的循环方法</h3><ul><li>遍历数组,最先选择 foreach</li><li>其次 for</li></ul><h3 id="4-8-节点添加优化"><a href="#4-8-节点添加优化" class="headerlink" title="4.8 节点添加优化"></a>4.8 节点添加优化</h3><ul><li>采用文档碎片 createDocumentFragment<ul><li>先将需要的元素,添加到碎片中,然后再将碎片添加到目标元素,减少消耗</li></ul></li></ul><h3 id="4-9-克隆优化节点操作"><a href="#4-9-克隆优化节点操作" class="headerlink" title="4.9 克隆优化节点操作"></a>4.9 克隆优化节点操作</h3><ul><li>使用 cloneNode,克隆相似的节点,添加</li></ul><h2 id="4-10-直接量替换-Object-操作"><a href="#4-10-直接量替换-Object-操作" class="headerlink" title="4.10 直接量替换 Object 操作"></a>4.10 直接量替换 Object 操作</h2><ul><li>不使用 new</li></ul><h2 id="五、问题"><a href="#五、问题" class="headerlink" title="五、问题"></a>五、问题</h2><h3 id="5-1-什么是可达对象"><a href="#5-1-什么是可达对象" class="headerlink" title="5.1 什么是可达对象?"></a>5.1 什么是可达对象?</h3><blockquote><p>可以为访问到的对象; 可达的标准: 必须是从全局变量可以访问到 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步编程</title>
      <link href="posts/d979.html"/>
      <url>posts/d979.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、-同步编程和异步编程"><a href="#一、-同步编程和异步编程" class="headerlink" title="一、 同步编程和异步编程"></a>一、 同步编程和异步编程</h2><blockquote><p>同步编程: 主线程从上到下执行<br>异步编程: 主线程从上到下执行时,遇到异步函数时,会将其放入到工作线程，继续下面的代码，当主线程执行完毕,当工作线程工作完毕时，消息队列会通知主线程,主线程从消息队列的头部取消息,并执行其代码,之后会循环的从消息队列取消息，直到消息队列也为空,执行结束</p></blockquote><h2 id="二、事件循环和消息队列"><a href="#二、事件循环和消息队列" class="headerlink" title="二、事件循环和消息队列"></a>二、事件循环和消息队列</h2><blockquote><p>事件循环: 主线程重复从消息队列取消息的过程.事件循环机制就是主线程从消息队列取消息，执行当前消息,当主线程的执行完成后,会继续取下一个消息(监听主线程和消息队列，当主线程执行完毕后,且消息队列有回调函数，通知其取消息)<br>消息队列: 异步执行返回的回调函数,按照工作线程的执行结束的顺序依次排队加入到消息队列中,先进先出的队列，存储各种消息</p></blockquote><h2 id="三、异步编程的几种方式"><a href="#三、异步编程的几种方式" class="headerlink" title="三、异步编程的几种方式"></a>三、异步编程的几种方式</h2><ul><li>回调函数</li><li>事件监听</li><li>发布/订阅</li><li>promise</li><li>Generator</li><li>Async/Await</li></ul><h2 id="四、Promise-异步方案、宏任务-微任务队列"><a href="#四、Promise-异步方案、宏任务-微任务队列" class="headerlink" title="四、Promise 异步方案、宏任务/微任务队列"></a>四、Promise 异步方案、宏任务/微任务队列</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>宏任务</li></ul><ul><li>微任务</li></ul><h2 id="五、Generator-异步方案、Async-Await"><a href="#五、Generator-异步方案、Async-Await" class="headerlink" title="五、Generator 异步方案、Async/Await"></a>五、Generator 异步方案、Async/Await</h2><ul><li>Generator<ul><li>生成器,在创建的时候不会被执行,只有调用next方法,才会调用,next种可以传递一个参数,表示上一个yield表达式返回的值<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// => &#123;value: 6, done: false&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => &#123;value: 8, done: false&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// => &#123;value: 42, done: true&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>解决地狱回调问题<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li>Async/Await<ul><li>Async函数返回一个promise</li><li>await后面的代码都是同步进行的</li><li>若 await 后面的promise返回错误,尽量使用 try catch，捕捉错误</li><li>多个await 时,配合promsie.all可以缩短运行时间<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">init</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token number">111</span>  <span class="token keyword">return</span> num<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">//121</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// promise</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="posts/f609.html"/>
      <url>posts/f609.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、为什么要学习函数式编程？"><a href="#一、为什么要学习函数式编程？" class="headerlink" title="一、为什么要学习函数式编程？"></a>一、为什么要学习函数式编程？</h2><ul><li>react 的一些方法就是由函数式编程来实现的</li><li>打包过程中可以更好的进行 tree shaking</li><li>抛弃烦人的 this</li><li>代码简洁,开发快速</li></ul><h2 id="二、函数式编程"><a href="#二、函数式编程" class="headerlink" title="二、函数式编程"></a>二、函数式编程</h2><h3 id="2-1-什么是函数式编程"><a href="#2-1-什么是函数式编程" class="headerlink" title="2.1 什么是函数式编程"></a>2.1 什么是函数式编程</h3><ul><li>面向对象的斯维方式是抽象对象和事务，把现实中的对象和事务抽象成程序中的对象和类，并通过继承、多态、封装来表达之间的关系</li><li>函数式编程，是抽象过程,是数字当中的函数映射关系<ul><li>相同的输入始终要有相同的输出</li></ul></li></ul><h3 id="2-2-函数是一等公民"><a href="#2-2-函数是一等公民" class="headerlink" title="2.2 函数是一等公民"></a>2.2 函数是一等公民</h3><ul><li>函数可以储存在变量中</li><li>函数可以作为参数</li><li>函数作为返回值</li></ul><h3 id="2-3-高阶函数-higher-order-function"><a href="#2-3-高阶函数-higher-order-function" class="headerlink" title="2.3 高阶函数 (higher-order-function)"></a>2.3 高阶函数 (higher-order-function)</h3><ul><li>把函数作为参数传递给另一个函数</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// foreach 的实现</span><span class="token keyword">function</span> <span class="token function">foreach</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token function">foreach</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// filter 的实现</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token function">filter</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>把函数作为另一个函数的返回结果</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 函数只会执行一次</span><span class="token keyword">function</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> done <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      done <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> pay <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">money</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">支付了: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>money<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token function">pay</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-常用的高阶函数"><a href="#2-4-常用的高阶函数" class="headerlink" title="2.4 常用的高阶函数"></a>2.4 常用的高阶函数</h3><ul><li>map 遍历数组,对数组的每一个元素进行操作</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// map 实现</span><span class="token keyword">function</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>arr <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> v <span class="token operator">*</span> v<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1, 25, 64, 16]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>every 数组中每一个元素都满足条件返回 true</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// every 的实现</span><span class="token keyword">function</span> <span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">every</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> v <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>some 数组中只要有一个元素满足条件就返回 true</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// some 的实现</span><span class="token keyword">function</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">some</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> v <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-闭包"><a href="#2-5-闭包" class="headerlink" title="2.5 闭包"></a>2.5 闭包</h3><ul><li>什么是闭包<ul><li>有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数</li></ul></li><li>必报的本质<ul><li>函数在执行时候会被放到一个执行栈上,当函数执行完毕之后,会从执行栈上移除,但是堆上的作用域成员因为被外部引用不能释放,因此内部函数依然可以访问外部函数的成员</li></ul></li></ul><h3 id="2-6-纯函数"><a href="#2-6-纯函数" class="headerlink" title="2.6 纯函数"></a>2.6 纯函数</h3><ul><li><p>什么是纯函数</p><ul><li>相同的输入始终会得到相同的输出</li></ul></li><li><p>纯函数的好处</p><ul><li>可缓存</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 模拟 memoize 的实现</span><span class="token keyword">function</span> <span class="token function">memoize</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9999'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">&#125;</span><span class="token keyword">let</span> getMemoize <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>getNum<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMemoize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMemoize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMemoize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMemoize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可测试</li><li>并行处理<ul><li>并行环境下 可行任意运行纯函数</li></ul></li></ul></li><li><p>副作用</p><ul><li>全局变量</li><li>配置文件</li><li>数据库</li><li>用户的输入</li></ul></li></ul><h3 id="2-7-柯里化"><a href="#2-7-柯里化" class="headerlink" title="2.7 柯里化"></a>2.7 柯里化</h3><h2 id="三、-函数式编程的特性"><a href="#三、-函数式编程的特性" class="headerlink" title="三、 函数式编程的特性"></a>三、 函数式编程的特性</h2><h2 id="四、函数式编程的应用场景"><a href="#四、函数式编程的应用场景" class="headerlink" title="四、函数式编程的应用场景"></a>四、函数式编程的应用场景</h2><h2 id="五、函数式编程的库"><a href="#五、函数式编程的库" class="headerlink" title="五、函数式编程的库"></a>五、函数式编程的库</h2>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化</title>
      <link href="posts/b47b.html"/>
      <url>posts/b47b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>nodejs 中使用 Commonjs<br>浏览器中使用 ES module,但是他存在环境兼容问题,因为 ES module 是 es6 的新特性 </p></blockquote><h2 id="一、ES-module"><a href="#一、ES-module" class="headerlink" title="一、ES module"></a>一、ES module</h2><h3 id="1-1-ES-module-的使用"><a href="#1-1-ES-module-的使用" class="headerlink" title="1.1 ES module 的使用"></a>1.1 ES module 的使用</h3><ul><li> 给 type 添加 module属性,就可以使用ES module<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li> 给 type 添加 nomodule属性,就可以判断出不兼容 ES module 的浏览器<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script nomodule<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="1-2-ES-module-的特性"><a href="#1-2-ES-module-的特性" class="headerlink" title="1.2 ES module 的特性"></a>1.2 ES module 的特性</h3><ul><li>自动采用严格模式，忽略 “use strict”<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span><span class="token operator">></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>每一个ES module 都有一个私有作用域<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span><span class="token operator">></span>  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">600</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 600</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span><span class="token operator">></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// foo is not defined</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>ESM 通过 CORS 来请求外部js模块的 (只要服务器设置了CORS 接口,就可以跨源通信),不支持文件访问</li><li>ESM 自动延迟执行脚本,相当于 defer属性(当页面渲染完成后执行)</li></ul><h3 id="1-3-ES-module-的导入和导出"><a href="#1-3-ES-module-的导入和导出" class="headerlink" title="1.3 ES module 的导入和导出"></a>1.3 ES module 的导入和导出</h3><ul><li>当使用 export 导出多个变量时, 可以在文件的最后,导出一个对象,将需要导出的变量添加进去,这样也可以给他们设置重定向</li><li>export default 默认导出,只有一个</li><li>注意事项<ul><li>导入的成员是一个只读的</li><li>导出的成员不是一个字面量对象,同理导入的成员不是一个解构赋值</li><li>导入的成员是对导出文件的引用,不是复制</li><li>导入文件时,相对路径的 “./“ 不能省,后缀也不能省</li><li>import {} from “./module.js” 或者 import “./module.js”  只是对文件的执行,不引用任何模块</li><li>当导出成员过多时, import * as mod from  “./module.js” mod作为一个对象,导出的文件的变量都时mod的属性,可以直接使用 </li><li>import() 动态导入,加载完毕返回一个promise<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./module.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  + 当 export 和export default 同时存在的导入</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>js<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token keyword">default</span> <span class="token keyword">as</span> heart<span class="token punctuation">&#125;</span> <span class="token keyword">from</span>  <span class="token string">"./module.js"</span> <span class="token comment">// heart 为默认导出</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 或者是 <span class="token operator">--</span><span class="token operator">></span><span class="token keyword">import</span> heart<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span> age<span class="token punctuation">&#125;</span>  <span class="token keyword">from</span>  <span class="token string">"./module.js"</span> <span class="token comment">// heart为默认导出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="二、-ES-module-和-commonjs"><a href="#二、-ES-module-和-commonjs" class="headerlink" title="二、 ES module 和 commonjs"></a>二、 ES module 和 commonjs</h2><h3 id="2-1-两者交互"><a href="#2-1-两者交互" class="headerlink" title="2.1 两者交互"></a>2.1 两者交互</h3><ul><li> ES module 中可以导入 commonjs模块</li><li> Commonjs 中不能导入 ES module</li><li> Commonjs 始终汁会导出一个默认成员</li><li> 注意 import 不是解构导出对象</li></ul><h3 id="2-2-两者使用差异"><a href="#2-2-两者使用差异" class="headerlink" title="2.2 两者使用差异"></a>2.2 两者使用差异</h3><ul><li>commonjs<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 当前文件</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span> <span class="token comment">//E:\myPractice\advanced\pratice\js\module.js</span><span class="token comment">// 当前目录</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span> <span class="token comment">//E:\myPractice\advanced\pratice\js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>ES module<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// __filename 和 __dirname 都是那不到的</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token comment">// file:///E:/myPractice/advanced/pratice/js/module.mjs</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fileURLToPath <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'url'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> dirname <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token keyword">const</span> __filename <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span> <span class="token comment">//E:\myPractice\advanced\pratice\js\module.mjs</span><span class="token keyword">const</span> __dirname <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span> <span class="token comment">//E:\myPractice\advanced\pratice\js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>node执行 ES module<pre class="line-numbers language-js" data-language="js"><code class="language-js">node  <span class="token operator">--</span>experimental<span class="token operator">-</span>modules 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-3-两者区别"><a href="#2-3-两者区别" class="headerlink" title="2.3 两者区别"></a>2.3 两者区别</h3><ul><li>ES module <ul><li>是静态引入,编译时加载</li><li>可以使用 tree-shaking</li><li>输出的值是引用,不能修改</li><li>import() 函数,运行时异步加载</li></ul></li><li>Commonjs <ul><li>是动态引入,执行时加载</li><li>加载的是一个对象</li><li>输出的值是拷贝</li><li>require() 运行时同步加载</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写promise</title>
      <link href="posts/b2f4.html"/>
      <url>posts/b2f4.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、prosmise的出现解决了什么问题？"><a href="#一、prosmise的出现解决了什么问题？" class="headerlink" title="一、prosmise的出现解决了什么问题？"></a>一、prosmise的出现解决了什么问题？</h2><ol><li>回到地狱问题</li><li>代码的可读性更高</li></ol><h2 id="二、promise的状态及使用方法"><a href="#二、promise的状态及使用方法" class="headerlink" title="二、promise的状态及使用方法"></a>二、promise的状态及使用方法</h2><ul><li>promise 一共有三中状态<ul><li>pedding 等待的状态,只是暂时的 一定会转为fulfilled或者rejected</li><li>fulfilled 成功的状态 </li><li>rejected  失败的状态</li></ul></li><li>promise的 使用方法<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">myPromise</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了么？就这样结束了么？'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">///1111  成功的回调</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//catch 接受promise的所有报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="三、then方法的实现"><a href="#三、then方法的实现" class="headerlink" title="三、then方法的实现"></a>三、then方法的实现</h2><h3 id="3-1-简单的then-实现"><a href="#3-1-简单的then-实现" class="headerlink" title="3.1 简单的then 实现"></a>3.1 简单的then 实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Mypromise</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"pedding"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 失败的返回参数</span>       <span class="token comment">//成功的回调函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">resolve</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"fullFilled"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//失败的回到函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">reject</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"rejected"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span>reason<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//执行函数</span>        <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//失败时执行reject函数</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//then 方法的实现</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulFilled<span class="token punctuation">,</span>onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//成功执行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"fullFilled"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//失败执行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"rejected"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">myPromise</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了么？就这样结束了么？'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//打印成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-为promise增加发布订阅模式，使pedding异步转化为成功或者失败状态也可以执行"><a href="#3-2-为promise增加发布订阅模式，使pedding异步转化为成功或者失败状态也可以执行" class="headerlink" title="3.2 为promise增加发布订阅模式，使pedding异步转化为成功或者失败状态也可以执行"></a>3.2 为promise增加发布订阅模式，使pedding异步转化为成功或者失败状态也可以执行</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token keyword">class</span> <span class="token class-name">Mypromise</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"pedding"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 失败的返回参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//成功的回调函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//失败的回调函数</span>       <span class="token comment">//成功的回调函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">resolve</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"fullFilled"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>          <span class="token comment">//成功函数的执行</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token operator">=></span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//失败的回到函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">reject</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"rejected"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span>reason<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>          <span class="token comment">//失败函数的执行</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token operator">=></span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//执行函数</span>        <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//失败时执行reject函数</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//then 方法的实现</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulFilled<span class="token punctuation">,</span>onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//同步成功执行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"fullFilled"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//同步失败执行</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"rejected"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 在pedding状态时,将成功和失败的回调函数分别 push到 mypromise自身当中,</span>    <span class="token comment">// 然后当转台改变时 再去执行相应的函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">myPromise</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 异步调用</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment">// resolve(1111)</span>    <span class="token comment">// throw new Error('失败了')</span>    <span class="token comment">// reject('失败了么？就这样结束了么？')</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-增加then的链式调用"><a href="#3-3-增加then的链式调用" class="headerlink" title="3.3 增加then的链式调用"></a>3.3 增加then的链式调用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//判断是否是函数</span><span class="token keyword">const</span> <span class="token function-variable function">isFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'function'</span><span class="token keyword">class</span> <span class="token class-name">Mypromise</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"pedding"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">'undefined'</span><span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span><span class="token string">'undefined'</span><span class="token punctuation">;</span> <span class="token comment">// 失败的返回参数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//成功的回调函数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//失败的回调函数</span>       <span class="token comment">//成功的回调函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">resolve</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"fullFilled"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>          <span class="token comment">//成功函数的执行</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token operator">=></span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//失败的回到函数</span>      <span class="token keyword">let</span> <span class="token function-variable function">reject</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token string">"rejected"</span><span class="token punctuation">;</span>  <span class="token comment">//初始值状态</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token operator">=</span>reason<span class="token punctuation">;</span> <span class="token comment">//成功的返回参数</span>          <span class="token comment">//失败函数的执行</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token operator">=></span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//执行函数</span>        <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//失败时执行reject函数</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//then 方法的实现</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulFilled<span class="token punctuation">,</span>onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 将两个参数，都设这成可选的</span>      onFulFilled <span class="token operator">=</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>onFulFilled<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function-variable function">onFulFilled</span> <span class="token operator">:</span> <span class="token parameter">data</span> <span class="token operator">=></span> data      onRejected <span class="token operator">=</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> err      <span class="token punctuation">&#125;</span>      <span class="token comment">//先调用自己</span>      <span class="token keyword">let</span> selfPromise<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token comment">//同步成功执行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"fullFilled"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//拿到 onFullFilled函数返回的值,再次执行resolve或者 reject</span>             <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>             <span class="token comment">//判断 x返回值 是否还是一个 promise</span>              <span class="token function">checkPromise</span><span class="token punctuation">(</span>selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//同步失败执行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"rejected"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>              <span class="token function">checkPromise</span><span class="token punctuation">(</span>selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 异步执行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">==</span><span class="token string">"pedding"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onResolvedCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulFilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>                <span class="token function">checkPromise</span><span class="token punctuation">(</span>selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>                <span class="token function">checkPromise</span><span class="token punctuation">(</span>selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> selfPromise  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//检查是否为promise</span><span class="token keyword">function</span> <span class="token function">checkPromise</span><span class="token punctuation">(</span><span class="token parameter">selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// selfPromiseh 和返回值不能是同一个 否则直接返回报错</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>selfPromise<span class="token operator">===</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Chaining cycle detected for promise #&lt;promise>'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//当x是函数或者对象时 执行判断</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token operator">===</span><span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> x<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> isFirst<span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>      <span class="token comment">//将then抽离出来</span>      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>      <span class="token comment">//判断then 是否是一个方法</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>then<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token parameter">y</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>isFirst<span class="token punctuation">)</span> <span class="token keyword">return</span>          isFirst<span class="token operator">=</span><span class="token boolean">true</span>          <span class="token function">checkPromise</span><span class="token punctuation">(</span>selfPromise<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">r</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>isFirst<span class="token punctuation">)</span> <span class="token keyword">return</span>          isFirst<span class="token operator">=</span><span class="token boolean">true</span>          <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//x不是一个 promise</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isFirst<span class="token punctuation">)</span> <span class="token keyword">return</span>        isFirst<span class="token operator">=</span><span class="token boolean">true</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 保证只执行一次</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>isFirst<span class="token punctuation">)</span> <span class="token keyword">return</span>      isFirst<span class="token operator">=</span><span class="token boolean">true</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//直接 执行x</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、其他方法的实现"><a href="#四、其他方法的实现" class="headerlink" title="四、其他方法的实现"></a>四、其他方法的实现</h2><h3 id="4-1-catch方法的实现-捕捉到promise中的-错误"><a href="#4-1-catch方法的实现-捕捉到promise中的-错误" class="headerlink" title="4.1 catch方法的实现 捕捉到promise中的 错误"></a>4.1 catch方法的实现 捕捉到promise中的 错误</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Mypromise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">catch</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-2-所有的promise都成功返回true，否则返回false"><a href="#4-2-所有的promise都成功返回true，否则返回false" class="headerlink" title="4.2 所有的promise都成功返回true，否则返回false"></a>4.2 所有的promise都成功返回true，否则返回false</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** @param 验证是否是一个 promise*/</span><span class="token keyword">const</span> <span class="token function-variable function">isPromise</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">.</span>then <span class="token operator">==</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">//实现 all方法</span>  <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">lists</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//也要验证 lists是一个数组</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">/*      * @param 数组中的 索引  data当前索引对应的执行结果      * @param 当到最后一项时，执行resolve      */</span>      <span class="token comment">//数组中的 索引  data 当前索引对应的参数</span>      <span class="token keyword">let</span> resArr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//保存执行过程中的结果</span>      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">processData</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        resArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>data        index<span class="token operator">+=</span><span class="token number">1</span> <span class="token comment">//执行一次 调用一次，保证每一个都执行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>resArr<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">processData</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>data<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token comment">//当报错时直接走出循环</span>            <span class="token keyword">return</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>          <span class="token function">processData</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-race方法的-实现"><a href="#4-3-race方法的-实现" class="headerlink" title="4.3 race方法的 实现"></a>4.3 race方法的 实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">lists</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">err</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token keyword">return</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-resolve方法的实现-返回一个返回正确的promise"><a href="#4-4-resolve方法的实现-返回一个返回正确的promise" class="headerlink" title="4.4 resolve方法的实现,返回一个返回正确的promise"></a>4.4 resolve方法的实现,返回一个返回正确的promise</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> value    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-reject方法的实现"><a href="#4-5-reject方法的实现" class="headerlink" title="4.5 reject方法的实现"></a>4.5 reject方法的实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mypromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-finally方法的实现"><a href="#4-6-finally方法的实现" class="headerlink" title="4.6 finally方法的实现"></a>4.6 finally方法的实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">finally</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token parameter">value</span> <span class="token operator">=></span> Mypromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">)</span>        <span class="token punctuation">,</span>        <span class="token parameter">reason</span> <span class="token operator">=></span> Mypromise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> reason <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js深浅copy</title>
      <link href="posts/159a.html"/>
      <url>posts/159a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>深copy和浅copy都是对于引用数据类型的。<br>浅copy就只是复制对象的引用,如果copy后的对象发生变化,原对象也会发生变化,只有当深copy才是真正地对象的copy。</p></blockquote><h2 id="一、浅copy及常用的浅copy的一些方法"><a href="#一、浅copy及常用的浅copy的一些方法" class="headerlink" title="一、浅copy及常用的浅copy的一些方法"></a>一、浅copy及常用的浅copy的一些方法</h2><h5 id="给定一个引用数据类型A-当B复制了A后-B改变-A也会跟着改变"><a href="#给定一个引用数据类型A-当B复制了A后-B改变-A也会跟着改变" class="headerlink" title="给定一个引用数据类型A,当B复制了A后,B改变,A也会跟着改变"></a>给定一个引用数据类型A,当B复制了A后,B改变,A也会跟着改变</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> b<span class="token operator">=</span>a<span class="token punctuation">;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[5,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[5,2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-Object-assign"><a href="#1-1-Object-assign" class="headerlink" title="1.1 Object.assign()"></a>1.1 Object.assign()</h3><h5 id="将源对象中所有的可枚举属性-复制到目标对象"><a href="#将源对象中所有的可枚举属性-复制到目标对象" class="headerlink" title="将源对象中所有的可枚举属性,复制到目标对象"></a>将源对象中所有的可枚举属性,复制到目标对象</h5><h5 id="Object-assign-target–目标对象-可以跟多个参数-且后者会覆盖前者"><a href="#Object-assign-target–目标对象-可以跟多个参数-且后者会覆盖前者" class="headerlink" title="Object.assign(target–目标对象,可以跟多个参数,且后者会覆盖前者)"></a>Object.assign(target–目标对象,可以跟多个参数,且后者会覆盖前者)</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">88888</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span>obj<span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">7777</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">//&#123;name: "xiner", age: &#123;a:7777&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">//&#123;name: "xiner", age: &#123;a:7777&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只能copy原对象的自身属性和symbol值的属性<br>不能copy原对象不可枚举的属性和继承的属性,也不能copy null和undefined</p></blockquote><h3 id="1-2-扩展运算符"><a href="#1-2-扩展运算符" class="headerlink" title="1.2 扩展运算符"></a>1.2 扩展运算符</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">88888</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>obj<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token number">7777</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">//&#123;name: "xiner", age: &#123;c:7777&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">//&#123;name: "xiner", age: &#123;c:7777&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-数组的方法-slice-concat"><a href="#1-3-数组的方法-slice-concat" class="headerlink" title="1.3 数组的方法 slice concat"></a>1.3 数组的方法 slice concat</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// slice</span><span class="token keyword">let</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1,2,3,4,5,[8,8,9]]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">//[1,2,3,4,5,[8,8,9]]</span><span class="token comment">// concat</span><span class="token keyword">let</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token operator">=</span>arr2<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1,2,3,4,5,[8,8,9]]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">//[1,2,3,4,5,[8,8,9]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h5><blockquote><p>1.赋值运算符 = 实现的是浅拷贝，只拷贝对象的引用值；<br>2.数组和对象自带的拷贝方法都是“首层浅拷贝”</p></blockquote><h2 id="二、深copy及深copy的一些方法"><a href="#二、深copy及深copy的一些方法" class="headerlink" title="二、深copy及深copy的一些方法"></a>二、深copy及深copy的一些方法</h2><h5 id="深copy后-两者没有任何关系"><a href="#深copy后-两者没有任何关系" class="headerlink" title="深copy后,两者没有任何关系"></a>深copy后,两者没有任何关系</h5><h3 id="2-1-JSON-parse-和-JSON-stringify"><a href="#2-1-JSON-parse-和-JSON-stringify" class="headerlink" title="2.1 JSON.parse 和 JSON.stringify"></a>2.1 JSON.parse 和 JSON.stringify</h3><h5 id="JSON-parse-把字符串转化为一个js对象"><a href="#JSON-parse-把字符串转化为一个js对象" class="headerlink" title="JSON,parse 把字符串转化为一个js对象"></a>JSON,parse 把字符串转化为一个js对象</h5><h5 id="JSON-stringify-把对象转换为一个字符串"><a href="#JSON-stringify-把对象转换为一个字符串" class="headerlink" title="JSON.stringify 把对象转换为一个字符串"></a>JSON.stringify 把对象转换为一个字符串</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">88888</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">9999</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">//&#123;name: "xiner", age: &#123;a:88888&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">//&#123;name: "xiner", age: &#123;a:9999&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="缺点-不能处理包含函数的对象和数组"><a href="#缺点-不能处理包含函数的对象和数组" class="headerlink" title="缺点: 不能处理包含函数的对象和数组"></a>缺点: 不能处理包含函数的对象和数组</h5><h3 id="2-2-使用递归实现深copy"><a href="#2-2-使用递归实现深copy" class="headerlink" title="2.2 使用递归实现深copy"></a>2.2 使用递归实现深copy</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> resObj<span class="token operator">=</span>source<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Array<span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//判断赋值的是数组还是对象</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//遍历</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 自己本身有的，不是继承来的</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断属性值是否是引用数据类型</span>        resObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor<span class="token operator">===</span>Array<span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//判断属性值是数组还是对象</span>        resObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">deepClone</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//递归</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        resObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">//直接赋值</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> resObj <span class="token comment">//返回值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js继承</title>
      <link href="posts/ffd3.html"/>
      <url>posts/ffd3.html</url>
      
        <content type="html"><![CDATA[<h5 id="js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式"><a href="#js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式" class="headerlink" title="js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式"></a>js中继承的方式有很多种，下面我们来简单介绍一下继承的几种方式</h5><h2 id="一、es5中的继承方式"><a href="#一、es5中的继承方式" class="headerlink" title="一、es5中的继承方式"></a>一、es5中的继承方式</h2><h5 id="首先我们先引入父类"><a href="#首先我们先引入父类" class="headerlink" title="首先我们先引入父类"></a>首先我们先引入父类</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Heart</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token operator">||</span><span class="token string">"小明"</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address<span class="token operator">||</span><span class="token string">"山西"</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' 是一个 '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token string">' 人'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">let</span> heart<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小军'</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Childheart</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>heart <span class="token comment">//子类的原型指向父类的实例</span> <span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span>address<span class="token operator">=</span><span class="token string">'上海'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小军</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 58, 58588, 8888]</span> firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span> secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小军</span> firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小红 是一个 上海 人</span> secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小军 是一个 北京 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-主要利用的是子类的原型指向父类的实例"><a href="#实现方式-主要利用的是子类的原型指向父类的实例" class="headerlink" title="实现方式:主要利用的是子类的原型指向父类的实例"></a>实现方式:主要利用的是子类的原型指向父类的实例</h5><h5 id="优点：-简单-父类的方法都可以服用"><a href="#优点：-简单-父类的方法都可以服用" class="headerlink" title="优点： 简单, 父类的方法都可以服用"></a>优点： 简单, 父类的方法都可以服用</h5><h5 id="缺点：-当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变-而且子类的实例不能向父类传值"><a href="#缺点：-当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变-而且子类的实例不能向父类传值" class="headerlink" title="缺点： 当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变,而且子类的实例不能向父类传值"></a>缺点： 当子类的实例改变引用数据时，所有的子类的引用数据类型都会跟着改变,而且子类的实例不能向父类传值</h5><h3 id="2-借用构造函数继承-call-apply"><a href="#2-借用构造函数继承-call-apply" class="headerlink" title="2.借用构造函数继承(call,apply)"></a>2.借用构造函数继承(call,apply)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Heart</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'重庆'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">//Childheart &#123;name: "小明", address: "重庆", arr: Array(4), get: ƒ&#125;</span> firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span>address<span class="token operator">=</span><span class="token string">'上海'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小明</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 3，5]</span> firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span> secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明</span> firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 报错 firstChild.say is not a function</span> secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//报错 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-在子类的构造函数中改变父类的构造函数的this指向"><a href="#实现方式-在子类的构造函数中改变父类的构造函数的this指向" class="headerlink" title="实现方式:在子类的构造函数中改变父类的构造函数的this指向"></a>实现方式:在子类的构造函数中改变父类的构造函数的this指向</h5><h5 id="优点：-子类可以向父类传递参数，且父类的引用属性不会共享"><a href="#优点：-子类可以向父类传递参数，且父类的引用属性不会共享" class="headerlink" title="优点： 子类可以向父类传递参数，且父类的引用属性不会共享"></a>优点： 子类可以向父类传递参数，且父类的引用属性不会共享</h5><h5 id="缺点：-子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大"><a href="#缺点：-子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大" class="headerlink" title="缺点： 子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大"></a>缺点： 子类无法访问父类原型上的方法，每个子类的实例都有父类h构造函数的属性和方法，空间占用大</h5><h3 id="3-组合式继承-原型链继承和借用构造函数继承的组合"><a href="#3-组合式继承-原型链继承和借用构造函数继承的组合" class="headerlink" title="3.组合式继承(原型链继承和借用构造函数继承的组合)"></a>3.组合式继承(原型链继承和借用构造函数继承的组合)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">Heart</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'重庆'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Childheart</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">//Childheart &#123;name: "小明", address: "重庆", arr: Array(4), get: ƒ&#125;</span>firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span>firstChild<span class="token punctuation">.</span>address<span class="token operator">=</span><span class="token string">'上海'</span><span class="token punctuation">;</span>firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span> <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小明</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 3，5]</span>firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span>secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明</span>firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 小红 是一个 上海 人</span>secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明 是一个 重庆 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性"><a href="#实现方式-使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性" class="headerlink" title="实现方式: 使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性"></a>实现方式: 使用原链继承父类原型上的属性和方法，通过构造函数继承父类的实例属性</h5><h5 id="优点：-父类的方法可以复用，也可以向父类传值-而且父类的引用属性也不会被子类共享"><a href="#优点：-父类的方法可以复用，也可以向父类传值-而且父类的引用属性也不会被子类共享" class="headerlink" title="优点： 父类的方法可以复用，也可以向父类传值,而且父类的引用属性也不会被子类共享"></a>优点： 父类的方法可以复用，也可以向父类传值,而且父类的引用属性也不会被子类共享</h5><h5 id="缺点：-调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数"><a href="#缺点：-调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数" class="headerlink" title="缺点： 调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数"></a>缺点： 调用两次父类，产生了两次实例，子类的构造函数会代替原型上父类的构造函数</h5><h3 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4.原型式继承"></a>4.原型式继承</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//obj为父类的实例</span><span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>obj   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> heart<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小李'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span>heart<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">// F&#123;&#125;</span>firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span>firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span> <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childheart</span><span class="token punctuation">(</span>heart<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小李</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 58, 58588, 8888]</span>firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span>secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小李</span>firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 小红 是一个 深圳 人</span>secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小李 是一个 深圳 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例-最后再返回当前的构造函数（与Object-craete-类似）"><a href="#实现方式-在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例-最后再返回当前的构造函数（与Object-craete-类似）" class="headerlink" title="实现方式: 在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例,最后再返回当前的构造函数（与Object.craete()类似）"></a>实现方式: 在子类的构造函数中再创建一个构造函数，将其的原型指向父类的实例,最后再返回当前的构造函数（与Object.craete()类似）</h5><h5 id="优点：-父类的方法可以复用"><a href="#优点：-父类的方法可以复用" class="headerlink" title="优点： 父类的方法可以复用"></a>优点： 父类的方法可以复用</h5><h5 id="缺点：-子类不能向父类传参-父类的引用属性会被所有子类共享"><a href="#缺点：-子类不能向父类传参-父类的引用属性会被所有子类共享" class="headerlink" title="缺点： 子类不能向父类传参,父类的引用属性会被所有子类共享"></a>缺点： 子类不能向父类传参,父类的引用属性会被所有子类共享</h5><h3 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5.寄生式继承"></a>5.寄生式继承</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//obj为父类的实例</span> <span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>obj    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token comment">//在原型式的基础上有套一个函数</span><span class="token keyword">function</span> <span class="token function">ChildH</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> childHeart<span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">Childheart</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  childHeart<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'心儿'</span><span class="token keyword">return</span> childHeart<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-在原型式继承的基础上套一个盒子"><a href="#实现方式-在原型式继承的基础上套一个盒子" class="headerlink" title="实现方式: 在原型式继承的基础上套一个盒子"></a>实现方式: 在原型式继承的基础上套一个盒子</h5><h5 id="缺点：-无法复用"><a href="#缺点：-无法复用" class="headerlink" title="缺点： 无法复用"></a>缺点： 无法复用</h5><h2 id="6-寄生组合式继承"><a href="#6-寄生组合式继承" class="headerlink" title="6.寄生组合式继承"></a>6.寄生组合式继承</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">  <span class="token comment">//父类的构造函数</span>  <span class="token keyword">function</span> <span class="token function">Heart</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token operator">||</span><span class="token string">"小明"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address<span class="token operator">||</span><span class="token string">"山西"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//在父类的原型上添加方法</span>  <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' 是一个 '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token string">' 人'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//利用原型式继承</span> <span class="token keyword">function</span> <span class="token function">Childheart</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>obj    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">//在原型式的基础上有套一个函数,将 子类的原型跟父类的实例结合起来</span> <span class="token keyword">function</span> <span class="token function">inheritH</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span>parent</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> childH<span class="token operator">=</span><span class="token function">Childheart</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象</span>   childH<span class="token punctuation">.</span>constructor<span class="token operator">=</span>child<span class="token punctuation">;</span><span class="token comment">//将对象的构造函数转向子类</span>   child<span class="token punctuation">.</span>prototype<span class="token operator">=</span>childH<span class="token punctuation">;</span> <span class="token comment">//子类的原型又指向父类的实例</span> <span class="token punctuation">&#125;</span><span class="token comment">//子类的构造函数</span> <span class="token keyword">function</span> <span class="token function">Childs</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">Heart</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>address<span class="token punctuation">)</span><span class="token comment">//借用构造函数继承</span> <span class="token punctuation">&#125;</span> <span class="token comment">//把子类和父类结合在一起</span> <span class="token function">inheritH</span><span class="token punctuation">(</span>Childs<span class="token punctuation">,</span>Heart<span class="token punctuation">)</span><span class="token comment">//  一些调用</span> <span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childs</span><span class="token punctuation">(</span><span class="token string">'小李'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">)</span> <span class="token comment">//Childs &#123;name: "小李", address: "深圳", arr: Array(4), get: ƒ&#125;</span> firstChild<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'小红'</span><span class="token punctuation">;</span> firstChild<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11111</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">58588</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> secondChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Childs</span><span class="token punctuation">(</span><span class="token string">'小赵'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">//小红</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//小赵</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// [1, 58, 58588, 8888]</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>secondChild<span class="token punctuation">.</span>arr<span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">//[1, 2, 3，5]</span> firstChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//11111</span> secondChild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小赵</span> firstChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 小红 是一个 深圳 人</span> secondChild<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小赵 是一个 深圳 人</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-修复组合式继承的不足"><a href="#实现方式-修复组合式继承的不足" class="headerlink" title="实现方式: 修复组合式继承的不足"></a>实现方式: 修复组合式继承的不足</h5><h5 id="优点：-父类的方法可以复用-子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数"><a href="#优点：-父类的方法可以复用-子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数" class="headerlink" title="优点： 父类的方法可以复用,子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数"></a>优点： 父类的方法可以复用,子类可以向父类传参，父类的引用数据类型不会共享，只调用一次父类构造函数</h5><h2 id="二、es6中的继承方式"><a href="#二、es6中的继承方式" class="headerlink" title="二、es6中的继承方式"></a>二、es6中的继承方式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Heart</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token punctuation">&#125;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">childH</span> <span class="token keyword">extends</span> <span class="token class-name">Heart</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token comment">//继承父类的属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address  <span class="token punctuation">&#125;</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> firstChild<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">childH</span><span class="token punctuation">(</span><span class="token string">'心儿'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实现方式-利用class的extends让子类继承父类的属性和方法"><a href="#实现方式-利用class的extends让子类继承父类的属性和方法" class="headerlink" title="实现方式:利用class的extends让子类继承父类的属性和方法"></a>实现方式:利用class的extends让子类继承父类的属性和方法</h5>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节流和防抖</title>
      <link href="posts/1f25.html"/>
      <url>posts/1f25.html</url>
      
        <content type="html"><![CDATA[<h6 id="防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。注意的是要让需要防抖和节流优化的操作等于-防抖和节流内部返回的函数-而不是其本身"><a href="#防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。注意的是要让需要防抖和节流优化的操作等于-防抖和节流内部返回的函数-而不是其本身" class="headerlink" title="防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。注意的是要让需要防抖和节流优化的操作等于 防抖和节流内部返回的函数,而不是其本身"></a>防抖和节流属于性能优化的知识，防止浏览器一直触发同一类事件，而进行的优化方案。注意的是要让需要防抖和节流优化的操作等于 防抖和节流内部返回的函数,而不是其本身</h6><h2 id="一、防抖-debounce"><a href="#一、防抖-debounce" class="headerlink" title="一、防抖 debounce"></a>一、防抖 debounce</h2><ul><li>对于短时间内连续触发的事件，防抖就是让某个时间期限内，事件处理函数只执行一次</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*    fn 指的是执行的函数    delay 指的是延迟的时间  */</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// window.onscroll=scrollTop //一直在打印</span>window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//滚动停止后打印</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、节流-throttle"><a href="#二、节流-throttle" class="headerlink" title="二、节流 throttle"></a>二、节流 throttle</h2><h5 id="如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效"><a href="#如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效" class="headerlink" title="如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效"></a>如果短时间大量触发同一事件，在函数执行一次之后，该函数在指定的时间期限内不再工作，直到过了这段时间才生效</h5><ul><li>用 setTimeout 实现</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*    fn 指的是执行的函数    delay 指的是延迟的时间  */</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//如果里面用到this，记得改变this 指向</span>      timer <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// window.onscroll=scrollTop //一直在打印</span>window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//0.5s的间隔输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用 new Date 实现</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*    fn 指的是执行的函数    delay 指的是延迟的时间  */</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//拿到开始的时间戳</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//拿到当前的时间戳</span>    <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">//保存当前的this</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments <span class="token comment">//传入的参数</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">-</span> start <span class="token operator">>=</span> delay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span>      start <span class="token operator">=</span> current    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span> <span class="token string">'555'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// window.onscroll=scrollTop //一直在打印</span>window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//0.5s的间隔输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="总的来说-防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。"><a href="#总的来说-防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。" class="headerlink" title="总的来说:防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。"></a>总的来说:防抖是将多次执行变为只执行一次，节流是将多次执行变为每隔一段时间执行。</h6><h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><ul><li>防抖:<ul><li>search 搜索联想，用户在不断输入值时，用防抖来节约请求资源。</li><li>window 触发 resize 的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</li></ul></li><li>节流:<ul><li>鼠标不断点击触发，mousedown(单位时间内只触发一次)</li><li>监听滚动事件，比如是否滑到底部自动加载更多，用 throttle 来判断</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js闭包</title>
      <link href="posts/7d8b.html"/>
      <url>posts/7d8b.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p>闭包是指有权访问另一个函数作用域中的变量的函数，也是函数中嵌套函数<br>闭包的形成与变量的作用域和变量的生命周期息息相关</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">"xiner"</span><span class="token punctuation">;</span> <span class="token comment">//name是heart 创建的局部变量 </span>  <span class="token keyword">function</span> <span class="token function">heartChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//内部函数,闭包</span>    <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用外部的变量</span>  <span class="token punctuation">&#125;</span>  <span class="token function">heartChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 heartChild()内部可以使用heart()中声明的变量name,这就形成了一个闭包</p><h2 id="二、作用"><a href="#二、作用" class="headerlink" title="二、作用"></a>二、作用</h2><h3 id="1-函数内部调用外部变量"><a href="#1-函数内部调用外部变量" class="headerlink" title="1.函数内部调用外部变量"></a>1.函数内部调用外部变量</h3><p>上面的例子就反映了在heartChild()函数内部并没有name变量，而是访问了heart()里面的内部变量</p><h3 id="2-构造函数的私有属性"><a href="#2-构造函数的私有属性" class="headerlink" title="2.构造函数的私有属性"></a>2.构造函数的私有属性</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Heart</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name<span class="token operator">=</span>name<span class="token punctuation">;</span> <span class="token comment">//name是heart 创建的局部变量 </span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">15</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'xiner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>heart1<span class="token punctuation">.</span>age<span class="token operator">+=</span><span class="token number">1</span> heart1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'xin'</span>heart1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//xiner  name就是构造函数的私有属性，不能改变,age就可以改变</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">)</span>  <span class="token comment">//age=16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-延长变量生命周期"><a href="#3-延长变量生命周期" class="headerlink" title="3.延长变量生命周期"></a>3.延长变量生命周期</h3><p>在函数内部的变量,原来在函数执行之后,都会被销毁,而由于闭包,变量永远会被保存下来,延长了生命周期</p><h2 id="三、闭包的应用"><a href="#三、闭包的应用" class="headerlink" title="三、闭包的应用"></a>三、闭包的应用</h2><ul><li>axios的请求回调</li><li>事件绑定的回调</li><li>setTimeout的延时回调</li><li>函数内部返回一个匿名函数</li><li>函数节流和防抖等等</li></ul><h2 id="四、内存泄漏"><a href="#四、内存泄漏" class="headerlink" title="四、内存泄漏"></a>四、内存泄漏</h2><p> 由于IE的js对象和DOM对象使用不同的垃圾收集方法，因此闭包在IE中会导致内存泄露问题，也就是无法销毁在内存中的dom元素。因此我们在不需要使用dom时，应将dom解除引用来避免内存泄露</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// div用完之后一直存在内存中，无法被回收</span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里用div导致内存泄露</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> test <span class="token operator">=</span> div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    div <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//div用完后,使其制空，避免泄露</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型与原型链</title>
      <link href="posts/e69b.html"/>
      <url>posts/e69b.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、原型"><a href="#一、原型" class="headerlink" title="一、原型"></a>一、原型</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><h5 id="原型是一个对象的模板-利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法"><a href="#原型是一个对象的模板-利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法" class="headerlink" title="原型是一个对象的模板,利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法"></a>原型是一个对象的模板,利用这个模板创建出来的新对象实例都会拥有原型的所有属性和方法</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span><span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小明是一个15的帅哥</span>heart2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//小红是一个18的美女</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="并且通过原型创建的新实例是相互独立-互不影响的"><a href="#并且通过原型创建的新实例是相互独立-互不影响的" class="headerlink" title="并且通过原型创建的新实例是相互独立,互不影响的"></a>并且通过原型创建的新实例是相互独立,互不影响的</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span><span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//小明</span>heart2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//报错 heart2.getName is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-总结"><a href="#2-总结" class="headerlink" title="2.总结"></a>2.总结</h3><h5 id="原型分为隐士原型-proto-和显示原型-prototype"><a href="#原型分为隐士原型-proto-和显示原型-prototype" class="headerlink" title="原型分为隐士原型(__proto__)和显示原型(prototype)"></a>原型分为隐士原型(__proto__)和显示原型(prototype)</h5><h5 id="隐士原型-proto-是对象拥有的-显示原型-prototype-是构造函数拥有的"><a href="#隐士原型-proto-是对象拥有的-显示原型-prototype-是构造函数拥有的" class="headerlink" title="隐士原型(__proto__)是对象拥有的,显示原型(prototype)是构造函数拥有的"></a>隐士原型(__proto__)是对象拥有的,显示原型(prototype)是构造函数拥有的</h5><h5 id="实例的隐士原型-proto-指向构造函数的显示原型-prototype"><a href="#实例的隐士原型-proto-指向构造函数的显示原型-prototype" class="headerlink" title="实例的隐士原型(__proto__)指向构造函数的显示原型(prototype)"></a>实例的隐士原型(__proto__)指向构造函数的显示原型(prototype)</h5><h5 id="实例的构造器属性-constructor-指向构造函数"><a href="#实例的构造器属性-constructor-指向构造函数" class="headerlink" title="实例的构造器属性(constructor)指向构造函数"></a>实例的构造器属性(constructor)指向构造函数</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">&#125;</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span>heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>constructor<span class="token operator">===</span> Heart<span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、原型链"><a href="#二、原型链" class="headerlink" title="二、原型链"></a>二、原型链</h2><h5 id="1-当访问heart1的属性时-先访问自身是否是否具有该属性"><a href="#1-当访问heart1的属性时-先访问自身是否是否具有该属性" class="headerlink" title="1.当访问heart1的属性时,先访问自身是否是否具有该属性;"></a>1.当访问heart1的属性时,先访问自身是否是否具有该属性;</h5><h5 id="2-若自身没有该属性-就会访问Heart-prototype是否拥有"><a href="#2-若自身没有该属性-就会访问Heart-prototype是否拥有" class="headerlink" title="2.若自身没有该属性,就会访问Heart.prototype是否拥有;"></a>2.若自身没有该属性,就会访问Heart.prototype是否拥有;</h5><h5 id="3-若Heart-prototype没有该属性-就会访问Object-prototype是否拥有"><a href="#3-若Heart-prototype没有该属性-就会访问Object-prototype是否拥有" class="headerlink" title="3.若Heart.prototype没有该属性,就会访问Object.prototype是否拥有;"></a>3.若Heart.prototype没有该属性,就会访问Object.prototype是否拥有;</h5><h5 id="3-若Object-prototype没有该属性-就会返回undefined"><a href="#3-若Object-prototype没有该属性-就会返回undefined" class="headerlink" title="3.若Object.prototype没有该属性,就会返回undefined"></a>3.若Object.prototype没有该属性,就会返回undefined</h5><h5 id="原型链为-heart1—-gt-Heart-prototype—-gt-Object-prototype—-gt-null"><a href="#原型链为-heart1—-gt-Heart-prototype—-gt-Object-prototype—-gt-null" class="headerlink" title="原型链为: heart1—&gt;Heart.prototype—&gt;Object.prototype—&gt;null"></a>原型链为: heart1—&gt;Heart.prototype—&gt;Object.prototype—&gt;null</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">Heart</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name   <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age   <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type <span class="token punctuation">&#125;</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token keyword">var</span> heart1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'帅哥'</span><span class="token punctuation">)</span> <span class="token keyword">var</span> heart2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Heart</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">)</span> heart1<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>heart1<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Heart</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="原型链反应了对象之间继承的关系"><a href="#原型链反应了对象之间继承的关系" class="headerlink" title="原型链反应了对象之间继承的关系"></a>原型链反应了对象之间继承的关系</h5>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向以及改变this指向的方法</title>
      <link href="posts/6b6.html"/>
      <url>posts/6b6.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、this指向"><a href="#一、this指向" class="headerlink" title="一、this指向"></a>一、this指向</h2><h3 id="1-普通函数调用时，this指向window"><a href="#1-普通函数调用时，this指向window" class="headerlink" title="1.普通函数调用时，this指向window"></a>1.普通函数调用时，this指向window</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//Window</span><span class="token punctuation">&#125;</span><span class="token function">heart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-构造函数调用时-this指向实例对象"><a href="#2-构造函数调用时-this指向实例对象" class="headerlink" title="2.构造函数调用时,this指向实例对象"></a>2.构造函数调用时,this指向实例对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Hearter</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//指向了实例heart</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> heart<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hearter</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'xiner'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-定时器调用时-this指向window"><a href="#3-定时器调用时-this指向window" class="headerlink" title="3.定时器调用时,this指向window"></a>3.定时器调用时,this指向window</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//Window</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-对象的方法调用时，this指向该对象"><a href="#4-对象的方法调用时，this指向该对象" class="headerlink" title="4.对象的方法调用时，this指向该对象"></a>4.对象的方法调用时，this指向该对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//obj</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="对于this指向总的来说，谁调用，指向谁-而且必须是对象"><a href="#对于this指向总的来说，谁调用，指向谁-而且必须是对象" class="headerlink" title="对于this指向总的来说，谁调用，指向谁,而且必须是对象"></a>对于this指向总的来说，谁调用，指向谁,而且必须是对象</h5><hr><h2 id="二、改变this的指向"><a href="#二、改变this的指向" class="headerlink" title="二、改变this的指向"></a>二、改变this的指向</h2><h3 id="1-call改变this的指向"><a href="#1-call改变this的指向" class="headerlink" title="1.call改变this的指向"></a>1.call改变this的指向</h3><h6 id="使用call时，this指向第一个参数，后面可以跟无数个参数-并执行回调函数"><a href="#使用call时，this指向第一个参数，后面可以跟无数个参数-并执行回调函数" class="headerlink" title="使用call时，this指向第一个参数，后面可以跟无数个参数,并执行回调函数"></a>使用call时，this指向第一个参数，后面可以跟无数个参数,并执行回调函数</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> hearter<span class="token operator">=</span><span class="token punctuation">&#123;</span>   name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>   age<span class="token operator">:</span><span class="token number">15</span> <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token comment">//xiner 18 男</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hearter 可以使用heart里面的方法</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//xiner</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span> <span class="token punctuation">&#125;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>hearter<span class="token punctuation">,</span><span class="token string">'xiner'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span> <span class="token comment">//直接执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-apply改变this的指向"><a href="#2-apply改变this的指向" class="headerlink" title="2.apply改变this的指向"></a>2.apply改变this的指向</h3><h6 id="使用apply时，this指向第一个参数，第二个参数时数组"><a href="#使用apply时，this指向第一个参数，第二个参数时数组" class="headerlink" title="使用apply时，this指向第一个参数，第二个参数时数组"></a>使用apply时，this指向第一个参数，第二个参数时数组</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token comment">//1 5 8 9 10 7 6</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-bind改变this的指向"><a href="#3-bind改变this的指向" class="headerlink" title="3.bind改变this的指向"></a>3.bind改变this的指向</h3><h6 id="使用bind时，this指向第一个参数，后面也可以跟无数个参数"><a href="#使用bind时，this指向第一个参数，后面也可以跟无数个参数" class="headerlink" title="使用bind时，this指向第一个参数，后面也可以跟无数个参数"></a>使用bind时，this指向第一个参数，后面也可以跟无数个参数</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xiner'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//obj</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
